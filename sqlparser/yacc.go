//line yacc.y:1

// Copyright 2012, Google Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Copyright 2016 The kingshard Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// The MIT License (MIT)

// Copyright (c) 2016 Jerry Bai

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package sqlparser

import __yyfmt__ "fmt"

//line yacc.y:43
import "bytes"

// SetParseTree to build ast.
func SetParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

// SetAllowComments set allow comments.
func SetAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

// ForceEOF force EOF.
func ForceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

var (
	SHARE        = []byte("share")
	MODE         = []byte("mode")
	IF_BYTES     = []byte("if")
	VALUES_BYTES = []byte("values")
)

//line yacc.y:70
type yySymType struct {
	yys         int
	empty       struct{}
	statement   Statement
	selStmt     SelectStatement
	setStmt     SetStatement
	showStmt    ShowStatement
	ddlStmt     DDLStatement
	byt         byte
	bytes       []byte
	bytes2      [][]byte
	str         string
	boolean     bool
	selectExprs SelectExprs
	selectExpr  SelectExpr
	columns     Columns
	colName     *ColName
	tableExprs  TableExprs
	tableExpr   TableExpr
	smTableExpr SimpleTableExpr
	tableName   *TableName
	indexHints  *IndexHints
	expr        Expr
	boolExpr    BoolExpr
	valExpr     ValExpr
	tuple       Tuple
	valExprs    ValExprs
	values      Values
	subquery    *Subquery
	caseExpr    *CaseExpr
	funcExpr    *FuncExpr
	whens       []*When
	when        *When
	orderBy     OrderBy
	order       *Order
	limit       *Limit
	insRows     InsertRows
	updateExprs UpdateExprs
	updateExpr  *UpdateExpr
	createDef   CreateDefinition
	createDefs  CreateDefinitions
	columnDef   *ColumnDefinition
	dataType    *DataType
	idxColName  *IndexColName
	idxColNames IndexColNames
	optKeyVal   *OptionKeyValue
	optKeyVals  OptionKeyValues
	fiOAfCol    *FirstOrAfterColumn
	alterSpecs  AlterSpecifications
	alterSpec   AlterSpecification
}

const LEX_ERROR = 57346
const SELECT = 57347
const INSERT = 57348
const UPDATE = 57349
const DELETE = 57350
const FROM = 57351
const WHERE = 57352
const GROUP = 57353
const HAVING = 57354
const ORDER = 57355
const BY = 57356
const LIMIT = 57357
const FOR = 57358
const ALL = 57359
const DISTINCT = 57360
const AS = 57361
const EXISTS = 57362
const NULL = 57363
const ASC = 57364
const DESC = 57365
const VALUES = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const SHOW = 57373
const EXPLAIN = 57374
const DESCRIBE = 57375
const ID = 57376
const STRING = 57377
const NUMBER = 57378
const VALUE_ARG = 57379
const COMMENTS = 57380
const UNION = 57381
const MINUS = 57382
const EXCEPT = 57383
const INTERSECT = 57384
const FULL = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const OR = 57397
const AND = 57398
const NOT = 57399
const BETWEEN = 57400
const CASE = 57401
const WHEN = 57402
const THEN = 57403
const ELSE = 57404
const LE = 57405
const GE = 57406
const NE = 57407
const NULL_SAFE_EQUAL = 57408
const IS = 57409
const LIKE = 57410
const IN = 57411
const UNARY = 57412
const END = 57413
const BEGIN = 57414
const START = 57415
const TRANSACTION = 57416
const COMMIT = 57417
const ROLLBACK = 57418
const ISOLATION = 57419
const LEVEL = 57420
const READ = 57421
const COMMITTED = 57422
const UNCOMMITTED = 57423
const REPEATABLE = 57424
const SERIALIZABLE = 57425
const NAMES = 57426
const CHARSET = 57427
const CHARACTER = 57428
const COLLATION = 57429
const ARMSCII8 = 57430
const ASCII = 57431
const BIG5 = 57432
const BINARY = 57433
const CP1250 = 57434
const CP1251 = 57435
const CP1256 = 57436
const CP1257 = 57437
const CP850 = 57438
const CP852 = 57439
const CP866 = 57440
const CP932 = 57441
const DEC8 = 57442
const EUCJPMS = 57443
const EUCKR = 57444
const GB2312 = 57445
const GBK = 57446
const GEOSTD8 = 57447
const GREEK = 57448
const HEBREW = 57449
const HP8 = 57450
const KEYBCS2 = 57451
const KOI8R = 57452
const KOI8U = 57453
const LATIN1 = 57454
const LATIN2 = 57455
const LATIN5 = 57456
const LATIN7 = 57457
const MACCE = 57458
const MACROMAN = 57459
const SJIS = 57460
const SWE7 = 57461
const TIS620 = 57462
const UCS2 = 57463
const UJIS = 57464
const UTF16 = 57465
const UTF16LE = 57466
const UTF32 = 57467
const UTF8 = 57468
const UTF8MB4 = 57469
const ARMSCII8_GENERAL_CI = 57470
const ARMSCII8_BIN = 57471
const ASCII_GENERAL_CI = 57472
const ASCII_BIN = 57473
const BIG5_CHINESE_CI = 57474
const BIG5_BIN = 57475
const CP1250_GENERAL_CI = 57476
const CP1250_BIN = 57477
const CP1251_GENERAL_CI = 57478
const CP1251_GENERAL_CS = 57479
const CP1251_BIN = 57480
const CP1256_GENERAL_CI = 57481
const CP1256_BIN = 57482
const CP1257_GENERAL_CI = 57483
const CP1257_BIN = 57484
const CP850_GENERAL_CI = 57485
const CP850_BIN = 57486
const CP852_GENERAL_CI = 57487
const CP852_BIN = 57488
const CP866_GENERAL_CI = 57489
const CP866_BIN = 57490
const CP932_JAPANESE_CI = 57491
const CP932_BIN = 57492
const DEC8_SWEDISH_CI = 57493
const DEC8_BIN = 57494
const EUCJPMS_JAPANESE_CI = 57495
const EUCJPMS_BIN = 57496
const EUCKR_KOREAN_CI = 57497
const EUCKR_BIN = 57498
const GB2312_CHINESE_CI = 57499
const GB2312_BIN = 57500
const GBK_CHINESE_CI = 57501
const GBK_BIN = 57502
const GEOSTD8_GENERAL_CI = 57503
const GEOSTD8_BIN = 57504
const GREEK_GENERAL_CI = 57505
const GREEK_BIN = 57506
const HEBREW_GENERAL_CI = 57507
const HEBREW_BIN = 57508
const HP8_ENGLISH_CI = 57509
const HP8_BIN = 57510
const KEYBCS2_GENERAL_CI = 57511
const KEYBCS2_BIN = 57512
const KOI8R_GENERAL_CI = 57513
const KOI8R_BIN = 57514
const KOI8U_GENERAL_CI = 57515
const KOI8U_BIN = 57516
const LATIN1_GENERAL_CI = 57517
const LATIN1_GENERAL_CS = 57518
const LATIN1_BIN = 57519
const LATIN2_GENERAL_CI = 57520
const LATIN2_BIN = 57521
const LATIN5_TURKISH_CI = 57522
const LATIN5_BIN = 57523
const LATIN7_GENERAL_CI = 57524
const LATIN7_GENERAL_CS = 57525
const LATIN7_BIN = 57526
const MACCE_GENERAL_CI = 57527
const MACCE_BIN = 57528
const MACROMAN_GENERAL_CI = 57529
const MACROMAN_BIN = 57530
const SJIS_JAPANESE_CI = 57531
const SJIS_BIN = 57532
const SWE7_SWEDISH_CI = 57533
const SWE7_BIN = 57534
const TIS620_THAI_CI = 57535
const TIS620_BIN = 57536
const UCS2_GENERAL_CI = 57537
const UCS2_UNICODE_CI = 57538
const UCS2_BIN = 57539
const UJIS_JAPANESE_CI = 57540
const UJIS_BIN = 57541
const UTF16_GENERAL_CI = 57542
const UTF16_UNICODE_CI = 57543
const UTF16_BIN = 57544
const UTF16LE_GENERAL_CI = 57545
const UTF16LE_BIN = 57546
const UTF32_GENERAL_CI = 57547
const UTF32_UNICODE_CI = 57548
const UTF32_BIN = 57549
const UTF8_GENERAL_CI = 57550
const UTF8_UNICODE_CI = 57551
const UTF8_BIN = 57552
const UTF8MB4_GENERAL_CI = 57553
const UTF8MB4_UNICODE_CI = 57554
const UTF8MB4_BIN = 57555
const SESSION = 57556
const GLOBAL = 57557
const VARIABLES = 57558
const STATUS = 57559
const DATABASES = 57560
const SCHEMAS = 57561
const DATABASE = 57562
const STORAGE = 57563
const ENGINES = 57564
const TABLES = 57565
const COLUMNS = 57566
const FIELDS = 57567
const PROCEDURE = 57568
const FUNCTION = 57569
const INDEXES = 57570
const KEYS = 57571
const TRIGGER = 57572
const TRIGGERS = 57573
const PLUGINS = 57574
const PROCESSLIST = 57575
const SLAVE = 57576
const PROFILES = 57577
const REPLACE = 57578
const OFFSET = 57579
const COLLATE = 57580
const CREATE = 57581
const ALTER = 57582
const DROP = 57583
const RENAME = 57584
const TABLE = 57585
const INDEX = 57586
const VIEW = 57587
const TO = 57588
const IGNORE = 57589
const IF = 57590
const UNIQUE = 57591
const FULLTEXT = 57592
const USING = 57593
const BTREE = 57594
const HASH = 57595
const BIT = 57596
const TINYINT = 57597
const BOOL = 57598
const BOOLEAN = 57599
const SMALLINT = 57600
const MEDIUMINT = 57601
const INT = 57602
const INTEGER = 57603
const BIGINT = 57604
const REAL = 57605
const DOUBLE = 57606
const FLOAT = 57607
const DECIMAL = 57608
const DATE = 57609
const TIME = 57610
const TIMESTAMP = 57611
const DATETIME = 57612
const YEAR = 57613
const CHAR = 57614
const NCHAR = 57615
const VARCHAR = 57616
const NVARCHAR = 57617
const TINYTEXT = 57618
const TEXT = 57619
const MEDIUMTEXT = 57620
const LONGTEXT = 57621
const VARBINARY = 57622
const TINYBLOB = 57623
const BLOB = 57624
const MEDIUMBLOB = 57625
const LONGBLOB = 57626
const ENUM = 57627
const AUTO_INCREMENT = 57628
const ENGINE = 57629
const PRIMARY = 57630
const REFERENCES = 57631
const COMMENT = 57632
const COLUMN_FORMAT = 57633
const FIXED = 57634
const DYNAMIC = 57635
const DISK = 57636
const MEMORY = 57637
const MATCH = 57638
const PARTIAL = 57639
const SIMPLE = 57640
const RESTRICT = 57641
const CASCADE = 57642
const NO = 57643
const ACTION = 57644
const UNSIGNED = 57645
const ZEROFILL = 57646
const CONSTRAINT = 57647
const FOREIGN = 57648
const FIRST = 57649
const AFTER = 57650
const ADD = 57651
const COLUMN = 57652
const CHANGE = 57653
const MODIFY = 57654
const ENABLE = 57655
const DISABLE = 57656
const KILL = 57657
const QUERY = 57658
const CONNECTION = 57659
const POSITION = 57660

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"NULL",
	"ASC",
	"DESC",
	"VALUES",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"SHOW",
	"EXPLAIN",
	"DESCRIBE",
	"ID",
	"STRING",
	"NUMBER",
	"VALUE_ARG",
	"COMMENTS",
	"'('",
	"'~'",
	"UNION",
	"MINUS",
	"EXCEPT",
	"INTERSECT",
	"','",
	"FULL",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"OR",
	"AND",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"IN",
	"'|'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'.'",
	"UNARY",
	"END",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"ISOLATION",
	"LEVEL",
	"READ",
	"COMMITTED",
	"UNCOMMITTED",
	"REPEATABLE",
	"SERIALIZABLE",
	"NAMES",
	"CHARSET",
	"CHARACTER",
	"COLLATION",
	"ARMSCII8",
	"ASCII",
	"BIG5",
	"BINARY",
	"CP1250",
	"CP1251",
	"CP1256",
	"CP1257",
	"CP850",
	"CP852",
	"CP866",
	"CP932",
	"DEC8",
	"EUCJPMS",
	"EUCKR",
	"GB2312",
	"GBK",
	"GEOSTD8",
	"GREEK",
	"HEBREW",
	"HP8",
	"KEYBCS2",
	"KOI8R",
	"KOI8U",
	"LATIN1",
	"LATIN2",
	"LATIN5",
	"LATIN7",
	"MACCE",
	"MACROMAN",
	"SJIS",
	"SWE7",
	"TIS620",
	"UCS2",
	"UJIS",
	"UTF16",
	"UTF16LE",
	"UTF32",
	"UTF8",
	"UTF8MB4",
	"ARMSCII8_GENERAL_CI",
	"ARMSCII8_BIN",
	"ASCII_GENERAL_CI",
	"ASCII_BIN",
	"BIG5_CHINESE_CI",
	"BIG5_BIN",
	"CP1250_GENERAL_CI",
	"CP1250_BIN",
	"CP1251_GENERAL_CI",
	"CP1251_GENERAL_CS",
	"CP1251_BIN",
	"CP1256_GENERAL_CI",
	"CP1256_BIN",
	"CP1257_GENERAL_CI",
	"CP1257_BIN",
	"CP850_GENERAL_CI",
	"CP850_BIN",
	"CP852_GENERAL_CI",
	"CP852_BIN",
	"CP866_GENERAL_CI",
	"CP866_BIN",
	"CP932_JAPANESE_CI",
	"CP932_BIN",
	"DEC8_SWEDISH_CI",
	"DEC8_BIN",
	"EUCJPMS_JAPANESE_CI",
	"EUCJPMS_BIN",
	"EUCKR_KOREAN_CI",
	"EUCKR_BIN",
	"GB2312_CHINESE_CI",
	"GB2312_BIN",
	"GBK_CHINESE_CI",
	"GBK_BIN",
	"GEOSTD8_GENERAL_CI",
	"GEOSTD8_BIN",
	"GREEK_GENERAL_CI",
	"GREEK_BIN",
	"HEBREW_GENERAL_CI",
	"HEBREW_BIN",
	"HP8_ENGLISH_CI",
	"HP8_BIN",
	"KEYBCS2_GENERAL_CI",
	"KEYBCS2_BIN",
	"KOI8R_GENERAL_CI",
	"KOI8R_BIN",
	"KOI8U_GENERAL_CI",
	"KOI8U_BIN",
	"LATIN1_GENERAL_CI",
	"LATIN1_GENERAL_CS",
	"LATIN1_BIN",
	"LATIN2_GENERAL_CI",
	"LATIN2_BIN",
	"LATIN5_TURKISH_CI",
	"LATIN5_BIN",
	"LATIN7_GENERAL_CI",
	"LATIN7_GENERAL_CS",
	"LATIN7_BIN",
	"MACCE_GENERAL_CI",
	"MACCE_BIN",
	"MACROMAN_GENERAL_CI",
	"MACROMAN_BIN",
	"SJIS_JAPANESE_CI",
	"SJIS_BIN",
	"SWE7_SWEDISH_CI",
	"SWE7_BIN",
	"TIS620_THAI_CI",
	"TIS620_BIN",
	"UCS2_GENERAL_CI",
	"UCS2_UNICODE_CI",
	"UCS2_BIN",
	"UJIS_JAPANESE_CI",
	"UJIS_BIN",
	"UTF16_GENERAL_CI",
	"UTF16_UNICODE_CI",
	"UTF16_BIN",
	"UTF16LE_GENERAL_CI",
	"UTF16LE_BIN",
	"UTF32_GENERAL_CI",
	"UTF32_UNICODE_CI",
	"UTF32_BIN",
	"UTF8_GENERAL_CI",
	"UTF8_UNICODE_CI",
	"UTF8_BIN",
	"UTF8MB4_GENERAL_CI",
	"UTF8MB4_UNICODE_CI",
	"UTF8MB4_BIN",
	"SESSION",
	"GLOBAL",
	"VARIABLES",
	"STATUS",
	"DATABASES",
	"SCHEMAS",
	"DATABASE",
	"STORAGE",
	"ENGINES",
	"TABLES",
	"COLUMNS",
	"FIELDS",
	"PROCEDURE",
	"FUNCTION",
	"INDEXES",
	"KEYS",
	"TRIGGER",
	"TRIGGERS",
	"PLUGINS",
	"PROCESSLIST",
	"SLAVE",
	"PROFILES",
	"REPLACE",
	"OFFSET",
	"COLLATE",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"FULLTEXT",
	"USING",
	"BTREE",
	"HASH",
	"BIT",
	"TINYINT",
	"BOOL",
	"BOOLEAN",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"REAL",
	"DOUBLE",
	"FLOAT",
	"DECIMAL",
	"DATE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"NCHAR",
	"VARCHAR",
	"NVARCHAR",
	"TINYTEXT",
	"TEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"VARBINARY",
	"TINYBLOB",
	"BLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"ENUM",
	"AUTO_INCREMENT",
	"ENGINE",
	"PRIMARY",
	"REFERENCES",
	"COMMENT",
	"COLUMN_FORMAT",
	"FIXED",
	"DYNAMIC",
	"DISK",
	"MEMORY",
	"MATCH",
	"PARTIAL",
	"SIMPLE",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"UNSIGNED",
	"ZEROFILL",
	"CONSTRAINT",
	"FOREIGN",
	"FIRST",
	"AFTER",
	"ADD",
	"COLUMN",
	"CHANGE",
	"MODIFY",
	"ENABLE",
	"DISABLE",
	"KILL",
	"QUERY",
	"CONNECTION",
	"POSITION",
	"')'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 563
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 1753

var yyAct = [...]int{

	153, 446, 1068, 115, 890, 170, 1069, 424, 1029, 745,
	142, 842, 752, 642, 831, 907, 892, 879, 256, 163,
	754, 981, 578, 753, 290, 436, 572, 143, 412, 935,
	889, 784, 502, 144, 429, 567, 428, 154, 504, 351,
	77, 291, 3, 415, 392, 912, 337, 960, 960, 388,
	339, 137, 152, 265, 264, 162, 213, 1061, 960, 960,
	960, 119, 960, 960, 1048, 168, 149, 150, 151, 960,
	294, 157, 60, 273, 272, 275, 276, 277, 278, 279,
	274, 1046, 1045, 83, 1044, 960, 960, 960, 944, 167,
	943, 760, 942, 160, 941, 940, 960, 211, 960, 42,
	43, 44, 45, 148, 152, 960, 960, 162, 938, 155,
	156, 386, 977, 977, 977, 934, 166, 136, 149, 150,
	151, 960, 141, 157, 246, 247, 933, 932, 926, 925,
	255, 252, 924, 923, 922, 921, 261, 949, 949, 931,
	577, 920, 475, 140, 382, 160, 500, 518, 382, 22,
	382, 517, 866, 216, 382, 219, 220, 221, 894, 895,
	626, 155, 156, 134, 148, 152, 843, 762, 162, 780,
	80, 615, 536, 1107, 982, 306, 913, 515, 168, 149,
	150, 151, 1060, 141, 157, 755, 295, 439, 778, 425,
	1072, 254, 287, 289, 455, 456, 457, 458, 459, 625,
	460, 461, 165, 776, 140, 774, 160, 1110, 249, 506,
	614, 772, 449, 509, 510, 118, 168, 627, 549, 551,
	346, 739, 155, 156, 770, 768, 313, 738, 616, 737,
	766, 764, 320, 321, 128, 129, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 333, 167, 761, 335, 423,
	756, 344, 342, 1033, 251, 345, 127, 347, 833, 441,
	440, 936, 758, 358, 360, 336, 79, 310, 522, 308,
	756, 250, 133, 166, 311, 312, 307, 758, 525, 122,
	314, 529, 528, 524, 318, 124, 125, 322, 323, 757,
	236, 114, 1030, 786, 161, 355, 239, 240, 242, 788,
	241, 364, 231, 167, 217, 218, 360, 230, 867, 757,
	78, 227, 566, 237, 395, 238, 361, 362, 79, 399,
	400, 401, 387, 402, 390, 564, 565, 303, 813, 380,
	166, 741, 802, 785, 76, 78, 1105, 1091, 168, 78,
	262, 167, 167, 52, 51, 561, 161, 1090, 1087, 1086,
	444, 1063, 1062, 451, 53, 78, 359, 54, 1056, 466,
	418, 305, 78, 263, 158, 385, 786, 243, 166, 420,
	398, 405, 406, 407, 1055, 1025, 1020, 403, 404, 79,
	274, 417, 1027, 411, 408, 1019, 409, 1014, 215, 818,
	414, 355, 383, 465, 1013, 1012, 640, 452, 639, 469,
	786, 979, 978, 976, 148, 152, 638, 161, 162, 514,
	959, 167, 442, 477, 534, 433, 158, 79, 168, 149,
	150, 151, 167, 141, 157, 550, 951, 950, 930, 576,
	493, 495, 533, 559, 530, 499, 481, 479, 166, 476,
	494, 505, 532, 381, 140, 483, 160, 117, 762, 503,
	498, 417, 214, 492, 527, 512, 488, 489, 490, 491,
	438, 437, 155, 156, 443, 82, 81, 762, 526, 516,
	507, 1070, 1071, 1111, 1112, 513, 485, 158, 613, 486,
	487, 553, 762, 430, 762, 431, 432, 435, 434, 304,
	762, 355, 355, 539, 540, 832, 168, 447, 448, 450,
	521, 167, 507, 762, 762, 394, 617, 618, 619, 762,
	762, 79, 620, 570, 167, 623, 624, 393, 167, 167,
	167, 126, 632, 633, 265, 264, 762, 635, 575, 569,
	755, 356, 1031, 1032, 834, 755, 79, 343, 641, 79,
	79, 622, 746, 747, 520, 628, 629, 630, 621, 264,
	755, 164, 22, 319, 215, 602, 79, 467, 315, 215,
	812, 1117, 523, 79, 801, 393, 519, 482, 152, 222,
	215, 162, 91, 90, 89, 223, 224, 225, 167, 1109,
	568, 168, 149, 150, 151, 226, 294, 157, 273, 272,
	275, 276, 277, 278, 279, 274, 273, 272, 275, 276,
	277, 278, 279, 274, 736, 503, 735, 367, 748, 160,
	751, 750, 277, 278, 279, 274, 800, 439, 214, 79,
	366, 365, 508, 214, 349, 155, 156, 811, 547, 167,
	546, 787, 265, 264, 214, 817, 370, 302, 563, 21,
	793, 794, 795, 796, 819, 807, 821, 161, 88, 568,
	543, 152, 816, 820, 162, 544, 815, 272, 275, 276,
	277, 278, 279, 274, 168, 149, 150, 151, 541, 294,
	157, 545, 338, 542, 302, 371, 763, 765, 767, 769,
	771, 773, 775, 777, 779, 929, 928, 927, 87, 441,
	440, 382, 160, 42, 43, 44, 45, 79, 744, 97,
	574, 511, 92, 93, 1101, 1024, 410, 453, 155, 156,
	275, 276, 277, 278, 279, 274, 341, 158, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	608, 609, 610, 611, 603, 604, 605, 606, 607, 612,
	273, 272, 275, 276, 277, 278, 279, 274, 824, 1023,
	822, 1011, 1010, 354, 468, 968, 835, 837, 353, 840,
	338, 830, 22, 967, 836, 845, 512, 847, 838, 849,
	340, 851, 79, 853, 823, 855, 825, 857, 953, 859,
	341, 861, 478, 273, 272, 275, 276, 277, 278, 279,
	274, 354, 884, 885, 952, 302, 353, 167, 880, 880,
	161, 257, 902, 900, 901, 897, 881, 259, 896, 455,
	456, 457, 458, 459, 905, 460, 461, 908, 908, 908,
	888, 746, 747, 904, 891, 887, 557, 886, 903, 828,
	827, 906, 442, 909, 910, 826, 806, 258, 962, 917,
	916, 919, 918, 273, 272, 275, 276, 277, 278, 279,
	274, 798, 797, 792, 791, 79, 790, 804, 805, 152,
	789, 783, 782, 808, 809, 781, 22, 26, 27, 28,
	158, 759, 294, 149, 150, 151, 421, 167, 167, 167,
	438, 437, 299, 161, 443, 167, 167, 167, 167, 939,
	23, 961, 24, 167, 25, 945, 946, 947, 948, 298,
	983, 297, 167, 296, 891, 891, 891, 956, 957, 958,
	972, 46, 963, 964, 891, 891, 1018, 965, 966, 998,
	891, 980, 985, 971, 987, 996, 995, 994, 874, 166,
	869, 873, 872, 1000, 871, 870, 875, 876, 877, 878,
	999, 868, 865, 167, 167, 864, 863, 862, 860, 858,
	1005, 167, 984, 158, 986, 1017, 856, 1016, 167, 167,
	1001, 854, 1002, 1003, 1004, 852, 850, 848, 1028, 846,
	891, 891, 730, 1008, 1009, 844, 841, 636, 891, 131,
	130, 397, 101, 116, 554, 891, 891, 552, 1021, 1022,
	1038, 1039, 1040, 1041, 1042, 1043, 1034, 288, 1036, 1047,
	334, 167, 167, 988, 989, 990, 991, 992, 993, 1059,
	464, 937, 997, 637, 167, 167, 974, 10, 1067, 531,
	915, 1035, 1066, 1037, 9, 463, 1053, 1054, 891, 891,
	975, 1057, 1058, 1073, 8, 1075, 95, 94, 96, 882,
	883, 891, 891, 7, 1064, 1065, 15, 1074, 63, 1076,
	898, 899, 245, 14, 1088, 64, 212, 13, 1092, 12,
	169, 1089, 914, 829, 814, 62, 1093, 810, 1095, 1081,
	1082, 1083, 1084, 1094, 61, 1096, 6, 71, 472, 1097,
	1098, 1099, 1100, 138, 70, 803, 799, 1102, 69, 1103,
	68, 1085, 167, 1006, 1007, 273, 272, 275, 276, 277,
	278, 279, 274, 634, 631, 1115, 1116, 67, 743, 244,
	1119, 5, 29, 22, 121, 31, 32, 34, 33, 891,
	4, 839, 1104, 535, 954, 955, 1077, 1078, 1079, 422,
	1080, 473, 416, 22, 26, 27, 28, 746, 747, 292,
	969, 970, 66, 293, 1049, 1050, 1051, 1052, 86, 348,
	84, 65, 259, 733, 496, 413, 732, 23, 301, 24,
	30, 25, 538, 338, 317, 92, 93, 316, 235, 98,
	99, 1114, 1113, 1118, 100, 103, 104, 105, 106, 108,
	109, 234, 110, 39, 112, 113, 233, 232, 229, 228,
	111, 120, 1026, 911, 102, 107, 455, 456, 457, 458,
	459, 22, 460, 461, 48, 893, 734, 749, 579, 426,
	427, 501, 309, 445, 1108, 35, 36, 1106, 37, 38,
	268, 270, 484, 1015, 123, 248, 280, 281, 282, 283,
	284, 285, 286, 271, 269, 267, 273, 272, 275, 276,
	277, 278, 279, 274, 253, 419, 973, 571, 731, 537,
	480, 300, 146, 391, 47, 147, 138, 357, 145, 159,
	497, 266, 139, 548, 363, 352, 454, 368, 369, 350,
	372, 373, 374, 375, 376, 377, 378, 379, 49, 50,
	55, 56, 57, 58, 59, 135, 72, 73, 74, 75,
	462, 260, 384, 132, 85, 384, 389, 384, 41, 20,
	11, 19, 396, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 18, 17, 16, 2, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	474, 0, 31, 32, 34, 33, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 0, 0, 0, 0, 555, 556, 0, 0, 0,
	558, 0, 0, 0, 0, 0, 560, 0, 0, 0,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 649, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 742, 643, 644, 645, 646, 647, 648, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573,
}
var yyPact = [...]int{

	1138, -1000, -1000, 652, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 883, -1000, -1000, 107, -1000, -1000, -1000, -1000, -1000,
	871, -1000, -1000, -1000, -1000, -1000, 245, -1000, -1000, 328,
	134, 1206, 1143, -1000, -1000, -1000, -1000, 1140, -1000, 473,
	946, -1000, 54, -1000, -1000, 959, -47, 959, 1192, 1099,
	652, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 21, -47, -2, -24, -1000, -1000, -1000, -1000,
	-1000, 954, 953, -1000, -1000, 83, -1000, 883, 462, 1041,
	1210, 1210, -1000, -1000, 1037, 378, 378, 73, 378, 378,
	560, 337, 79, 1190, 1189, 75, 70, 1188, 1187, 1182,
	1169, 55, -1000, 66, -1000, -1000, 283, 1094, -1000, 1033,
	959, 959, -55, 12, -1000, -1000, -4, 959, -72, 328,
	-1000, -1000, 802, -1000, -1000, 321, 279, 466, 1170, -1000,
	384, 144, -1000, -1000, -1000, 630, -1000, -1000, 874, -1000,
	-1000, -1000, -1000, 872, -1000, -1000, -1000, -1000, 870, 853,
	630, -1000, -1000, 629, 235, -1000, 423, -1000, 277, 1210,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 23, 378, -1000, 630, 384, -1000, 378, 378, -1000,
	-1000, -1000, 959, 549, 1168, 1165, -1000, 544, 959, 959,
	378, 378, 959, 959, 959, 959, 959, 959, 959, 959,
	959, 959, -1000, 976, 959, 304, 1163, 751, 959, 477,
	328, 959, -41, 959, 1139, 567, -1000, 729, 83, 630,
	-1000, -1000, 328, 276, 384, 384, 630, 843, 546, 630,
	630, 615, 630, 630, 630, 630, 630, 630, 630, 630,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1170, -5,
	109, 58, 1170, -1000, 547, -1000, 1206, 31, 630, 630,
	454, 674, 304, 221, 630, 328, -1000, 956, -1000, 674,
	466, -1000, -1000, 378, -1000, 959, 959, 959, -1000, 959,
	378, 378, -1000, -1000, 1163, 1163, 1163, 378, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 677, 760, 1152, 384, 1118,
	304, 304, 847, 1119, -77, 159, 959, 183, -1000, 959,
	662, 772, 1001, 767, 275, -1000, -1000, 512, -1000, -1000,
	-1000, -1000, 490, 674, -1000, 843, 630, 630, 674, 1029,
	-1000, 1120, 632, 580, -1000, 532, 532, 297, 297, 297,
	-1000, -1000, 630, -1000, 674, -1000, -192, 105, 630, 717,
	103, 502, -1000, 384, -1000, 382, 674, -1000, -1000, 378,
	378, 378, 378, -1000, -1000, -1000, -1000, -1000, -1000, 1118,
	304, 1152, 1147, 1150, 466, -1000, 843, 652, 629, 101,
	-1000, 182, -1000, 565, -1000, -54, -1000, 656, -1000, 589,
	150, -174, -178, 241, 39, 34, -1000, 402, 388, 181,
	1000, 376, 366, 348, -1000, -1000, -1000, -1000, -1000, 1112,
	-145, -1000, 1161, 729, 729, -1000, -1000, 621, 603, 624,
	583, 581, 163, -1000, 963, 147, 960, 630, 630, -1000,
	674, 777, 630, -1000, 674, -1000, -1000, 99, 630, -1000,
	259, -1000, 630, 574, -1000, 230, 218, -1000, -1000, -1000,
	-1000, -1000, 523, 592, 1147, -1000, 630, 655, -1000, -1000,
	304, 95, -1000, 449, -93, 328, 328, 328, 959, -1000,
	-1000, 159, -1000, 304, 328, 328, -104, 304, 304, 304,
	1087, 328, 328, 1086, -1000, -1000, 328, 951, 994, 340,
	332, 330, 1210, 1429, 947, -1000, -1000, 1154, 1149, 772,
	1159, -1000, 559, -1000, 557, -1000, -1000, -1000, -1000, -30,
	-32, -38, -1000, -1000, -1000, 674, 674, 630, 674, -1000,
	-3, -1000, 674, 630, -1000, -1000, -1000, -1000, 1092, -1000,
	-1000, 653, -1000, 520, 843, -1000, 589, 182, -1000, 249,
	842, 208, -1000, -1000, 192, 191, 186, 185, 172, 166,
	164, 149, 130, -1000, 836, 833, 832, -1000, 294, 260,
	831, 827, 825, 824, -1000, -1000, -1000, -1000, 187, 187,
	187, 187, 823, 822, 1069, 305, 1068, -77, -77, -1000,
	807, -1000, 449, -77, -77, 1050, 301, 1047, 304, 449,
	-1000, -1000, -1000, -1000, 328, -1000, -1000, 323, 1210, 1429,
	1210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1152, 384, 630, 384, -1000, -1000, 806, 801, 800,
	674, -1000, 674, 1046, 630, -1000, -1000, -1000, -1000, -1000,
	589, -1000, 231, 234, 229, -1000, -1000, 1110, 848, 950,
	-153, 949, -1000, -153, 943, -153, 941, -153, 940, -153,
	939, -153, 935, -153, 930, -153, 923, -153, 922, -153,
	921, 920, 919, 916, 207, 915, -1000, 207, 909, 908,
	906, 905, 902, 207, 207, 207, 207, 848, 848, -77,
	-77, 328, 328, 798, 796, 791, 304, -164, 779, 776,
	-77, -77, 328, 328, 773, 449, -164, -1000, 1210, -1000,
	-1000, -1000, 1147, 466, 646, 466, 328, 328, 328, 1196,
	-1000, -129, 1045, -1000, 1003, 231, -116, 231, -116, -1000,
	-1000, -193, -1000, -1000, -199, -1000, -200, -1000, -201, -1000,
	-202, -1000, -205, -1000, -206, -1000, 642, -1000, 641, -1000,
	640, -1000, 94, -207, -208, -219, 8, 992, -226, 8,
	-239, -240, -242, -244, -246, 8, 8, 8, 8, 93,
	-1000, 92, 765, 749, -77, -77, 304, 304, 304, 76,
	-1000, 809, -1000, -1000, 304, 304, 304, 304, 734, 726,
	-77, -77, 304, -164, -1000, -1000, 1010, 69, -1000, 68,
	67, 304, -132, 875, -1000, -1000, -129, 231, -129, 231,
	-1000, -151, -151, -151, -151, -151, -151, 901, 900, 899,
	-151, 893, -1000, -1000, -1000, -1000, 1429, 1210, 187, -1000,
	187, 187, 187, -1000, -1000, -1000, -1000, -1000, -1000, 848,
	207, 207, 304, 304, 723, 722, 61, 60, 53, -77,
	304, -1000, 890, -1000, -1000, 51, 42, 304, 304, 720,
	666, 41, -1000, -1000, 1195, 307, -1000, 328, -1000, -1000,
	629, 56, 225, -1000, -132, -129, -132, -129, -153, -153,
	-153, -153, -153, -153, -250, -252, -253, -153, -270, -1000,
	-1000, 207, 207, 207, 207, -1000, 8, 8, 40, 24,
	304, 304, -122, -1000, -1000, -1000, -1000, -1000, -277, -1000,
	-1000, 18, 17, 304, 304, -122, -1000, 328, -1000, -122,
	162, -1000, -1000, -1000, 56, -132, 56, -132, -1000, -1000,
	-1000, -1000, -1000, -1000, -151, -151, -151, -1000, -151, 8,
	8, 8, 8, -1000, -1000, -129, -1000, 15, 14, -1000,
	959, 1125, -1000, -1000, 13, 3, -1000, 328, -1000, -1000,
	-1000, -1000, -1000, -122, 56, -122, 56, -153, -153, -153,
	-153, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 665, -1000,
	-1000, -1000, -1000, -1000, -122, -1000, -122, -1000, -1000, -1000,
	-1000, 304, -1000, -1000, 2, -138, 522, 161, -1000, 1174,
	-1000, -1000, -1000, 183, 183, 504, -1000, 1176, 183, -1000,
}
var yyPgo = [...]int{

	0, 1357, 1356, 41, 1130, 1121, 1086, 1069, 1067, 1063,
	1056, 1053, 1044, 1034, 1027, 1355, 1354, 1353, 1311, 1310,
	1309, 1264, 639, 1308, 1304, 447, 1303, 272, 1301, 1300,
	1295, 1279, 39, 1276, 1275, 3, 1273, 15, 46, 51,
	1272, 1271, 43, 10, 1007, 33, 24, 1270, 1269, 37,
	1268, 27, 1265, 1263, 44, 1262, 1261, 1260, 1259, 1258,
	28, 1257, 26, 9, 18, 1256, 50, 1255, 35, 19,
	202, 56, 1254, 1235, 1234, 7, 249, 1233, 4, 30,
	0, 5, 13, 1232, 648, 20, 45, 14, 21, 8,
	6, 2, 1227, 1224, 1, 1223, 152, 29, 32, 1221,
	36, 1220, 1219, 17, 23, 12, 91, 11, 31, 22,
	1218, 38, 25, 34, 1217, 1215, 16, 1214,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 3, 3, 11, 11, 14, 14, 12, 13,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 4, 4, 4, 4, 4, 4, 15, 15,
	16, 17, 18, 20, 20, 20, 7, 7, 8, 9,
	10, 10, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 117,
	21, 22, 22, 23, 23, 23, 23, 23, 24, 24,
	26, 26, 27, 27, 27, 30, 30, 28, 28, 28,
	31, 31, 32, 32, 32, 29, 29, 29, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 34, 34, 34,
	35, 35, 36, 36, 36, 36, 37, 37, 103, 103,
	38, 38, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 41, 41, 41,
	41, 41, 41, 41, 42, 42, 47, 47, 45, 45,
	49, 46, 46, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 55, 55, 55,
	55, 55, 55, 48, 48, 50, 50, 50, 52, 56,
	56, 53, 53, 54, 57, 57, 51, 51, 43, 43,
	43, 43, 58, 58, 59, 59, 60, 60, 61, 61,
	62, 63, 63, 63, 64, 64, 64, 64, 65, 65,
	65, 66, 66, 67, 67, 68, 68, 69, 69, 70,
	72, 72, 73, 73, 25, 25, 74, 74, 74, 79,
	79, 78, 78, 76, 76, 75, 75, 77, 77, 80,
	80, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 83, 83,
	83, 83, 84, 84, 84, 71, 71, 71, 99, 99,
	98, 98, 98, 98, 98, 98, 98, 98, 109, 109,
	109, 109, 109, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 104, 104, 85, 105, 105,
	87, 87, 87, 87, 87, 86, 86, 88, 88, 88,
	88, 89, 89, 89, 89, 91, 91, 90, 92, 92,
	92, 92, 93, 93, 93, 93, 95, 95, 94, 94,
	94, 94, 106, 106, 107, 107, 108, 108, 96, 96,
	97, 97, 111, 111, 114, 114, 113, 113, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 102, 102, 101,
	101, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 116,
	116, 115, 115,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 5, 12, 3, 8, 8, 6, 6, 8, 7,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 4, 5, 4, 4, 6, 7, 1, 2,
	1, 1, 2, 2, 3, 3, 9, 12, 6, 6,
	6, 6, 5, 4, 4, 5, 5, 4, 4, 4,
	6, 5, 7, 5, 7, 6, 6, 7, 7, 5,
	5, 6, 6, 6, 6, 5, 5, 5, 5, 5,
	5, 3, 4, 4, 2, 3, 2, 2, 3, 0,
	2, 0, 2, 1, 2, 1, 1, 1, 0, 1,
	1, 3, 1, 2, 3, 1, 1, 0, 1, 2,
	1, 3, 3, 3, 5, 0, 1, 2, 1, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 3, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 3, 3, 4,
	3, 4, 5, 6, 3, 4, 2, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 3, 1,
	3, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 1, 1, 3, 4, 4,
	5, 6, 4, 1, 1, 1, 1, 1, 5, 0,
	1, 1, 2, 4, 0, 2, 1, 3, 1, 1,
	1, 1, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 0, 3, 1, 3, 0, 5, 1, 3, 3,
	0, 2, 0, 3, 0, 1, 0, 1, 1, 1,
	3, 2, 5, 0, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 1, 0, 1, 1, 0, 2, 2, 1, 3,
	2, 8, 6, 6, 7, 8, 8, 7, 7, 8,
	8, 9, 9, 1, 4, 3, 6, 1, 1, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	8, 3, 8, 3, 8, 3, 6, 8, 1, 1,
	4, 1, 4, 1, 4, 1, 4, 4, 7, 7,
	7, 7, 1, 4, 4, 1, 1, 1, 1, 4,
	4, 4, 4, 6, 6, 1, 2, 2, 0, 1,
	0, 1, 2, 1, 2, 0, 2, 0, 2, 2,
	2, 0, 2, 2, 2, 0, 1, 7, 0, 2,
	2, 2, 0, 3, 3, 6, 0, 1, 1, 1,
	2, 2, 0, 1, 0, 1, 0, 1, 0, 3,
	0, 2, 0, 2, 0, 1, 1, 2, 3, 3,
	5, 4, 4, 3, 4, 3, 3, 0, 1, 1,
	3, 1, 5, 7, 7, 8, 8, 9, 9, 8,
	6, 5, 3, 3, 3, 3, 4, 2, 2, 0,
	1, 2, 2,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-14, -19, -7, -8, -9, -10, -15, -16, -17, -18,
	-20, -22, 5, 29, 31, 33, 6, 7, 8, 251,
	32, 254, 255, 257, 256, 87, 88, 90, 91, 55,
	330, -23, 41, 42, 43, 44, 38, -21, -117, -21,
	-21, 237, 236, 247, 250, -21, -21, -21, -21, -21,
	-3, -11, -12, -14, -13, -4, -5, -6, -7, -8,
	-9, -10, -21, -21, -21, -21, 89, -80, 34, 235,
	36, 332, 331, -3, 17, -24, 18, -22, -84, 101,
	100, 99, 229, 230, 101, 100, 102, -84, 233, 234,
	238, 46, 258, 239, 240, 241, 242, 259, 243, 244,
	246, 254, 248, 249, 237, -35, 34, -25, 262, -35,
	9, 25, 258, -74, 264, 265, -25, 258, 258, 259,
	36, 36, -26, -27, 80, -30, 34, -39, -44, -40,
	60, 39, -43, -51, -45, -50, -55, -52, 20, 35,
	36, 37, 21, -80, -49, 78, 79, 40, 333, -48,
	62, 263, 24, -69, 89, -70, -51, -80, 34, 29,
	-81, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, -81, 29, -71, 74, 10, -71, 231, 232, -71,
	-71, -71, 9, 238, 239, 240, 248, 232, 9, 9,
	232, 232, 9, 9, 9, 9, 235, 258, 260, 241,
	242, 245, 232, 84, 25, 29, -35, -35, -73, 263,
	259, 258, -35, -72, 263, -80, -64, 9, 45, 15,
	-28, -80, 19, 84, 59, 58, -41, 75, 60, 74,
	61, 73, 77, 76, 83, 78, 79, 80, 81, 82,
	66, 67, 68, 69, 70, 71, 72, -39, -44, -39,
	-46, -3, -44, -44, 39, -49, 39, 39, 39, 39,
	-56, -44, 45, 92, 66, 84, -81, 253, -71, -44,
	-39, -71, -71, -35, -71, 9, 9, 9, -71, 9,
	-35, -35, -71, -71, -35, -35, -35, -35, -35, -35,
	-35, -35, -35, -35, 34, -35, -69, -38, 10, -66,
	29, 39, -35, 60, -80, -35, 261, -35, 20, 57,
	-31, -32, -34, 39, 34, -49, -27, -44, -80, 80,
	-80, -39, -39, -44, -45, 75, 74, 61, -44, -44,
	21, 60, -44, -44, -44, -44, -44, -44, -44, -44,
	334, 334, 45, 334, -44, 334, 80, -46, 18, -44,
	-46, -53, -54, 63, -70, 93, -44, 35, -71, -35,
	-35, -35, -35, -71, -71, -38, -38, -38, -71, -66,
	29, -38, -60, 13, -39, -42, 24, -3, -69, -67,
	-51, 39, 20, -76, -75, 266, -102, -101, -100, -113,
	324, 326, 327, 256, 329, 328, -112, 302, 301, 28,
	101, 100, 253, 305, -35, -95, -94, 314, 315, 29,
	316, -35, -38, 45, -33, 47, 48, 49, 50, 51,
	53, 54, -29, 34, 19, -32, 84, 45, 252, -45,
	-44, -44, 59, 21, -44, 334, 334, -46, 75, 334,
	-57, -54, 65, -39, -83, 94, 97, 98, -71, -71,
	-71, -71, -42, -69, -60, -64, 14, -47, -45, 334,
	45, -99, -98, -51, -111, 259, 27, 320, 57, 267,
	268, 45, -112, 325, 259, 27, -111, 325, 325, 325,
	303, 259, 27, 321, 244, 244, 66, 66, 101, 100,
	253, 29, 66, 66, 66, 21, 317, -58, 11, -32,
	-32, 47, 52, 47, 52, 47, 47, 47, -36, 55,
	262, 56, 34, 334, 34, -44, -44, 59, -44, 334,
	-44, 86, -44, 64, 95, 96, 94, -68, 57, -68,
	-64, -61, -62, -44, 45, -51, 334, 45, -109, -110,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 106, 295, 296, 297, 298, 299, 291, 292,
	293, 294, 300, 29, 303, 264, 321, -80, -80, -80,
	-35, -100, -51, -80, -80, 303, 264, 321, -51, -51,
	-51, 27, -80, -80, 27, -80, 36, 29, 66, 66,
	66, -81, -82, 143, 144, 145, 146, 147, 148, 106,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	35, -59, 12, 14, 57, 47, 47, 259, 259, 259,
	-44, 334, -44, 26, 45, -63, 22, 23, -45, -114,
	-113, -98, -105, -104, -85, 301, 21, 60, 28, 39,
	-106, 39, 318, -106, 39, -106, 39, -106, 39, -106,
	39, -106, 39, -106, 39, -106, 39, -106, 39, -106,
	39, 39, 39, 39, -108, 39, 106, -108, 39, 39,
	39, 39, 39, -108, -108, -108, -108, 39, 39, 27,
	-80, 259, 27, 27, -76, -76, 39, -109, -76, -76,
	27, -80, 259, 27, 27, -51, -109, -80, 66, -81,
	-82, -81, -60, -39, -46, -39, 39, 39, 39, 27,
	-62, -87, 264, 27, 303, -105, -85, -105, -104, 21,
	-43, 36, -107, 319, 36, -107, 36, -107, 36, -107,
	36, -107, 36, -107, 36, -107, 36, -107, 36, -107,
	36, -107, 36, 36, 36, 36, -96, 101, 36, -96,
	36, 36, 36, 36, 36, -96, -96, -96, -96, -103,
	-43, -103, -76, -76, -80, -80, 39, 39, 39, -79,
	-78, -51, -116, -115, 322, 323, 39, 39, -76, -76,
	-80, -80, 39, -109, -116, -81, -64, -37, -80, -37,
	-37, 7, -86, 305, 27, 27, -87, -105, -87, -105,
	334, 334, 334, 334, 334, 334, 334, 45, 45, 45,
	334, 45, 334, 334, 334, -97, 253, 29, 334, -97,
	334, 334, 334, 334, 334, -97, -97, -97, -97, 45,
	334, 334, 39, 39, -76, -76, -79, -79, -79, 334,
	45, -63, 39, -51, -51, -79, -79, 39, 39, -76,
	-76, -79, -116, -65, 16, 30, 334, 45, 334, 334,
	-69, -88, 306, 35, -86, -87, -86, -87, -106, -106,
	-106, -106, -106, -106, 36, 36, 36, -106, 36, -82,
	-81, -108, -108, -108, -108, -43, -96, -96, -79, -79,
	39, 39, 334, 334, 334, -77, -75, -78, 36, 334,
	334, -79, -79, 39, 39, 334, 7, 75, -80, -89,
	236, 307, 308, 28, -88, -86, -88, -86, -107, -107,
	-107, -107, -107, -107, 334, 334, 334, -107, 334, -96,
	-96, -96, -96, -97, -97, 334, 334, -79, -79, -90,
	304, 334, 334, 334, -79, -79, -90, -80, -91, -90,
	309, 310, 28, -89, -88, -89, -88, -106, -106, -106,
	-106, -97, -97, -97, -97, -86, 334, 334, -35, -63,
	334, 334, -80, -91, -89, -91, -89, -107, -107, -107,
	-107, 39, -91, -91, -79, 334, -92, 311, -93, 57,
	46, 312, 313, 8, 7, -94, -94, 57, 7, -94,
}
var yyDef = [...]int{

	101, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 99, 99, 99, 99, 99, 99, 99, 99,
	0, 99, 99, 99, 99, 48, 0, 50, 51, 0,
	0, 0, 103, 105, 106, 107, 102, 108, 101, 402,
	402, 94, 0, 96, 97, 0, 254, 0, 0, 0,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 256, 254, 0, 0, 49, 52, 269, 270,
	53, 0, 0, 23, 104, 0, 109, 100, 0, 0,
	0, 0, 403, 404, 0, 405, 405, 0, 405, 405,
	405, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 95, 98, 140, 0, 255, 0,
	0, 0, 252, 0, 257, 258, 0, 0, 250, 0,
	54, 55, 234, 110, 112, 117, 269, 115, 116, 152,
	0, 0, 183, 184, 185, 0, 195, 196, 0, 218,
	219, 220, 221, 216, 179, 205, 206, 207, 0, 0,
	209, 203, 204, 42, 0, 247, 0, 216, 269, 0,
	44, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 45, 405, 63, 0, 0, 64, 405, 405, 67,
	68, 69, 0, 405, 0, 0, 92, 405, 0, 0,
	405, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 150, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 21, 0, 0, 0,
	113, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 168, 169, 170, 171, 172, 173, 155, 0, 0,
	0, 0, 181, 194, 0, 166, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 43, 0, 62, 406,
	407, 65, 66, 405, 71, 0, 0, 0, 73, 0,
	405, 405, 79, 80, 150, 150, 150, 405, 85, 86,
	87, 88, 89, 90, 141, 241, 150, 226, 0, 0,
	0, 0, 0, 0, 263, 537, 0, 506, 251, 0,
	150, 120, 125, 0, 137, 139, 111, 235, 119, 114,
	217, 153, 154, 157, 158, 0, 0, 0, 160, 0,
	164, 0, 186, 187, 188, 189, 190, 191, 192, 193,
	156, 178, 0, 180, 181, 197, 0, 0, 0, 0,
	0, 214, 211, 0, 248, 0, 249, 46, 70, 405,
	405, 405, 405, 75, 76, 81, 82, 83, 84, 0,
	0, 226, 234, 0, 151, 26, 0, 175, 27, 0,
	243, 522, 253, 0, 264, 0, 58, 538, 539, 541,
	522, 0, 0, 0, 0, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 59, 60, 507, 508, 509, 0,
	0, 61, 222, 0, 0, 128, 129, 0, 0, 0,
	0, 0, 142, 126, 0, 0, 0, 0, 0, 159,
	161, 0, 0, 165, 182, 198, 199, 0, 0, 202,
	0, 212, 0, 0, 47, 0, 0, 401, 72, 77,
	78, 74, 245, 245, 234, 29, 0, 174, 176, 242,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 224, 0, 121,
	0, 130, 0, 132, 0, 134, 135, 136, 122, 0,
	0, 0, 127, 123, 138, 236, 237, 0, 162, 200,
	0, 208, 215, 0, 398, 399, 400, 24, 0, 25,
	28, 227, 228, 231, 0, 244, 524, 522, 410, 478,
	423, 512, 427, 428, 512, 512, 512, 512, 512, 512,
	512, 512, 512, 448, 449, 451, 453, 455, 516, 516,
	0, 0, 462, 0, 465, 466, 467, 468, 516, 516,
	516, 516, 0, 0, 0, 0, 0, 263, 263, 523,
	0, 540, 0, 263, 263, 0, 0, 0, 0, 0,
	552, 553, 554, 555, 0, 528, 529, 0, 0, 0,
	0, 533, 535, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
	358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	536, 226, 0, 0, 0, 131, 133, 0, 0, 0,
	163, 201, 213, 0, 0, 230, 232, 233, 177, 56,
	525, 409, 480, 478, 478, 479, 475, 0, 0, 0,
	514, 0, 513, 514, 0, 514, 0, 514, 0, 514,
	0, 514, 0, 514, 0, 514, 0, 514, 0, 514,
	0, 0, 0, 0, 518, 0, 517, 518, 0, 0,
	0, 0, 0, 518, 518, 518, 518, 0, 0, 263,
	263, 0, 0, 0, 0, 0, 0, 559, 0, 0,
	263, 263, 0, 0, 0, 0, 559, 556, 0, 532,
	534, 531, 234, 225, 223, 124, 0, 0, 0, 0,
	229, 485, 481, 483, 0, 480, 478, 480, 478, 476,
	477, 0, 425, 515, 0, 429, 0, 431, 0, 433,
	0, 435, 0, 437, 0, 439, 0, 441, 0, 443,
	0, 445, 0, 0, 0, 0, 520, 0, 0, 520,
	0, 0, 0, 0, 0, 520, 520, 520, 520, 0,
	148, 0, 0, 0, 263, 263, 0, 0, 0, 0,
	259, 231, 542, 560, 0, 0, 0, 0, 0, 0,
	263, 263, 0, 559, 551, 530, 238, 0, 146, 0,
	0, 0, 487, 0, 482, 484, 485, 480, 485, 480,
	424, 512, 512, 512, 512, 512, 512, 0, 0, 0,
	512, 0, 450, 452, 454, 456, 0, 0, 516, 457,
	516, 516, 516, 463, 464, 469, 470, 471, 472, 0,
	518, 518, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 261, 0, 561, 562, 0, 0, 0, 0, 0,
	0, 0, 550, 22, 0, 0, 143, 0, 144, 145,
	246, 491, 0, 486, 487, 485, 487, 485, 514, 514,
	514, 514, 514, 514, 0, 0, 0, 514, 0, 521,
	519, 518, 518, 518, 518, 149, 520, 520, 0, 0,
	0, 0, 0, 412, 413, 57, 268, 260, 0, 543,
	544, 0, 0, 0, 0, 0, 239, 0, 147, 495,
	0, 488, 489, 490, 491, 487, 491, 487, 426, 430,
	432, 434, 436, 438, 512, 512, 512, 446, 512, 520,
	520, 520, 520, 473, 474, 485, 414, 0, 0, 417,
	0, 231, 545, 546, 0, 0, 549, 0, 418, 496,
	492, 493, 494, 495, 491, 495, 491, 514, 514, 514,
	514, 458, 459, 460, 461, 411, 415, 416, 0, 262,
	547, 548, 240, 419, 495, 420, 495, 440, 442, 444,
	447, 0, 421, 422, 0, 498, 502, 0, 497, 0,
	499, 500, 501, 0, 0, 503, 504, 0, 0, 505,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 82, 77, 3,
	39, 334, 80, 78, 45, 79, 84, 81, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	67, 66, 68, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 83, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 76, 3, 40,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 41, 42, 43,
	44, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 69, 70, 71, 72, 73, 74, 75, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272,
}
var yyTok3 = [...]int{
	57600, 273, 57601, 274, 57602, 275, 57603, 276, 57604, 277,
	57605, 278, 57606, 279, 57607, 280, 57608, 281, 57609, 282,
	57610, 283, 57611, 284, 57612, 285, 57613, 286, 57614, 287,
	57615, 288, 57616, 289, 57617, 290, 57618, 291, 57619, 292,
	57620, 293, 57621, 294, 57622, 295, 57623, 296, 57624, 297,
	57625, 298, 57626, 299, 57627, 300, 57628, 301, 57629, 302,
	57630, 303, 57631, 304, 57632, 305, 57633, 306, 57634, 307,
	57635, 308, 57636, 309, 57637, 310, 57638, 311, 57639, 312,
	57640, 313, 57641, 314, 57642, 315, 57643, 316, 57644, 317,
	57645, 318, 57646, 319, 57647, 320, 57648, 321, 57649, 322,
	57650, 323, 57651, 324, 57652, 325, 57653, 326, 57654, 327,
	57655, 328, 57656, 329, 57657, 330, 57658, 331, 57659, 332,
	57660, 333, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:308
		{
			SetParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:314
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:316
		{
			yyVAL.statement = yyDollar[1].setStmt
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:318
		{
			yyVAL.statement = yyDollar[1].showStmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:320
		{
			yyVAL.statement = yyDollar[1].showStmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:327
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:329
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:331
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:333
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:340
		{
			yyVAL.statement = nil
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:344
		{
			yyVAL.selStmt = &SimpleSelect{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, Limit: yyDollar[5].limit}
		}
	case 22:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line yacc.y:348
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[6].tableExprs, Where: NewWhere(AST_WHERE, yyDollar[7].boolExpr), GroupBy: GroupBy(yyDollar[8].valExprs), Having: NewWhere(AST_HAVING, yyDollar[9].boolExpr), OrderBy: yyDollar[10].orderBy, Limit: yyDollar[11].limit, Lock: yyDollar[12].str}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:352
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:358
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: yyDollar[6].columns, Rows: yyDollar[7].insRows, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:362
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, col := range yyDollar[7].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:374
		{
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:378
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, col := range yyDollar[6].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:390
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(AST_WHERE, yyDollar[6].boolExpr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:396
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(AST_WHERE, yyDollar[5].boolExpr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:402
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:406
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:410
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:414
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:418
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:422
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].setStmt}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:426
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].showStmt}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:430
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].showStmt}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:434
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:438
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:442
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:446
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:452
		{
			yyVAL.setStmt = &SetVariable{
				Comments: Comments(yyDollar[2].bytes2),
				Scope:    string(yyDollar[3].bytes),
				Exprs:    yyDollar[4].updateExprs,
			}
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:460
		{
			yyVAL.setStmt = &SetCharset{
				Comments: Comments(yyDollar[2].bytes2),
				Charset:  string(yyDollar[5].bytes),
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:467
		{
			yyVAL.setStmt = &SetCharset{
				Comments: Comments(yyDollar[2].bytes2),
				Charset:  string(yyDollar[4].bytes),
			}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:474
		{
			yyVAL.setStmt = &SetNames{
				Comments: Comments(yyDollar[2].bytes2),
				Names:    string(yyDollar[4].bytes),
			}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:481
		{
			yyVAL.setStmt = &SetNames{
				Comments: Comments(yyDollar[2].bytes2),
				Names:    string(yyDollar[4].bytes),
				Collate:  string(yyDollar[6].bytes),
			}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:489
		{
			yyVAL.setStmt = &SetTransactionIsolationLevel{
				Comments:       Comments(yyDollar[2].bytes2),
				Scope:          string(yyDollar[3].bytes),
				IsolationLevel: string(yyDollar[7].bytes),
			}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:499
		{
			yyVAL.statement = &Begin{}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:503
		{
			yyVAL.statement = &Begin{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:509
		{
			yyVAL.statement = &Commit{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:515
		{
			yyVAL.statement = &Rollback{}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:521
		{
			yyVAL.statement = &UseDB{DB: string(yyDollar[2].bytes)}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:528
		{
			yyVAL.statement = &KillConnection{ConnectionID: NumVal(yyDollar[2].bytes)}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:532
		{
			yyVAL.statement = &KillConnection{ConnectionID: NumVal(yyDollar[3].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:536
		{
			yyVAL.statement = &KillQuery{ConnectionID: NumVal(yyDollar[3].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:542
		{
			yyVAL.ddlStmt = &CreateTable{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[5].tableName, CreateDefs: yyDollar[7].createDefs, TableOptions: yyDollar[9].optKeyVals}
		}
	case 57:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line yacc.y:546
		{
			yyVAL.ddlStmt = &CreateIndex{Comments: Comments(yyDollar[2].bytes2), IndexCategory: yyDollar[3].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, Table: yyDollar[8].tableName, IndexColumns: yyDollar[10].idxColNames, IndexOption: yyDollar[12].bytes}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:552
		{
			yyVAL.ddlStmt = &AlterTable{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, AlterSpecs: yyDollar[6].alterSpecs}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:558
		{
			yyVAL.ddlStmt = &RenameTable{Comments: Comments(yyDollar[2].bytes2), OldName: yyDollar[4].tableName, NewName: yyDollar[6].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:564
		{
			yyVAL.ddlStmt = &DropTable{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName, RefOption: yyDollar[6].bytes}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:568
		{
			yyVAL.ddlStmt = &DropIndex{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[4].bytes, Table: yyDollar[6].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:574
		{
			yyVAL.showStmt = &ShowCharset{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:578
		{
			yyVAL.showStmt = &ShowCharset{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:582
		{
			yyVAL.showStmt = &ShowCollation{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:586
		{
			yyVAL.showStmt = &ShowVariables{Comments: Comments(yyDollar[2].bytes2), Scope: string(yyDollar[3].bytes), LikeOrWhere: yyDollar[5].expr}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:590
		{
			yyVAL.showStmt = &ShowStatus{Comments: Comments(yyDollar[2].bytes2), Scope: string(yyDollar[3].bytes), LikeOrWhere: yyDollar[5].expr}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:594
		{
			yyVAL.showStmt = &ShowDatabases{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:598
		{
			yyVAL.showStmt = &ShowDatabases{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:602
		{
			yyVAL.showStmt = &ShowTables{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:606
		{
			yyVAL.showStmt = &ShowTables{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:610
		{
			yyVAL.showStmt = &ShowFullTables{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:614
		{
			yyVAL.showStmt = &ShowFullTables{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:618
		{
			yyVAL.showStmt = &ShowTableStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:622
		{
			yyVAL.showStmt = &ShowTableStatus{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:626
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:630
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:634
		{
			yyVAL.showStmt = &ShowFullColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 78:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:638
		{
			yyVAL.showStmt = &ShowFullColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:642
		{
			yyVAL.showStmt = &ShowProcedureStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:646
		{
			yyVAL.showStmt = &ShowFunctionStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:650
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:654
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:658
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:662
		{
			yyVAL.showStmt = &ShowTriggers{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:666
		{
			yyVAL.showStmt = &ShowCreateDatabase{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:670
		{
			yyVAL.showStmt = &ShowCreateTable{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:674
		{
			yyVAL.showStmt = &ShowCreateView{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:678
		{
			yyVAL.showStmt = &ShowCreateProcedure{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:682
		{
			yyVAL.showStmt = &ShowCreateFunction{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:686
		{
			yyVAL.showStmt = &ShowCreateTrigger{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:690
		{
			yyVAL.showStmt = &ShowProcessList{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:694
		{
			yyVAL.showStmt = &ShowFullProcessList{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:698
		{
			yyVAL.showStmt = &ShowSlaveStatus{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:702
		{
			yyVAL.showStmt = &ShowEngines{}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:706
		{
			yyVAL.showStmt = &ShowEngines{}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:710
		{
			yyVAL.showStmt = &ShowPlugins{}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:714
		{
			yyVAL.showStmt = &ShowProfiles{}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:720
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[3].tableName}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:725
		{
			SetAllowComments(yylex, true)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:729
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			SetAllowComments(yylex, false)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:735
		{
			yyVAL.bytes2 = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:739
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:745
		{
			yyVAL.str = AST_UNION
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:749
		{
			yyVAL.str = AST_UNION_ALL
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:753
		{
			yyVAL.str = AST_SET_MINUS
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:757
		{
			yyVAL.str = AST_EXCEPT
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:761
		{
			yyVAL.str = AST_INTERSECT
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:766
		{
			yyVAL.str = ""
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:770
		{
			yyVAL.str = AST_DISTINCT
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:776
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:780
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:786
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:790
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].bytes}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:794
		{
			yyVAL.selectExpr = &StarExpr{TableName: yyDollar[1].bytes}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:800
		{
			yyVAL.expr = yyDollar[1].boolExpr
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:804
		{
			yyVAL.expr = yyDollar[1].valExpr
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:809
		{
			yyVAL.bytes = nil
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:813
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:817
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:823
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:827
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:833
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].smTableExpr, As: yyDollar[2].bytes, Hints: yyDollar[3].indexHints}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:837
		{
			yyVAL.tableExpr = &ParenTableExpr{Expr: yyDollar[2].tableExpr}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:841
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].boolExpr}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:846
		{
			yyVAL.bytes = nil
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:850
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:854
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:860
		{
			yyVAL.str = AST_JOIN
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:864
		{
			yyVAL.str = AST_STRAIGHT_JOIN
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:868
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:872
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:876
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:880
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:884
		{
			yyVAL.str = AST_JOIN
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:888
		{
			yyVAL.str = AST_CROSS_JOIN
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:892
		{
			yyVAL.str = AST_NATURAL_JOIN
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:898
		{
			yyVAL.smTableExpr = &TableName{Name: yyDollar[1].bytes}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:902
		{
			yyVAL.smTableExpr = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:906
		{
			yyVAL.smTableExpr = yyDollar[1].subquery
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:912
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].bytes}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:916
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:921
		{
			yyVAL.indexHints = nil
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:925
		{
			yyVAL.indexHints = &IndexHints{Type: AST_USE, Indexes: yyDollar[4].bytes2}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:929
		{
			yyVAL.indexHints = &IndexHints{Type: AST_IGNORE, Indexes: yyDollar[4].bytes2}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:933
		{
			yyVAL.indexHints = &IndexHints{Type: AST_FORCE, Indexes: yyDollar[4].bytes2}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:939
		{
			yyVAL.bytes2 = [][]byte{yyDollar[1].bytes}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:943
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:949
		{
			yyVAL.valExprs = ValExprs{yyDollar[1].valExpr}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:953
		{
			yyVAL.valExprs = append(yyDollar[1].valExprs, yyDollar[3].valExpr)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:958
		{
			yyVAL.boolExpr = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:962
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:969
		{
			yyVAL.boolExpr = &AndExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:973
		{
			yyVAL.boolExpr = &OrExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:977
		{
			yyVAL.boolExpr = &NotExpr{Expr: yyDollar[2].boolExpr}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:981
		{
			yyVAL.boolExpr = &ParenBoolExpr{Expr: yyDollar[2].boolExpr}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:987
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: yyDollar[2].str, Right: yyDollar[3].valExpr}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:991
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_IN, Right: yyDollar[3].tuple}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:995
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_IN, Right: yyDollar[4].tuple}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:999
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_LIKE, Right: yyDollar[3].valExpr}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1003
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_LIKE, Right: yyDollar[4].valExpr}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1007
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_BETWEEN, From: yyDollar[3].valExpr, To: yyDollar[5].valExpr}
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1011
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_NOT_BETWEEN, From: yyDollar[4].valExpr, To: yyDollar[6].valExpr}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1015
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NULL, Expr: yyDollar[1].valExpr}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1019
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NOT_NULL, Expr: yyDollar[1].valExpr}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1023
		{
			yyVAL.boolExpr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1029
		{
			yyVAL.str = AST_EQ
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1033
		{
			yyVAL.str = AST_LT
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1037
		{
			yyVAL.str = AST_GT
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1041
		{
			yyVAL.str = AST_LE
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1045
		{
			yyVAL.str = AST_GE
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1049
		{
			yyVAL.str = AST_NE
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1053
		{
			yyVAL.str = AST_NSE
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1059
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1063
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1069
		{
			yyVAL.values = Values{yyDollar[1].tuple}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1073
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].tuple)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1079
		{
			yyVAL.tuple = ValTuple(yyDollar[2].valExprs)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1083
		{
			yyVAL.tuple = yyDollar[1].subquery
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1089
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1095
		{
			yyVAL.valExprs = ValExprs{yyDollar[1].valExpr}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1099
		{
			yyVAL.valExprs = append(yyDollar[1].valExprs, yyDollar[3].valExpr)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1105
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1109
		{
			yyVAL.valExpr = yyDollar[1].colName
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1113
		{
			yyVAL.valExpr = yyDollar[1].tuple
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1117
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITAND, Right: yyDollar[3].valExpr}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1121
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITOR, Right: yyDollar[3].valExpr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1125
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITXOR, Right: yyDollar[3].valExpr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1129
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_PLUS, Right: yyDollar[3].valExpr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1133
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MINUS, Right: yyDollar[3].valExpr}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1137
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MULT, Right: yyDollar[3].valExpr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1141
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_DIV, Right: yyDollar[3].valExpr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1145
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MOD, Right: yyDollar[3].valExpr}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1149
		{
			if num, ok := yyDollar[2].valExpr.(NumVal); ok {
				switch yyDollar[1].byt {
				case '-':
					yyVAL.valExpr = append(NumVal("-"), num...)
				case '+':
					yyVAL.valExpr = num
				default:
					yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
				}
			} else {
				yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1164
		{
			yyVAL.valExpr = yyDollar[1].funcExpr
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1168
		{
			yyVAL.valExpr = yyDollar[1].caseExpr
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1174
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1178
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: ValExprs{&ColName{Name: []byte("*")}}}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1182
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].valExprs}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1186
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Distinct: true, Exprs: yyDollar[4].valExprs}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1190
		{
			yyVAL.funcExpr = &FuncExpr{Name: []byte("locate"), Exprs: ValExprs{yyDollar[3].valExpr, yyDollar[5].valExpr}}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1194
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].valExprs}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1200
		{
			yyVAL.bytes = IF_BYTES
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1204
		{
			yyVAL.bytes = VALUES_BYTES
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1210
		{
			yyVAL.byt = AST_UPLUS
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1214
		{
			yyVAL.byt = AST_UMINUS
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1218
		{
			yyVAL.byt = AST_TILDA
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1224
		{
			yyVAL.caseExpr = &CaseExpr{Expr: yyDollar[2].valExpr, Whens: yyDollar[3].whens, Else: yyDollar[4].valExpr}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1229
		{
			yyVAL.valExpr = nil
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1233
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1239
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1243
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1249
		{
			yyVAL.when = &When{Cond: yyDollar[2].boolExpr, Val: yyDollar[4].valExpr}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1254
		{
			yyVAL.valExpr = nil
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1258
		{
			yyVAL.valExpr = yyDollar[2].valExpr
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1264
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].bytes}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1268
		{
			yyVAL.colName = &ColName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1274
		{
			yyVAL.valExpr = StrVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1278
		{
			yyVAL.valExpr = NumVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1282
		{
			yyVAL.valExpr = ValArg(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1286
		{
			yyVAL.valExpr = &NullVal{}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1291
		{
			yyVAL.valExprs = nil
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1295
		{
			yyVAL.valExprs = yyDollar[3].valExprs
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1300
		{
			yyVAL.boolExpr = nil
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1304
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1309
		{
			yyVAL.orderBy = nil
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1313
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1319
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1323
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1329
		{
			yyVAL.order = &Order{Expr: yyDollar[1].valExpr, Direction: yyDollar[2].str}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1334
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1338
		{
			yyVAL.str = AST_ASC
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1342
		{
			yyVAL.str = AST_DESC
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1347
		{
			yyVAL.limit = nil
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1351
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].valExpr}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1355
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].valExpr, Rowcount: yyDollar[4].valExpr}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1359
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].valExpr, Rowcount: yyDollar[2].valExpr}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1364
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1368
		{
			yyVAL.str = AST_FOR_UPDATE
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1372
		{
			if !bytes.Equal(yyDollar[3].bytes, SHARE) {
				yylex.Error("expecting share")
				return 1
			}
			if !bytes.Equal(yyDollar[4].bytes, MODE) {
				yylex.Error("expecting mode")
				return 1
			}
			yyVAL.str = AST_SHARE_MODE
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1385
		{
			yyVAL.columns = nil
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1389
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1395
		{
			yyVAL.columns = Columns{&NonStarExpr{Expr: yyDollar[1].colName}}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1399
		{
			yyVAL.columns = append(yyVAL.columns, &NonStarExpr{Expr: yyDollar[3].colName})
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1404
		{
			yyVAL.updateExprs = nil
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1408
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1414
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1418
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1424
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].valExpr}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1429
		{
			yyVAL.empty = struct{}{}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1431
		{
			yyVAL.empty = struct{}{}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1434
		{
			yyVAL.empty = struct{}{}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1436
		{
			yyVAL.empty = struct{}{}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1439
		{
			yyVAL.str = ""
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1441
		{
			yyVAL.str = AST_IGNORE
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1444
		{
			yyVAL.bytes = nil
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1446
		{
			yyVAL.bytes = []byte("unique")
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1448
		{
			yyVAL.bytes = []byte("fulltext")
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1452
		{
			yyVAL.idxColNames = IndexColNames{yyDollar[1].idxColName}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1456
		{
			yyVAL.idxColNames = append(yyDollar[1].idxColNames, yyDollar[3].idxColName)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1462
		{
			yyVAL.idxColName = &IndexColName{ColumnName: yyDollar[1].colName, AscOrDesc: yyDollar[2].str}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1466
		{
			yyVAL.idxColName = &IndexColName{ColumnName: yyDollar[1].colName, Length: NumVal(yyDollar[3].bytes), AscOrDesc: yyDollar[5].str}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1471
		{
			yyVAL.bytes = nil
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1473
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1477
		{
			yyVAL.bytes = []byte("using btree")
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1479
		{
			yyVAL.bytes = []byte("using hash")
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1482
		{
			yyVAL.bytes = nil
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1484
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1488
		{
			yyVAL.bytes = bytes.ToLower(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1492
		{
			yyVAL.bytes = []byte("database")
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1503
		{
			yyVAL.bytes = []byte("armscii8")
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1505
		{
			yyVAL.bytes = []byte("ascii")
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1507
		{
			yyVAL.bytes = []byte("big5")
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1509
		{
			yyVAL.bytes = []byte("binary")
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1511
		{
			yyVAL.bytes = []byte("cp1250")
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1513
		{
			yyVAL.bytes = []byte("cp1251")
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1515
		{
			yyVAL.bytes = []byte("cp1256")
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1517
		{
			yyVAL.bytes = []byte("cp1257")
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1519
		{
			yyVAL.bytes = []byte("cp850")
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1521
		{
			yyVAL.bytes = []byte("cp852")
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1523
		{
			yyVAL.bytes = []byte("cp866")
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1525
		{
			yyVAL.bytes = []byte("cp932")
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1527
		{
			yyVAL.bytes = []byte("dec8")
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1529
		{
			yyVAL.bytes = []byte("eucjpms")
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1531
		{
			yyVAL.bytes = []byte("euckr")
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1533
		{
			yyVAL.bytes = []byte("gb2312")
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1535
		{
			yyVAL.bytes = []byte("gbk")
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1537
		{
			yyVAL.bytes = []byte("geostd8")
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1539
		{
			yyVAL.bytes = []byte("greek")
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1541
		{
			yyVAL.bytes = []byte("hebrew")
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1543
		{
			yyVAL.bytes = []byte("hp8")
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1545
		{
			yyVAL.bytes = []byte("keybcs2")
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1547
		{
			yyVAL.bytes = []byte("koi8r")
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1549
		{
			yyVAL.bytes = []byte("koi8u")
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1551
		{
			yyVAL.bytes = []byte("latin1")
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1553
		{
			yyVAL.bytes = []byte("latin2")
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1555
		{
			yyVAL.bytes = []byte("latin5")
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1557
		{
			yyVAL.bytes = []byte("latin7")
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1559
		{
			yyVAL.bytes = []byte("macce")
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1561
		{
			yyVAL.bytes = []byte("macroman")
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1563
		{
			yyVAL.bytes = []byte("sjis")
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1565
		{
			yyVAL.bytes = []byte("swe7")
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1567
		{
			yyVAL.bytes = []byte("tis620")
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1569
		{
			yyVAL.bytes = []byte("ucs2")
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1571
		{
			yyVAL.bytes = []byte("ujis")
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1573
		{
			yyVAL.bytes = []byte("utf16")
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1575
		{
			yyVAL.bytes = []byte("utf16le")
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1577
		{
			yyVAL.bytes = []byte("utf32")
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1579
		{
			yyVAL.bytes = []byte("utf8")
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1581
		{
			yyVAL.bytes = []byte("utf8mb4")
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1585
		{
			yyVAL.bytes = []byte("armscii8_general_ci")
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1587
		{
			yyVAL.bytes = []byte("armscii8_bin")
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1589
		{
			yyVAL.bytes = []byte("ascii_general_ci")
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1591
		{
			yyVAL.bytes = []byte("ascii_bin")
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1593
		{
			yyVAL.bytes = []byte("big5_chinese_ci")
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1595
		{
			yyVAL.bytes = []byte("big5_bin")
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1597
		{
			yyVAL.bytes = []byte("binary")
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1599
		{
			yyVAL.bytes = []byte("cp1250_general_ci")
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1601
		{
			yyVAL.bytes = []byte("cp1250_bin")
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1603
		{
			yyVAL.bytes = []byte("cp1251_chinese_ci")
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1605
		{
			yyVAL.bytes = []byte("cp1251_chinese_cs")
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1607
		{
			yyVAL.bytes = []byte("cp1251_bin")
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1609
		{
			yyVAL.bytes = []byte("cp1256_chinese_ci")
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1611
		{
			yyVAL.bytes = []byte("cp1256_bin")
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1613
		{
			yyVAL.bytes = []byte("cp1257_chinese_ci")
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1615
		{
			yyVAL.bytes = []byte("cp1257_bin")
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1617
		{
			yyVAL.bytes = []byte("cp850_chinese_ci")
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1619
		{
			yyVAL.bytes = []byte("cp850_bin")
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1621
		{
			yyVAL.bytes = []byte("cp852_chinese_ci")
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1623
		{
			yyVAL.bytes = []byte("cp852_bin")
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1625
		{
			yyVAL.bytes = []byte("cp866_chinese_ci")
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1627
		{
			yyVAL.bytes = []byte("cp866_bin")
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1629
		{
			yyVAL.bytes = []byte("cp932_japanese_ci")
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1631
		{
			yyVAL.bytes = []byte("cp932_bin")
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1633
		{
			yyVAL.bytes = []byte("dec8_swedish_ci")
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1635
		{
			yyVAL.bytes = []byte("dec8_bin")
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1637
		{
			yyVAL.bytes = []byte("eucjpms_japanese_ci")
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1639
		{
			yyVAL.bytes = []byte("eucjpms_bin")
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1641
		{
			yyVAL.bytes = []byte("euckr_korean_ci")
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1643
		{
			yyVAL.bytes = []byte("euckr_bin")
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1645
		{
			yyVAL.bytes = []byte("gb2312_chinese_ci")
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1647
		{
			yyVAL.bytes = []byte("gb2312_bin")
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1649
		{
			yyVAL.bytes = []byte("gbk_chinese_ci")
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1651
		{
			yyVAL.bytes = []byte("gbk_bin")
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1653
		{
			yyVAL.bytes = []byte("geostd8_general_ci")
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1655
		{
			yyVAL.bytes = []byte("geostd8_bin")
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1657
		{
			yyVAL.bytes = []byte("greek_general_ci")
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1659
		{
			yyVAL.bytes = []byte("greek_bin")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1661
		{
			yyVAL.bytes = []byte("hebrew_general_ci")
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1663
		{
			yyVAL.bytes = []byte("hebrew_bin")
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1665
		{
			yyVAL.bytes = []byte("hp8_english_ci")
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1667
		{
			yyVAL.bytes = []byte("hp8_bin")
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1669
		{
			yyVAL.bytes = []byte("keybcs2_general_ci")
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1671
		{
			yyVAL.bytes = []byte("keybcs2_bin")
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1673
		{
			yyVAL.bytes = []byte("koi8r_general_ci")
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1675
		{
			yyVAL.bytes = []byte("koi8r_bin")
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1677
		{
			yyVAL.bytes = []byte("koi8u_general_ci")
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1679
		{
			yyVAL.bytes = []byte("koi8u_bin")
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1681
		{
			yyVAL.bytes = []byte("latin1_general_ci")
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1683
		{
			yyVAL.bytes = []byte("latin1_general_cs")
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1685
		{
			yyVAL.bytes = []byte("latin1_bin")
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1687
		{
			yyVAL.bytes = []byte("latin2_general_ci")
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1689
		{
			yyVAL.bytes = []byte("latin2_bin")
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1691
		{
			yyVAL.bytes = []byte("latin5_turkish_ci")
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1693
		{
			yyVAL.bytes = []byte("latin5_bin")
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1695
		{
			yyVAL.bytes = []byte("latin7_general_ci")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1697
		{
			yyVAL.bytes = []byte("latin7_general_cs")
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1699
		{
			yyVAL.bytes = []byte("latin7_bin")
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1701
		{
			yyVAL.bytes = []byte("macce_general_ci")
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1703
		{
			yyVAL.bytes = []byte("macce_bin")
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1705
		{
			yyVAL.bytes = []byte("macroman_general_ci")
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1707
		{
			yyVAL.bytes = []byte("macroman_bin")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1709
		{
			yyVAL.bytes = []byte("sjis_japanese_ci")
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1711
		{
			yyVAL.bytes = []byte("sjis_bin")
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1713
		{
			yyVAL.bytes = []byte("swe7_swedish_ci")
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1715
		{
			yyVAL.bytes = []byte("swe7_bin")
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1717
		{
			yyVAL.bytes = []byte("tis620_thai_ci")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1719
		{
			yyVAL.bytes = []byte("tis620_bin")
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1721
		{
			yyVAL.bytes = []byte("ucs2_general_ci")
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1723
		{
			yyVAL.bytes = []byte("ucs2_unicode_ci")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1725
		{
			yyVAL.bytes = []byte("ucs2_bin")
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1727
		{
			yyVAL.bytes = []byte("ujis_japanese_ci")
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1729
		{
			yyVAL.bytes = []byte("ujis_bin")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1731
		{
			yyVAL.bytes = []byte("utf16_general_ci")
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1733
		{
			yyVAL.bytes = []byte("utf16_unicode_ci")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1735
		{
			yyVAL.bytes = []byte("utf16_bin")
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1737
		{
			yyVAL.bytes = []byte("utf16le_general_ci")
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1739
		{
			yyVAL.bytes = []byte("utf16le_bin")
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1741
		{
			yyVAL.bytes = []byte("utf32_general_ci")
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1743
		{
			yyVAL.bytes = []byte("utf32_unicode_ci")
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1745
		{
			yyVAL.bytes = []byte("utf32_bin")
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1747
		{
			yyVAL.bytes = []byte("utf8_general_ci")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1749
		{
			yyVAL.bytes = []byte("utf8_unicode_ci")
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1751
		{
			yyVAL.bytes = []byte("utf8_bin")
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1753
		{
			yyVAL.bytes = []byte("utf8mb4_general_ci")
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1755
		{
			yyVAL.bytes = []byte("utf8mb4_unicode_ci")
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1757
		{
			yyVAL.bytes = []byte("utf8mb4_bin")
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1762
		{
			yyVAL.bytes = []byte("read committed")
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1764
		{
			yyVAL.bytes = []byte("read uncommitted")
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1766
		{
			yyVAL.bytes = []byte("repeatable read")
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1768
		{
			yyVAL.bytes = []byte("serializable")
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1771
		{
			yyVAL.bytes = nil
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1773
		{
			yyVAL.bytes = []byte("session")
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1775
		{
			yyVAL.bytes = []byte("global")
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1778
		{
			yyVAL.expr = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1780
		{
			yyVAL.expr = &LikeExpr{Expr: yyDollar[2].valExpr}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1784
		{
			yyVAL.expr = &WhereExpr{Expr: yyDollar[2].boolExpr}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1790
		{
			yyVAL.createDefs = CreateDefinitions{yyDollar[1].createDef}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1794
		{
			yyVAL.createDefs = append(yyDollar[1].createDefs, yyDollar[3].createDef)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1800
		{
			yyVAL.createDef = &CreateColumnDefinition{ColumnName: yyDollar[1].colName, ColumnDef: yyDollar[2].columnDef}
		}
	case 411:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1804
		{
			yyVAL.createDef = &CreatePrimaryKeyDefinition{Symbol: yyDollar[1].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1808
		{
			yyVAL.createDef = &CreateIndexDefinition{Name: yyDollar[2].bytes, IndexType: yyDollar[3].bytes, IndexColumns: yyDollar[5].idxColNames}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1812
		{
			yyVAL.createDef = &CreateIndexDefinition{Name: yyDollar[2].bytes, IndexType: yyDollar[3].bytes, IndexColumns: yyDollar[5].idxColNames}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1816
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 415:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1820
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1824
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 417:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1828
		{
			yyVAL.createDef = &CreateForeignKeyDefinition{Symbol: yyDollar[1].bytes, IndexColumns: yyDollar[5].idxColNames, ReferenceDef: yyDollar[7].bytes}
		}
	case 418:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1834
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsAutoIncrement: yyDollar[2].boolean,
				UniqueOrKey:     yyDollar[3].bytes,
				ColumnComment:   yyDollar[4].valExpr,
				ColumnFormat:    yyDollar[5].bytes,
				ColumnStorage:   yyDollar[6].bytes,
				ReferenceDef:    yyDollar[7].bytes}
		}
	case 419:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1844
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[2].boolean,
				IsAutoIncrement: yyDollar[3].boolean,
				UniqueOrKey:     yyDollar[4].bytes,
				ColumnComment:   yyDollar[5].valExpr,
				ColumnFormat:    yyDollar[6].bytes,
				ColumnStorage:   yyDollar[7].bytes,
				ReferenceDef:    yyDollar[8].bytes}
		}
	case 420:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1855
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				DefaultValue:    yyDollar[2].valExpr,
				IsAutoIncrement: yyDollar[3].boolean,
				UniqueOrKey:     yyDollar[4].bytes,
				ColumnComment:   yyDollar[5].valExpr,
				ColumnFormat:    yyDollar[6].bytes,
				ColumnStorage:   yyDollar[7].bytes,
				ReferenceDef:    yyDollar[8].bytes}
		}
	case 421:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:1866
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[2].boolean,
				DefaultValue:    yyDollar[3].valExpr,
				IsAutoIncrement: yyDollar[4].boolean,
				UniqueOrKey:     yyDollar[5].bytes,
				ColumnComment:   yyDollar[6].valExpr,
				ColumnFormat:    yyDollar[7].bytes,
				ColumnStorage:   yyDollar[8].bytes,
				ReferenceDef:    yyDollar[9].bytes}
		}
	case 422:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:1878
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[3].boolean,
				DefaultValue:    yyDollar[2].valExpr,
				IsAutoIncrement: yyDollar[4].boolean,
				UniqueOrKey:     yyDollar[5].bytes,
				ColumnComment:   yyDollar[6].valExpr,
				ColumnFormat:    yyDollar[7].bytes,
				ColumnStorage:   yyDollar[8].bytes,
				ReferenceDef:    yyDollar[9].bytes}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1892
		{
			yyVAL.dataType = &DataType{TypeName: "bit"}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1896
		{
			yyVAL.dataType = &DataType{TypeName: "bit(" + string(yyDollar[3].bytes) + ")"}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1900
		{
			yyVAL.dataType = &DataType{TypeName: "tinyint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1904
		{
			yyVAL.dataType = &DataType{TypeName: "tinyint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1908
		{
			yyVAL.dataType = &DataType{TypeName: "bool"}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1912
		{
			yyVAL.dataType = &DataType{TypeName: "bool"}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1916
		{
			yyVAL.dataType = &DataType{TypeName: "smallint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 430:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1920
		{
			yyVAL.dataType = &DataType{TypeName: "smallint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1924
		{
			yyVAL.dataType = &DataType{TypeName: "mediumint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1928
		{
			yyVAL.dataType = &DataType{TypeName: "mediumint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1932
		{
			yyVAL.dataType = &DataType{TypeName: "int", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1936
		{
			yyVAL.dataType = &DataType{TypeName: "int(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1940
		{
			yyVAL.dataType = &DataType{TypeName: "integer", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1944
		{
			yyVAL.dataType = &DataType{TypeName: "integer(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1948
		{
			yyVAL.dataType = &DataType{TypeName: "bigint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1952
		{
			yyVAL.dataType = &DataType{TypeName: "bigint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1956
		{
			yyVAL.dataType = &DataType{TypeName: "real", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 440:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1960
		{
			yyVAL.dataType = &DataType{TypeName: "real(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1964
		{
			yyVAL.dataType = &DataType{TypeName: "double", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 442:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1968
		{
			yyVAL.dataType = &DataType{TypeName: "double(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1972
		{
			yyVAL.dataType = &DataType{TypeName: "float", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1976
		{
			yyVAL.dataType = &DataType{TypeName: "float(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1980
		{
			yyVAL.dataType = &DataType{TypeName: "decimal", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1984
		{
			yyVAL.dataType = &DataType{TypeName: "decimal(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1988
		{
			yyVAL.dataType = &DataType{TypeName: "decimal(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1992
		{
			yyVAL.dataType = &DataType{TypeName: "date"}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1996
		{
			yyVAL.dataType = &DataType{TypeName: "time"}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2000
		{
			yyVAL.dataType = &DataType{TypeName: "time(" + string(yyDollar[3].bytes) + ")"}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2004
		{
			yyVAL.dataType = &DataType{TypeName: "timestamp"}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2008
		{
			yyVAL.dataType = &DataType{TypeName: "timestamp(" + string(yyDollar[3].bytes) + ")"}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2012
		{
			yyVAL.dataType = &DataType{TypeName: "datetime"}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2016
		{
			yyVAL.dataType = &DataType{TypeName: "datetime(" + string(yyDollar[3].bytes) + ")"}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2020
		{
			yyVAL.dataType = &DataType{TypeName: "year"}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2024
		{
			yyVAL.dataType = &DataType{TypeName: "char", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2028
		{
			yyVAL.dataType = &DataType{TypeName: "nchar", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 458:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2032
		{
			yyVAL.dataType = &DataType{TypeName: "char(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 459:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2036
		{
			yyVAL.dataType = &DataType{TypeName: "nchar(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2040
		{
			yyVAL.dataType = &DataType{TypeName: "varchar(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 461:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2044
		{
			yyVAL.dataType = &DataType{TypeName: "nvarchar(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2048
		{
			yyVAL.dataType = &DataType{TypeName: "binary"}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2052
		{
			yyVAL.dataType = &DataType{TypeName: "binary(" + string(yyDollar[3].bytes) + ")"}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2056
		{
			yyVAL.dataType = &DataType{TypeName: "varbinary(" + string(yyDollar[3].bytes) + ")"}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2060
		{
			yyVAL.dataType = &DataType{TypeName: "tinyblob"}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2064
		{
			yyVAL.dataType = &DataType{TypeName: "blob"}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2068
		{
			yyVAL.dataType = &DataType{TypeName: "mediumblob"}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2072
		{
			yyVAL.dataType = &DataType{TypeName: "longblob"}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2076
		{
			yyVAL.dataType = &DataType{TypeName: "tinytext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2080
		{
			yyVAL.dataType = &DataType{TypeName: "text", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2084
		{
			yyVAL.dataType = &DataType{TypeName: "mediumtext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2088
		{
			yyVAL.dataType = &DataType{TypeName: "longtext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2092
		{
			yyVAL.dataType = &DataType{TypeName: "enum(" + String(yyDollar[3].valExprs) + ")", Charset: yyDollar[5].bytes, Collate: yyDollar[6].bytes}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2096
		{
			yyVAL.dataType = &DataType{TypeName: "set(" + String(yyDollar[3].valExprs) + ")", Charset: yyDollar[5].bytes, Collate: yyDollar[6].bytes}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2102
		{
			yyVAL.boolean = false
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2104
		{
			yyVAL.boolean = true
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2108
		{
			yyVAL.valExpr = yyDollar[2].valExpr
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2111
		{
			yyVAL.boolean = false
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2113
		{
			yyVAL.boolean = true
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2116
		{
			yyVAL.bytes = nil
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2118
		{
			yyVAL.bytes = []byte("unique key")
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2120
		{
			yyVAL.bytes = []byte("unique key")
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2122
		{
			yyVAL.bytes = []byte("primary key")
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2124
		{
			yyVAL.bytes = []byte("primary key")
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2127
		{
			yyVAL.valExpr = nil
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2129
		{
			yyVAL.valExpr = StrVal(yyDollar[2].bytes)
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2134
		{
			yyVAL.bytes = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2136
		{
			yyVAL.bytes = []byte("fixed")
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2138
		{
			yyVAL.bytes = []byte("dynamic")
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2140
		{
			yyVAL.bytes = []byte("default")
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2143
		{
			yyVAL.bytes = nil
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2145
		{
			yyVAL.bytes = []byte("disk")
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2147
		{
			yyVAL.bytes = []byte("memory")
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2149
		{
			yyVAL.bytes = []byte("default")
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2152
		{
			yyVAL.bytes = nil
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2154
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2158
		{
			yyVAL.bytes = []byte("references " + String(yyDollar[2].tableName) + "(" + String(yyDollar[4].idxColNames) + ")" + string(yyDollar[6].bytes) + string(yyDollar[7].bytes))
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2161
		{
			yyVAL.bytes = nil
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2163
		{
			yyVAL.bytes = []byte("match full")
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2165
		{
			yyVAL.bytes = []byte("match partial")
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2167
		{
			yyVAL.bytes = []byte("match simple")
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2170
		{
			yyVAL.bytes = nil
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2172
		{
			yyVAL.bytes = []byte("on delete " + string(yyDollar[3].bytes))
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2174
		{
			yyVAL.bytes = []byte("on update " + string(yyDollar[3].bytes))
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2176
		{
			yyVAL.bytes = []byte("on delete " + string(yyDollar[3].bytes) + " on update " + string(yyDollar[6].bytes))
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2179
		{
			yyVAL.bytes = nil
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2181
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2185
		{
			yyVAL.bytes = []byte("restrict")
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2187
		{
			yyVAL.bytes = []byte("cascade")
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2189
		{
			yyVAL.bytes = []byte("set null")
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2191
		{
			yyVAL.bytes = []byte("no action")
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2194
		{
			yyVAL.boolean = false
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2196
		{
			yyVAL.boolean = true
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2199
		{
			yyVAL.boolean = false
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2201
		{
			yyVAL.boolean = true
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2204
		{
			yyVAL.boolean = false
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2206
		{
			yyVAL.boolean = true
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2209
		{
			yyVAL.bytes = nil
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2211
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2214
		{
			yyVAL.bytes = nil
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2216
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2219
		{
			yyVAL.bytes = nil
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2221
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2224
		{
			yyVAL.optKeyVals = nil
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2226
		{
			yyVAL.optKeyVals = yyDollar[1].optKeyVals
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2230
		{
			yyVAL.optKeyVals = OptionKeyValues{yyDollar[1].optKeyVal}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2232
		{
			yyVAL.optKeyVals = append(yyDollar[1].optKeyVals, yyDollar[2].optKeyVal)
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2236
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "engine", Value: string(yyDollar[3].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2240
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "auto_increment", Value: string(yyDollar[3].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2244
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[5].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2248
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[4].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2252
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[4].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2256
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[3].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2260
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "collate", Value: string(yyDollar[4].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2264
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "collate", Value: string(yyDollar[3].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2268
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "comment", Value: String(StrVal(yyDollar[3].bytes))}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2273
		{
			yyVAL.alterSpecs = nil
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2275
		{
			yyVAL.alterSpecs = yyDollar[1].alterSpecs
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2279
		{
			yyVAL.alterSpecs = AlterSpecifications{yyDollar[1].alterSpec}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2281
		{
			yyVAL.alterSpecs = append(yyDollar[1].alterSpecs, yyDollar[3].alterSpec)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2285
		{
			yyVAL.alterSpec = yyDollar[1].optKeyVals
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2289
		{
			yyVAL.alterSpec = &AddOrModifyColumnSpec{Action: "add", ColumnName: yyDollar[3].colName, ColumnDef: yyDollar[4].columnDef, FirstOrAfterColumn: yyDollar[5].fiOAfCol}
		}
	case 543:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2293
		{
			yyVAL.alterSpec = &AddIndexSpec{Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 544:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2297
		{
			yyVAL.alterSpec = &AddIndexSpec{Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2301
		{
			yyVAL.alterSpec = &AddPrimaryKeySpec{Symbol: yyDollar[2].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2305
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 547:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:2309
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, IndexColumns: yyDollar[8].idxColNames}
		}
	case 548:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:2313
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, IndexColumns: yyDollar[8].idxColNames}
		}
	case 549:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2317
		{
			yyVAL.alterSpec = &AddForeignKeySpec{Symbol: yyDollar[2].bytes, IndexColumns: yyDollar[6].idxColNames, ReferenceDef: yyDollar[8].bytes}
		}
	case 550:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2321
		{
			yyVAL.alterSpec = &ChangeColumnSpec{OldColumnName: yyDollar[3].colName, ColumnName: yyDollar[4].colName, ColumnDef: yyDollar[5].columnDef, FirstOrAfterColumn: yyDollar[6].fiOAfCol}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2325
		{
			yyVAL.alterSpec = &AddOrModifyColumnSpec{Action: "modify", ColumnName: yyDollar[3].colName, ColumnDef: yyDollar[4].columnDef, FirstOrAfterColumn: yyDollar[5].fiOAfCol}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2329
		{
			yyVAL.alterSpec = &DropColumnSpec{ColumnName: yyDollar[3].colName}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2333
		{
			yyVAL.alterSpec = &DropPrimaryKeySpec{}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2337
		{
			yyVAL.alterSpec = &DropIndexSpec{Name: yyDollar[3].bytes}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2341
		{
			yyVAL.alterSpec = &DropIndexSpec{Name: yyDollar[3].bytes}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2345
		{
			yyVAL.alterSpec = &DropForeignKeySpec{Name: yyDollar[4].bytes}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2349
		{
			yyVAL.alterSpec = &DisableKeysSpec{}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2353
		{
			yyVAL.alterSpec = &EnableKeysSpec{}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2358
		{
			yyVAL.fiOAfCol = nil
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2360
		{
			yyVAL.fiOAfCol = yyDollar[1].fiOAfCol
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2364
		{
			yyVAL.fiOAfCol = &FirstOrAfterColumn{FirstOrAfter: "first", ColumnName: yyDollar[2].colName}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2368
		{
			yyVAL.fiOAfCol = &FirstOrAfterColumn{FirstOrAfter: "after", ColumnName: yyDollar[2].colName}
		}
	}
	goto yystack /* stack new state and value */
}
