//line yacc.y:1

// Copyright 2012, Google Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Copyright 2016 The kingshard Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// The MIT License (MIT)

// Copyright (c) 2016 Jerry Bai

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package sqlparser

import __yyfmt__ "fmt"

//line yacc.y:43
import "bytes"

// SetParseTree to build ast.
func SetParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

// SetAllowComments set allow comments.
func SetAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

// ForceEOF force EOF.
func ForceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

var (
	SHARE        = []byte("share")
	MODE         = []byte("mode")
	IF_BYTES     = []byte("if")
	VALUES_BYTES = []byte("values")
)

//line yacc.y:70
type yySymType struct {
	yys         int
	empty       struct{}
	statement   Statement
	selStmt     SelectStatement
	setStmt     SetStatement
	showStmt    ShowStatement
	ddlStmt     DDLStatement
	byt         byte
	bytes       []byte
	bytes2      [][]byte
	str         string
	boolean     bool
	selectExprs SelectExprs
	selectExpr  SelectExpr
	columns     Columns
	colName     *ColName
	tableExprs  TableExprs
	tableExpr   TableExpr
	smTableExpr SimpleTableExpr
	tableName   *TableName
	indexHints  *IndexHints
	expr        Expr
	boolExpr    BoolExpr
	valExpr     ValExpr
	tuple       Tuple
	valExprs    ValExprs
	values      Values
	subquery    *Subquery
	caseExpr    *CaseExpr
	funcExpr    *FuncExpr
	whens       []*When
	when        *When
	orderBy     OrderBy
	order       *Order
	limit       *Limit
	insRows     InsertRows
	updateExprs UpdateExprs
	updateExpr  *UpdateExpr
	createDef   CreateDefinition
	createDefs  CreateDefinitions
	columnDef   *ColumnDefinition
	dataType    *DataType
	idxColName  *IndexColName
	idxColNames IndexColNames
	optKeyVal   *OptionKeyValue
	optKeyVals  OptionKeyValues
	fiOAfCol    *FirstOrAfterColumn
	alterSpecs  AlterSpecifications
	alterSpec   AlterSpecification
}

const LEX_ERROR = 57346
const SELECT = 57347
const INSERT = 57348
const UPDATE = 57349
const DELETE = 57350
const FROM = 57351
const WHERE = 57352
const GROUP = 57353
const HAVING = 57354
const ORDER = 57355
const BY = 57356
const LIMIT = 57357
const FOR = 57358
const ALL = 57359
const DISTINCT = 57360
const AS = 57361
const EXISTS = 57362
const NULL = 57363
const ASC = 57364
const DESC = 57365
const VALUES = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const SHOW = 57373
const EXPLAIN = 57374
const DESCRIBE = 57375
const ID = 57376
const STRING = 57377
const NUMBER = 57378
const VALUE_ARG = 57379
const COMMENTS = 57380
const UNION = 57381
const MINUS = 57382
const EXCEPT = 57383
const INTERSECT = 57384
const FULL = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const OR = 57397
const AND = 57398
const NOT = 57399
const BETWEEN = 57400
const CASE = 57401
const WHEN = 57402
const THEN = 57403
const ELSE = 57404
const LE = 57405
const GE = 57406
const NE = 57407
const NULL_SAFE_EQUAL = 57408
const IS = 57409
const LIKE = 57410
const IN = 57411
const UNARY = 57412
const END = 57413
const BEGIN = 57414
const START = 57415
const TRANSACTION = 57416
const COMMIT = 57417
const ROLLBACK = 57418
const ISOLATION = 57419
const LEVEL = 57420
const READ = 57421
const COMMITTED = 57422
const UNCOMMITTED = 57423
const REPEATABLE = 57424
const SERIALIZABLE = 57425
const NAMES = 57426
const CHARSET = 57427
const CHARACTER = 57428
const COLLATION = 57429
const ARMSCII8 = 57430
const ASCII = 57431
const BIG5 = 57432
const BINARY = 57433
const CP1250 = 57434
const CP1251 = 57435
const CP1256 = 57436
const CP1257 = 57437
const CP850 = 57438
const CP852 = 57439
const CP866 = 57440
const CP932 = 57441
const DEC8 = 57442
const EUCJPMS = 57443
const EUCKR = 57444
const GB2312 = 57445
const GBK = 57446
const GEOSTD8 = 57447
const GREEK = 57448
const HEBREW = 57449
const HP8 = 57450
const KEYBCS2 = 57451
const KOI8R = 57452
const KOI8U = 57453
const LATIN1 = 57454
const LATIN2 = 57455
const LATIN5 = 57456
const LATIN7 = 57457
const MACCE = 57458
const MACROMAN = 57459
const SJIS = 57460
const SWE7 = 57461
const TIS620 = 57462
const UCS2 = 57463
const UJIS = 57464
const UTF16 = 57465
const UTF16LE = 57466
const UTF32 = 57467
const UTF8 = 57468
const UTF8MB4 = 57469
const ARMSCII8_GENERAL_CI = 57470
const ARMSCII8_BIN = 57471
const ASCII_GENERAL_CI = 57472
const ASCII_BIN = 57473
const BIG5_CHINESE_CI = 57474
const BIG5_BIN = 57475
const CP1250_GENERAL_CI = 57476
const CP1250_BIN = 57477
const CP1251_GENERAL_CI = 57478
const CP1251_GENERAL_CS = 57479
const CP1251_BIN = 57480
const CP1256_GENERAL_CI = 57481
const CP1256_BIN = 57482
const CP1257_GENERAL_CI = 57483
const CP1257_BIN = 57484
const CP850_GENERAL_CI = 57485
const CP850_BIN = 57486
const CP852_GENERAL_CI = 57487
const CP852_BIN = 57488
const CP866_GENERAL_CI = 57489
const CP866_BIN = 57490
const CP932_JAPANESE_CI = 57491
const CP932_BIN = 57492
const DEC8_SWEDISH_CI = 57493
const DEC8_BIN = 57494
const EUCJPMS_JAPANESE_CI = 57495
const EUCJPMS_BIN = 57496
const EUCKR_KOREAN_CI = 57497
const EUCKR_BIN = 57498
const GB2312_CHINESE_CI = 57499
const GB2312_BIN = 57500
const GBK_CHINESE_CI = 57501
const GBK_BIN = 57502
const GEOSTD8_GENERAL_CI = 57503
const GEOSTD8_BIN = 57504
const GREEK_GENERAL_CI = 57505
const GREEK_BIN = 57506
const HEBREW_GENERAL_CI = 57507
const HEBREW_BIN = 57508
const HP8_ENGLISH_CI = 57509
const HP8_BIN = 57510
const KEYBCS2_GENERAL_CI = 57511
const KEYBCS2_BIN = 57512
const KOI8R_GENERAL_CI = 57513
const KOI8R_BIN = 57514
const KOI8U_GENERAL_CI = 57515
const KOI8U_BIN = 57516
const LATIN1_GENERAL_CI = 57517
const LATIN1_GENERAL_CS = 57518
const LATIN1_BIN = 57519
const LATIN2_GENERAL_CI = 57520
const LATIN2_BIN = 57521
const LATIN5_TURKISH_CI = 57522
const LATIN5_BIN = 57523
const LATIN7_GENERAL_CI = 57524
const LATIN7_GENERAL_CS = 57525
const LATIN7_BIN = 57526
const MACCE_GENERAL_CI = 57527
const MACCE_BIN = 57528
const MACROMAN_GENERAL_CI = 57529
const MACROMAN_BIN = 57530
const SJIS_JAPANESE_CI = 57531
const SJIS_BIN = 57532
const SWE7_SWEDISH_CI = 57533
const SWE7_BIN = 57534
const TIS620_THAI_CI = 57535
const TIS620_BIN = 57536
const UCS2_GENERAL_CI = 57537
const UCS2_UNICODE_CI = 57538
const UCS2_BIN = 57539
const UJIS_JAPANESE_CI = 57540
const UJIS_BIN = 57541
const UTF16_GENERAL_CI = 57542
const UTF16_UNICODE_CI = 57543
const UTF16_BIN = 57544
const UTF16LE_GENERAL_CI = 57545
const UTF16LE_BIN = 57546
const UTF32_GENERAL_CI = 57547
const UTF32_UNICODE_CI = 57548
const UTF32_BIN = 57549
const UTF8_GENERAL_CI = 57550
const UTF8_UNICODE_CI = 57551
const UTF8_BIN = 57552
const UTF8MB4_GENERAL_CI = 57553
const UTF8MB4_UNICODE_CI = 57554
const UTF8MB4_BIN = 57555
const SESSION = 57556
const GLOBAL = 57557
const VARIABLES = 57558
const STATUS = 57559
const DATABASES = 57560
const SCHEMAS = 57561
const DATABASE = 57562
const STORAGE = 57563
const ENGINES = 57564
const TABLES = 57565
const COLUMNS = 57566
const FIELDS = 57567
const PROCEDURE = 57568
const FUNCTION = 57569
const INDEXES = 57570
const KEYS = 57571
const TRIGGER = 57572
const TRIGGERS = 57573
const PLUGINS = 57574
const PROCESSLIST = 57575
const SLAVE = 57576
const PROFILES = 57577
const REPLACE = 57578
const OFFSET = 57579
const COLLATE = 57580
const CREATE = 57581
const ALTER = 57582
const DROP = 57583
const RENAME = 57584
const TABLE = 57585
const INDEX = 57586
const VIEW = 57587
const TO = 57588
const IGNORE = 57589
const IF = 57590
const UNIQUE = 57591
const FULLTEXT = 57592
const USING = 57593
const BTREE = 57594
const HASH = 57595
const BIT = 57596
const TINYINT = 57597
const BOOL = 57598
const BOOLEAN = 57599
const SMALLINT = 57600
const MEDIUMINT = 57601
const INT = 57602
const INTEGER = 57603
const BIGINT = 57604
const REAL = 57605
const DOUBLE = 57606
const FLOAT = 57607
const DECIMAL = 57608
const DATE = 57609
const TIME = 57610
const TIMESTAMP = 57611
const DATETIME = 57612
const YEAR = 57613
const CHAR = 57614
const NCHAR = 57615
const VARCHAR = 57616
const NVARCHAR = 57617
const TINYTEXT = 57618
const TEXT = 57619
const MEDIUMTEXT = 57620
const LONGTEXT = 57621
const VARBINARY = 57622
const TINYBLOB = 57623
const BLOB = 57624
const MEDIUMBLOB = 57625
const LONGBLOB = 57626
const ENUM = 57627
const AUTO_INCREMENT = 57628
const ENGINE = 57629
const PRIMARY = 57630
const REFERENCES = 57631
const COMMENT = 57632
const COLUMN_FORMAT = 57633
const FIXED = 57634
const DYNAMIC = 57635
const DISK = 57636
const MEMORY = 57637
const MATCH = 57638
const PARTIAL = 57639
const SIMPLE = 57640
const RESTRICT = 57641
const CASCADE = 57642
const NO = 57643
const ACTION = 57644
const UNSIGNED = 57645
const ZEROFILL = 57646
const CONSTRAINT = 57647
const FOREIGN = 57648
const FIRST = 57649
const AFTER = 57650
const ADD = 57651
const COLUMN = 57652
const CHANGE = 57653
const MODIFY = 57654
const ENABLE = 57655
const DISABLE = 57656
const KILL = 57657
const QUERY = 57658
const CONNECTION = 57659
const POSITION = 57660

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"NULL",
	"ASC",
	"DESC",
	"VALUES",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"SHOW",
	"EXPLAIN",
	"DESCRIBE",
	"ID",
	"STRING",
	"NUMBER",
	"VALUE_ARG",
	"COMMENTS",
	"'('",
	"'~'",
	"UNION",
	"MINUS",
	"EXCEPT",
	"INTERSECT",
	"','",
	"FULL",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"OR",
	"AND",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"IN",
	"'|'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'.'",
	"UNARY",
	"END",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"ISOLATION",
	"LEVEL",
	"READ",
	"COMMITTED",
	"UNCOMMITTED",
	"REPEATABLE",
	"SERIALIZABLE",
	"NAMES",
	"CHARSET",
	"CHARACTER",
	"COLLATION",
	"ARMSCII8",
	"ASCII",
	"BIG5",
	"BINARY",
	"CP1250",
	"CP1251",
	"CP1256",
	"CP1257",
	"CP850",
	"CP852",
	"CP866",
	"CP932",
	"DEC8",
	"EUCJPMS",
	"EUCKR",
	"GB2312",
	"GBK",
	"GEOSTD8",
	"GREEK",
	"HEBREW",
	"HP8",
	"KEYBCS2",
	"KOI8R",
	"KOI8U",
	"LATIN1",
	"LATIN2",
	"LATIN5",
	"LATIN7",
	"MACCE",
	"MACROMAN",
	"SJIS",
	"SWE7",
	"TIS620",
	"UCS2",
	"UJIS",
	"UTF16",
	"UTF16LE",
	"UTF32",
	"UTF8",
	"UTF8MB4",
	"ARMSCII8_GENERAL_CI",
	"ARMSCII8_BIN",
	"ASCII_GENERAL_CI",
	"ASCII_BIN",
	"BIG5_CHINESE_CI",
	"BIG5_BIN",
	"CP1250_GENERAL_CI",
	"CP1250_BIN",
	"CP1251_GENERAL_CI",
	"CP1251_GENERAL_CS",
	"CP1251_BIN",
	"CP1256_GENERAL_CI",
	"CP1256_BIN",
	"CP1257_GENERAL_CI",
	"CP1257_BIN",
	"CP850_GENERAL_CI",
	"CP850_BIN",
	"CP852_GENERAL_CI",
	"CP852_BIN",
	"CP866_GENERAL_CI",
	"CP866_BIN",
	"CP932_JAPANESE_CI",
	"CP932_BIN",
	"DEC8_SWEDISH_CI",
	"DEC8_BIN",
	"EUCJPMS_JAPANESE_CI",
	"EUCJPMS_BIN",
	"EUCKR_KOREAN_CI",
	"EUCKR_BIN",
	"GB2312_CHINESE_CI",
	"GB2312_BIN",
	"GBK_CHINESE_CI",
	"GBK_BIN",
	"GEOSTD8_GENERAL_CI",
	"GEOSTD8_BIN",
	"GREEK_GENERAL_CI",
	"GREEK_BIN",
	"HEBREW_GENERAL_CI",
	"HEBREW_BIN",
	"HP8_ENGLISH_CI",
	"HP8_BIN",
	"KEYBCS2_GENERAL_CI",
	"KEYBCS2_BIN",
	"KOI8R_GENERAL_CI",
	"KOI8R_BIN",
	"KOI8U_GENERAL_CI",
	"KOI8U_BIN",
	"LATIN1_GENERAL_CI",
	"LATIN1_GENERAL_CS",
	"LATIN1_BIN",
	"LATIN2_GENERAL_CI",
	"LATIN2_BIN",
	"LATIN5_TURKISH_CI",
	"LATIN5_BIN",
	"LATIN7_GENERAL_CI",
	"LATIN7_GENERAL_CS",
	"LATIN7_BIN",
	"MACCE_GENERAL_CI",
	"MACCE_BIN",
	"MACROMAN_GENERAL_CI",
	"MACROMAN_BIN",
	"SJIS_JAPANESE_CI",
	"SJIS_BIN",
	"SWE7_SWEDISH_CI",
	"SWE7_BIN",
	"TIS620_THAI_CI",
	"TIS620_BIN",
	"UCS2_GENERAL_CI",
	"UCS2_UNICODE_CI",
	"UCS2_BIN",
	"UJIS_JAPANESE_CI",
	"UJIS_BIN",
	"UTF16_GENERAL_CI",
	"UTF16_UNICODE_CI",
	"UTF16_BIN",
	"UTF16LE_GENERAL_CI",
	"UTF16LE_BIN",
	"UTF32_GENERAL_CI",
	"UTF32_UNICODE_CI",
	"UTF32_BIN",
	"UTF8_GENERAL_CI",
	"UTF8_UNICODE_CI",
	"UTF8_BIN",
	"UTF8MB4_GENERAL_CI",
	"UTF8MB4_UNICODE_CI",
	"UTF8MB4_BIN",
	"SESSION",
	"GLOBAL",
	"VARIABLES",
	"STATUS",
	"DATABASES",
	"SCHEMAS",
	"DATABASE",
	"STORAGE",
	"ENGINES",
	"TABLES",
	"COLUMNS",
	"FIELDS",
	"PROCEDURE",
	"FUNCTION",
	"INDEXES",
	"KEYS",
	"TRIGGER",
	"TRIGGERS",
	"PLUGINS",
	"PROCESSLIST",
	"SLAVE",
	"PROFILES",
	"REPLACE",
	"OFFSET",
	"COLLATE",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"FULLTEXT",
	"USING",
	"BTREE",
	"HASH",
	"BIT",
	"TINYINT",
	"BOOL",
	"BOOLEAN",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"REAL",
	"DOUBLE",
	"FLOAT",
	"DECIMAL",
	"DATE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"NCHAR",
	"VARCHAR",
	"NVARCHAR",
	"TINYTEXT",
	"TEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"VARBINARY",
	"TINYBLOB",
	"BLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"ENUM",
	"AUTO_INCREMENT",
	"ENGINE",
	"PRIMARY",
	"REFERENCES",
	"COMMENT",
	"COLUMN_FORMAT",
	"FIXED",
	"DYNAMIC",
	"DISK",
	"MEMORY",
	"MATCH",
	"PARTIAL",
	"SIMPLE",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"UNSIGNED",
	"ZEROFILL",
	"CONSTRAINT",
	"FOREIGN",
	"FIRST",
	"AFTER",
	"ADD",
	"COLUMN",
	"CHANGE",
	"MODIFY",
	"ENABLE",
	"DISABLE",
	"KILL",
	"QUERY",
	"CONNECTION",
	"POSITION",
	"')'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 560
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 1640

var yyAct = [...]int{

	153, 446, 1063, 424, 885, 170, 1064, 142, 1024, 740,
	747, 837, 902, 874, 637, 256, 826, 748, 436, 749,
	163, 976, 887, 567, 290, 499, 351, 143, 573, 930,
	884, 779, 429, 144, 154, 412, 428, 562, 501, 337,
	77, 415, 354, 137, 392, 907, 291, 3, 261, 339,
	42, 43, 44, 45, 1056, 955, 116, 955, 116, 265,
	264, 273, 272, 275, 276, 277, 278, 279, 274, 455,
	456, 457, 458, 459, 423, 460, 461, 60, 955, 1043,
	1041, 955, 955, 955, 955, 955, 955, 388, 83, 167,
	152, 755, 955, 162, 1040, 955, 1039, 211, 115, 939,
	119, 938, 955, 168, 149, 150, 151, 955, 294, 157,
	937, 955, 936, 935, 933, 955, 166, 972, 972, 972,
	439, 116, 116, 955, 929, 944, 944, 928, 116, 927,
	255, 160, 921, 920, 926, 572, 919, 262, 382, 918,
	148, 152, 917, 916, 162, 915, 497, 155, 156, 386,
	472, 515, 514, 861, 135, 149, 150, 151, 621, 141,
	157, 889, 890, 246, 247, 610, 80, 838, 382, 382,
	252, 382, 757, 512, 533, 306, 1102, 977, 908, 1055,
	140, 750, 160, 295, 287, 289, 425, 449, 506, 507,
	254, 775, 441, 440, 249, 122, 773, 620, 155, 156,
	134, 124, 125, 771, 609, 165, 769, 767, 765, 118,
	346, 763, 761, 734, 759, 622, 756, 751, 1067, 733,
	519, 732, 611, 116, 753, 250, 828, 251, 753, 116,
	116, 128, 129, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 1105, 334, 116, 167, 127, 931, 116,
	307, 344, 116, 439, 116, 522, 752, 521, 116, 310,
	503, 359, 114, 133, 360, 313, 336, 168, 1025, 781,
	1028, 320, 321, 166, 751, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 333, 217, 218, 335, 52, 51,
	242, 342, 355, 231, 345, 230, 347, 227, 395, 53,
	561, 364, 54, 167, 79, 862, 359, 303, 361, 362,
	76, 526, 525, 752, 546, 548, 116, 116, 116, 736,
	116, 556, 387, 263, 390, 441, 440, 305, 168, 260,
	166, 78, 161, 213, 243, 380, 353, 274, 78, 559,
	560, 167, 167, 383, 1100, 442, 1086, 116, 433, 1022,
	116, 813, 635, 262, 116, 79, 549, 634, 399, 400,
	401, 418, 402, 393, 405, 406, 407, 1085, 166, 420,
	1082, 1081, 1058, 1057, 1051, 1050, 411, 223, 224, 225,
	463, 1020, 414, 161, 1015, 409, 417, 226, 355, 444,
	452, 1014, 451, 438, 437, 78, 1009, 443, 633, 466,
	1008, 462, 158, 385, 1007, 511, 974, 973, 971, 783,
	22, 167, 954, 474, 946, 945, 430, 531, 431, 432,
	435, 434, 167, 925, 571, 148, 152, 554, 492, 162,
	216, 490, 219, 220, 221, 496, 478, 480, 166, 168,
	149, 150, 151, 530, 141, 157, 529, 491, 509, 500,
	495, 489, 518, 158, 116, 116, 417, 476, 473, 608,
	381, 82, 81, 827, 527, 140, 504, 160, 79, 513,
	757, 510, 447, 448, 450, 757, 781, 524, 442, 523,
	536, 537, 757, 155, 156, 757, 757, 757, 355, 355,
	757, 757, 502, 757, 304, 757, 517, 750, 167, 1065,
	1066, 750, 829, 612, 613, 614, 116, 565, 394, 1106,
	1107, 167, 618, 619, 520, 167, 167, 167, 516, 627,
	628, 547, 356, 117, 630, 570, 438, 437, 564, 79,
	443, 78, 79, 808, 797, 636, 597, 343, 617, 79,
	78, 78, 623, 624, 625, 616, 308, 168, 615, 1026,
	1027, 311, 312, 504, 750, 264, 236, 314, 22, 215,
	780, 318, 239, 240, 322, 323, 241, 91, 90, 89,
	265, 264, 367, 167, 148, 152, 558, 358, 162, 237,
	482, 238, 370, 483, 484, 366, 365, 78, 168, 149,
	150, 151, 353, 141, 157, 1113, 79, 126, 746, 393,
	500, 479, 164, 743, 745, 275, 276, 277, 278, 279,
	274, 795, 1112, 302, 140, 1104, 160, 277, 278, 279,
	274, 371, 806, 214, 167, 563, 782, 781, 265, 264,
	812, 563, 155, 156, 505, 788, 789, 790, 791, 814,
	79, 816, 349, 540, 88, 538, 802, 398, 541, 815,
	539, 810, 731, 811, 403, 404, 455, 456, 457, 458,
	459, 408, 460, 461, 730, 544, 319, 215, 161, 543,
	542, 758, 760, 762, 764, 766, 768, 770, 772, 774,
	272, 275, 276, 277, 278, 279, 274, 799, 800, 315,
	215, 222, 215, 803, 804, 97, 21, 92, 93, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 594, 595,
	596, 603, 604, 605, 606, 598, 599, 600, 601, 602,
	607, 214, 79, 485, 486, 487, 488, 302, 158, 924,
	923, 79, 79, 922, 338, 87, 338, 382, 79, 42,
	43, 44, 45, 819, 214, 739, 214, 569, 508, 830,
	832, 835, 817, 825, 509, 807, 796, 833, 831, 257,
	840, 818, 842, 820, 844, 259, 846, 410, 848, 453,
	850, 302, 852, 1096, 854, 340, 856, 341, 79, 79,
	1019, 1018, 1006, 741, 742, 341, 1005, 879, 880, 152,
	875, 875, 167, 963, 962, 258, 948, 876, 895, 896,
	957, 947, 897, 149, 150, 151, 892, 161, 891, 900,
	883, 882, 903, 903, 903, 881, 823, 822, 464, 886,
	821, 801, 793, 901, 899, 904, 905, 792, 787, 898,
	786, 785, 912, 784, 914, 778, 777, 911, 776, 913,
	754, 294, 421, 299, 552, 298, 297, 296, 46, 273,
	272, 275, 276, 277, 278, 279, 274, 1013, 993, 877,
	878, 273, 272, 275, 276, 277, 278, 279, 274, 991,
	893, 894, 167, 167, 167, 990, 989, 158, 869, 868,
	167, 167, 167, 167, 934, 867, 956, 866, 167, 288,
	940, 941, 942, 943, 865, 863, 860, 167, 859, 886,
	886, 886, 951, 952, 953, 858, 857, 958, 959, 886,
	886, 967, 960, 961, 855, 886, 853, 975, 966, 980,
	851, 982, 849, 847, 166, 845, 864, 843, 995, 841,
	839, 836, 870, 871, 872, 873, 994, 631, 167, 167,
	131, 130, 1000, 978, 949, 950, 167, 979, 1011, 981,
	1012, 725, 397, 167, 167, 996, 969, 997, 998, 999,
	964, 965, 932, 1023, 10, 886, 886, 632, 1003, 1004,
	970, 528, 245, 886, 9, 138, 212, 8, 169, 910,
	886, 886, 909, 1016, 1017, 1033, 1034, 1035, 1036, 1037,
	1038, 1029, 824, 1031, 1042, 63, 167, 167, 983, 984,
	985, 986, 987, 988, 1054, 64, 809, 992, 62, 167,
	167, 805, 7, 1062, 15, 798, 1030, 1061, 1032, 794,
	14, 1048, 1049, 886, 886, 465, 1052, 1053, 1068, 13,
	1070, 292, 629, 626, 738, 293, 886, 886, 12, 1059,
	1060, 6, 1069, 61, 1071, 71, 116, 244, 5, 4,
	301, 70, 22, 1087, 121, 834, 1084, 741, 742, 532,
	69, 1088, 22, 1090, 1076, 1077, 1078, 1079, 1089, 68,
	1091, 416, 67, 470, 1092, 1093, 1094, 1095, 152, 66,
	65, 162, 1097, 422, 1098, 348, 1080, 167, 1083, 1001,
	1002, 168, 149, 150, 151, 86, 294, 157, 84, 259,
	1110, 1111, 728, 493, 309, 413, 1116, 1117, 727, 535,
	338, 1109, 1108, 1115, 886, 317, 101, 1099, 316, 160,
	235, 1072, 1073, 1074, 234, 1075, 22, 26, 27, 28,
	48, 22, 233, 232, 229, 155, 156, 228, 120, 1114,
	1044, 1045, 1046, 1047, 741, 742, 1021, 906, 138, 357,
	23, 888, 24, 30, 25, 744, 363, 574, 426, 368,
	369, 427, 372, 373, 374, 375, 376, 377, 378, 379,
	95, 94, 96, 498, 445, 1103, 39, 152, 1101, 481,
	162, 1010, 123, 248, 384, 253, 419, 384, 389, 384,
	168, 149, 150, 151, 396, 294, 157, 968, 273, 272,
	275, 276, 277, 278, 279, 274, 566, 726, 35, 36,
	534, 37, 38, 22, 26, 27, 28, 477, 160, 475,
	273, 272, 275, 276, 277, 278, 279, 274, 469, 300,
	146, 391, 147, 145, 155, 156, 159, 23, 494, 24,
	266, 25, 139, 545, 352, 273, 272, 275, 276, 277,
	278, 279, 274, 454, 350, 47, 467, 468, 273, 272,
	275, 276, 277, 278, 279, 274, 136, 455, 456, 457,
	458, 459, 471, 460, 461, 132, 85, 729, 384, 49,
	50, 55, 56, 57, 58, 59, 41, 72, 73, 74,
	75, 20, 79, 11, 19, 18, 17, 16, 2, 92,
	93, 1, 0, 98, 99, 0, 0, 0, 100, 103,
	104, 105, 106, 108, 109, 0, 110, 0, 112, 113,
	161, 0, 0, 0, 111, 268, 270, 0, 102, 107,
	0, 280, 281, 282, 283, 284, 285, 286, 271, 269,
	267, 273, 272, 275, 276, 277, 278, 279, 274, 0,
	0, 0, 0, 0, 550, 551, 0, 0, 0, 553,
	0, 0, 0, 0, 0, 555, 0, 0, 0, 557,
	0, 0, 29, 0, 0, 31, 32, 34, 33, 0,
	0, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	158, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 737, 0,
	0, 40, 0, 644, 0, 0, 0, 0, 0, 29,
	0, 0, 31, 32, 34, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	638, 639, 640, 641, 642, 643, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 0, 0, 384, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
}
var yyPact = [...]int{

	1131, -1000, -1000, 708, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 820, -1000, -1000, 52, -1000, -1000, -1000, -1000, -1000,
	1218, -1000, -1000, -1000, -1000, -1000, 221, -1000, -1000, 361,
	130, 1136, 1091, -1000, -1000, -1000, -1000, 1087, -1000, 468,
	1080, -1000, 25, -1000, -1000, 361, -53, 361, 1139, 1039,
	708, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -63, -53, -11, -27, -1000, -1000, -1000, -1000,
	-1000, 915, 914, -1000, -1000, 120, -1000, 820, 513, 959,
	1483, 1483, -1000, -1000, 957, 549, 549, 54, 549, 549,
	682, 139, 65, 1138, 1135, 63, 61, 1134, 1133, 1125,
	1121, 321, -1000, 58, -1000, -1000, 250, 1032, -1000, 953,
	361, 361, -69, -34, -1000, -1000, -31, 361, -73, 361,
	-1000, -1000, 760, -1000, -1000, 245, 304, 570, 1275, -1000,
	554, 405, -1000, -1000, -1000, 1166, -1000, -1000, 818, -1000,
	-1000, -1000, -1000, 817, -1000, -1000, -1000, -1000, 816, 814,
	1166, -1000, -1000, 692, 215, -1000, 428, -1000, 243, 1483,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -3, 549, -1000, 1166, 554, -1000, 549, 549, -1000,
	-1000, -1000, 361, 680, 1119, 1116, -1000, 657, 361, 361,
	549, 549, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, -1000, 361, 361, 294, 1110, 756, 361, 477,
	361, 361, -51, 361, 1075, 585, -1000, 297, 120, 1166,
	497, -1000, -1000, 361, 554, 554, 1166, 812, 511, 1166,
	1166, 561, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1275, 1,
	126, 9, 1275, -1000, 1067, -1000, 1136, 69, 1166, 1166,
	300, 1192, 294, 205, 1166, 361, -1000, 927, -1000, 1192,
	570, -1000, -1000, 549, -1000, 361, 361, 361, -1000, 361,
	549, 549, -1000, -1000, 1110, 1110, 1110, 549, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 748, 736, 1102, 554, 1057,
	294, 294, 813, 1073, -80, 92, 361, 158, -1000, 361,
	734, 609, 304, 553, -1000, -1000, -1000, 783, -1000, -1000,
	-1000, -1000, 496, 1192, -1000, 812, 1166, 1166, 1192, 1179,
	-1000, 1062, 527, 603, -1000, 537, 537, 254, 254, 254,
	-1000, -1000, 1166, -1000, 1192, -1000, -184, 124, 1166, 1154,
	123, 536, -1000, 554, -1000, 486, 1192, -1000, -1000, 549,
	549, 549, 549, -1000, -1000, -1000, -1000, -1000, -1000, 1057,
	294, 1102, 1094, 1099, 570, -1000, 812, 708, 692, 101,
	-1000, 233, -1000, 577, -1000, -79, -1000, 713, -1000, 225,
	146, -173, -174, 193, 13, 11, -1000, 413, 411, 211,
	952, 380, 377, 351, -1000, -1000, -1000, -1000, -1000, 1048,
	-143, -1000, 1108, 297, 297, -1000, -1000, 598, 596, 623,
	622, 618, 259, 22, 1166, 1166, -1000, 1192, 795, 1166,
	-1000, 1192, -1000, -1000, 93, 1166, -1000, 235, -1000, 1166,
	512, -1000, 244, 206, -1000, -1000, -1000, -1000, -1000, 574,
	568, 1094, -1000, 1166, 712, -1000, -1000, 294, 90, -1000,
	430, -99, 361, 361, 361, 361, -1000, -1000, 92, -1000,
	294, 361, 361, -106, 294, 294, 294, 1016, 361, 361,
	1015, -1000, -1000, 361, 911, 948, 332, 291, 286, 1483,
	1357, 926, -1000, -1000, 1106, 1098, 609, 1230, -1000, 617,
	-1000, 605, -1000, -1000, -1000, -1000, -38, -40, -46, -1000,
	1192, 1192, 1166, 1192, -1000, -15, -1000, 1192, 1166, -1000,
	-1000, -1000, -1000, 1018, -1000, -1000, 710, -1000, 1132, 812,
	-1000, 225, 233, -1000, 196, 811, 177, -1000, -1000, 175,
	173, 172, 169, 168, 167, 164, 157, 152, -1000, 809,
	807, 806, -1000, 521, 370, 804, 802, 801, 799, -1000,
	-1000, -1000, -1000, 163, 163, 163, 163, 798, 793, 1002,
	507, 998, -80, -80, -1000, 792, -1000, 430, -80, -80,
	994, 506, 989, 294, 430, -1000, -1000, -1000, -1000, 361,
	-1000, -1000, 285, 1483, 1357, 1483, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1102, 554, 1166, 554,
	-1000, -1000, 791, 788, 787, 1192, -1000, 1192, 975, 1166,
	-1000, -1000, -1000, -1000, -1000, 225, -1000, 199, 200, 253,
	-1000, -1000, 1044, 778, 905, -152, 904, -1000, -152, 903,
	-152, 901, -152, 899, -152, 897, -152, 896, -152, 894,
	-152, 890, -152, 888, -152, 880, 879, 872, 870, 204,
	869, -1000, 204, 868, 861, 859, 853, 852, 204, 204,
	204, 204, 778, 778, -80, -80, 361, 361, 786, 782,
	781, 294, -161, 779, 777, -80, -80, 361, 361, 773,
	430, -161, -1000, 1483, -1000, -1000, -1000, 1094, 570, 702,
	570, 361, 361, 361, 1150, -1000, -127, 965, -1000, 962,
	199, -120, 199, -120, -1000, -1000, -189, -1000, -1000, -191,
	-1000, -192, -1000, -195, -1000, -198, -1000, -201, -1000, -202,
	-1000, 698, -1000, 695, -1000, 694, -1000, 89, -205, -207,
	-210, -5, 943, -220, -5, -221, -222, -224, -233, -235,
	-5, -5, -5, -5, 81, -1000, 80, 772, 767, -80,
	-80, 294, 294, 294, 78, -1000, 771, -1000, -1000, 294,
	294, 294, 294, 765, 764, -80, -80, 294, -161, -1000,
	-1000, 950, 74, -1000, 73, 72, 294, -129, 918, -1000,
	-1000, -127, 199, -127, 199, -1000, -146, -146, -146, -146,
	-146, -146, 850, 849, 843, -146, 832, -1000, -1000, -1000,
	-1000, 1357, 1483, 163, -1000, 163, 163, 163, -1000, -1000,
	-1000, -1000, -1000, -1000, 778, 204, 204, 294, 294, 757,
	753, 70, 66, 62, -80, 294, -1000, 831, -1000, -1000,
	57, 50, 294, 294, 752, 751, 47, -1000, -1000, 1149,
	274, -1000, 361, -1000, -1000, 692, 32, 242, -1000, -129,
	-127, -129, -127, -152, -152, -152, -152, -152, -152, -238,
	-240, -254, -152, -255, -1000, -1000, 204, 204, 204, 204,
	-1000, -5, -5, 41, 40, 294, 294, -125, -1000, -1000,
	-1000, -1000, -1000, -280, -1000, -1000, 39, 38, 294, 294,
	-125, -1000, 361, -1000, -125, 190, -1000, -1000, -1000, 32,
	-129, 32, -129, -1000, -1000, -1000, -1000, -1000, -1000, -146,
	-146, -146, -1000, -146, -5, -5, -5, -5, -1000, -1000,
	-127, -1000, 37, 36, -1000, 361, 1045, -1000, -1000, 33,
	12, -1000, 361, -1000, -1000, -1000, -1000, -1000, -125, 32,
	-125, 32, -152, -152, -152, -152, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 744, -1000, -1000, -1000, -1000, -1000, -125,
	-1000, -125, -1000, -1000, -1000, -1000, 294, -1000, -1000, 10,
	-135, 558, 197, -1000, 1114, -1000, -1000, -1000, 158, 158,
	555, 538, 1142, 1115, 158, 158, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1311, 1308, 46, 1059, 1058, 1051, 1048, 1039, 1030,
	1024, 1022, 987, 984, 974, 1307, 1306, 1305, 1304, 1303,
	1301, 1265, 696, 1296, 1286, 523, 1285, 263, 48, 1276,
	1264, 26, 1263, 1254, 42, 1253, 12, 39, 43, 1252,
	1250, 41, 7, 899, 33, 24, 1248, 1246, 34, 1243,
	27, 1242, 1241, 44, 1240, 1239, 1227, 1220, 1217, 35,
	1216, 23, 9, 15, 1207, 49, 1196, 37, 20, 205,
	333, 1195, 1193, 1192, 3, 74, 1191, 4, 30, 0,
	5, 14, 1189, 644, 19, 45, 16, 21, 8, 6,
	2, 1188, 1185, 1, 1184, 153, 29, 25, 1183, 36,
	1171, 1168, 13, 17, 10, 91, 11, 31, 28, 1167,
	38, 18, 32, 1165, 1161, 22, 1140,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 3, 3, 11, 11, 14, 14, 12, 13,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 4, 4, 4, 4, 4, 4, 15, 15,
	16, 17, 18, 20, 20, 20, 7, 7, 8, 9,
	10, 10, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 116,
	21, 22, 22, 23, 23, 23, 23, 23, 24, 24,
	26, 26, 27, 27, 27, 29, 29, 28, 28, 28,
	30, 30, 31, 31, 31, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 33, 33, 34, 34, 35, 35,
	35, 35, 36, 36, 102, 102, 37, 37, 38, 38,
	38, 38, 38, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 40, 40, 40, 40, 40, 40, 40,
	41, 41, 46, 46, 44, 44, 48, 45, 45, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 54, 54, 54, 54, 54, 54, 47,
	47, 49, 49, 49, 51, 55, 55, 52, 52, 53,
	56, 56, 50, 50, 42, 42, 42, 42, 57, 57,
	58, 58, 59, 59, 60, 60, 61, 62, 62, 62,
	63, 63, 63, 63, 64, 64, 64, 65, 65, 66,
	66, 67, 67, 68, 68, 69, 71, 71, 72, 72,
	25, 25, 73, 73, 73, 78, 78, 77, 77, 75,
	75, 74, 74, 76, 76, 79, 79, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 82, 82, 82, 82, 83, 83,
	83, 70, 70, 70, 98, 98, 97, 97, 97, 97,
	97, 97, 97, 97, 108, 108, 108, 108, 108, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 103, 103, 84, 104, 104, 86, 86, 86, 86,
	86, 85, 85, 87, 87, 87, 87, 88, 88, 88,
	88, 90, 90, 89, 91, 91, 91, 91, 92, 92,
	92, 92, 92, 94, 94, 93, 93, 93, 93, 105,
	105, 106, 106, 107, 107, 95, 95, 96, 96, 110,
	110, 113, 113, 112, 112, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 101, 101, 100, 100, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 115, 115, 114, 114,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 5, 12, 3, 8, 8, 6, 6, 8, 7,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 4, 5, 4, 4, 6, 7, 1, 2,
	1, 1, 2, 2, 3, 3, 9, 12, 6, 6,
	6, 6, 5, 4, 4, 5, 5, 4, 4, 4,
	6, 5, 7, 5, 7, 6, 6, 7, 7, 5,
	5, 6, 6, 6, 6, 5, 5, 5, 5, 5,
	5, 3, 4, 4, 2, 3, 2, 2, 3, 0,
	2, 0, 2, 1, 2, 1, 1, 1, 0, 1,
	1, 3, 1, 3, 2, 1, 1, 0, 1, 2,
	1, 3, 3, 3, 5, 1, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 1, 3, 0, 2, 1, 3,
	3, 2, 3, 3, 3, 4, 3, 4, 5, 6,
	3, 4, 2, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 3, 1, 3, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 1, 1, 3, 4, 4, 5, 6, 4, 1,
	1, 1, 1, 1, 5, 0, 1, 1, 2, 4,
	0, 2, 1, 3, 1, 1, 1, 1, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 0, 3, 1,
	3, 0, 5, 1, 3, 3, 0, 2, 0, 3,
	0, 1, 0, 1, 1, 1, 3, 2, 5, 0,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 0, 1,
	1, 0, 2, 2, 1, 3, 2, 8, 6, 6,
	7, 8, 8, 7, 7, 8, 8, 9, 9, 1,
	4, 3, 6, 1, 1, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 8, 3, 8, 3,
	8, 3, 6, 8, 1, 1, 4, 1, 4, 1,
	4, 1, 4, 4, 7, 7, 7, 7, 1, 4,
	4, 1, 1, 1, 1, 4, 4, 4, 4, 6,
	6, 1, 2, 2, 0, 1, 0, 1, 2, 1,
	2, 0, 2, 0, 2, 2, 2, 0, 2, 2,
	2, 0, 1, 7, 0, 2, 2, 2, 0, 3,
	3, 6, 6, 0, 1, 1, 1, 2, 2, 0,
	1, 0, 1, 0, 1, 0, 3, 0, 2, 0,
	2, 0, 1, 1, 2, 3, 3, 5, 4, 4,
	3, 4, 3, 3, 0, 1, 1, 3, 1, 5,
	7, 7, 8, 8, 9, 9, 8, 6, 5, 3,
	3, 3, 3, 4, 2, 2, 0, 1, 2, 2,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-14, -19, -7, -8, -9, -10, -15, -16, -17, -18,
	-20, -22, 5, 29, 31, 33, 6, 7, 8, 251,
	32, 254, 255, 257, 256, 87, 88, 90, 91, 55,
	330, -23, 41, 42, 43, 44, 38, -21, -116, -21,
	-21, 237, 236, 247, 250, -21, -21, -21, -21, -21,
	-3, -11, -12, -14, -13, -4, -5, -6, -7, -8,
	-9, -10, -21, -21, -21, -21, 89, -79, 34, 235,
	36, 332, 331, -3, 17, -24, 18, -22, -83, 101,
	100, 99, 229, 230, 101, 100, 102, -83, 233, 234,
	238, 46, 258, 239, 240, 241, 242, 259, 243, 244,
	246, 254, 248, 249, 237, -34, -79, -25, 262, -34,
	9, 25, 258, -73, 264, 265, -25, 258, 258, 259,
	36, 36, -26, -27, 80, 34, -29, -38, -43, -39,
	60, 39, -42, -50, -44, -49, -54, -51, 20, 35,
	36, 37, 21, -79, -48, 78, 79, 40, 333, -47,
	62, 263, 24, -68, 89, -69, -50, -79, 34, 29,
	-80, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, -80, 29, -70, 74, 10, -70, 231, 232, -70,
	-70, -70, 9, 238, 239, 240, 248, 232, 9, 9,
	232, 232, 9, 9, 9, 9, 235, 258, 260, 241,
	242, 245, 232, 84, 25, 29, -34, -34, -72, 263,
	259, 258, -34, -71, 263, -79, -63, 9, 45, 15,
	84, -28, -79, 19, 59, 58, -40, 75, 60, 74,
	61, 73, 77, 76, 83, 78, 79, 80, 81, 82,
	66, 67, 68, 69, 70, 71, 72, -38, -43, -38,
	-45, -3, -43, -43, 39, -48, 39, 39, 39, 39,
	-55, -43, 45, 92, 66, 84, -80, 253, -70, -43,
	-38, -70, -70, -34, -70, 9, 9, 9, -70, 9,
	-34, -34, -70, -70, -34, -34, -34, -34, -34, -34,
	-34, -34, -34, -34, -79, -34, -68, -37, 10, -65,
	29, 39, -34, 60, -79, -34, 261, -34, 20, 57,
	-30, -31, -33, 39, -34, -48, -27, -43, 80, -79,
	-79, -38, -38, -43, -44, 75, 74, 61, -43, -43,
	21, 60, -43, -43, -43, -43, -43, -43, -43, -43,
	334, 334, 45, 334, -43, 334, 80, -45, 18, -43,
	-45, -52, -53, 63, -69, 93, -43, 35, -70, -34,
	-34, -34, -34, -70, -70, -37, -37, -37, -70, -65,
	29, -37, -59, 13, -38, -41, 24, -3, -68, -66,
	-50, 39, 20, -75, -74, 266, -101, -100, -99, -112,
	324, 326, 327, 256, 329, 328, -111, 302, 301, 28,
	101, 100, 253, 305, -34, -94, -93, 314, 315, 29,
	316, -34, -37, 45, -32, 47, 48, 49, 50, 51,
	53, 54, -28, -31, 45, 252, -44, -43, -43, 59,
	21, -43, 334, 334, -45, 75, 334, -56, -53, 65,
	-38, -82, 94, 97, 98, -70, -70, -70, -70, -41,
	-68, -59, -63, 14, -46, -44, 334, 45, -98, -97,
	-50, -110, 259, 27, 320, 57, 267, 268, 45, -111,
	325, 259, 27, -110, 325, 325, 325, 303, 259, 27,
	321, 244, 244, 66, 66, 101, 100, 253, 29, 66,
	66, 66, 21, 317, -57, 11, -31, -31, 47, 52,
	47, 52, 47, 47, 47, -35, 55, 262, 56, 334,
	-43, -43, 59, -43, 334, -43, 86, -43, 64, 95,
	96, 94, -67, 57, -67, -63, -60, -61, -43, 45,
	-50, 334, 45, -108, -109, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 106, 295, 296,
	297, 298, 299, 291, 292, 293, 294, 300, 29, 303,
	264, 321, -79, -79, -79, -34, -99, -50, -79, -79,
	303, 264, 321, -50, -50, -50, 27, -79, -79, 27,
	-79, 36, 29, 66, 66, 66, -80, -81, 143, 144,
	145, 146, 147, 148, 106, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 35, -58, 12, 14, 57,
	47, 47, 259, 259, 259, -43, 334, -43, 26, 45,
	-62, 22, 23, -44, -113, -112, -97, -104, -103, -84,
	301, 21, 60, 28, 39, -105, 39, 318, -105, 39,
	-105, 39, -105, 39, -105, 39, -105, 39, -105, 39,
	-105, 39, -105, 39, -105, 39, 39, 39, 39, -107,
	39, 106, -107, 39, 39, 39, 39, 39, -107, -107,
	-107, -107, 39, 39, 27, -79, 259, 27, 27, -75,
	-75, 39, -108, -75, -75, 27, -79, 259, 27, 27,
	-50, -108, -79, 66, -80, -81, -80, -59, -38, -45,
	-38, 39, 39, 39, 27, -61, -86, 264, 27, 303,
	-104, -84, -104, -103, 21, -42, 36, -106, 319, 36,
	-106, 36, -106, 36, -106, 36, -106, 36, -106, 36,
	-106, 36, -106, 36, -106, 36, -106, 36, 36, 36,
	36, -95, 101, 36, -95, 36, 36, 36, 36, 36,
	-95, -95, -95, -95, -102, -42, -102, -75, -75, -79,
	-79, 39, 39, 39, -78, -77, -50, -115, -114, 322,
	323, 39, 39, -75, -75, -79, -79, 39, -108, -115,
	-80, -63, -36, -79, -36, -36, 7, -85, 305, 27,
	27, -86, -104, -86, -104, 334, 334, 334, 334, 334,
	334, 334, 45, 45, 45, 334, 45, 334, 334, 334,
	-96, 253, 29, 334, -96, 334, 334, 334, 334, 334,
	-96, -96, -96, -96, 45, 334, 334, 39, 39, -75,
	-75, -78, -78, -78, 334, 45, -62, 39, -50, -50,
	-78, -78, 39, 39, -75, -75, -78, -115, -64, 16,
	30, 334, 45, 334, 334, -68, -87, 306, 35, -85,
	-86, -85, -86, -105, -105, -105, -105, -105, -105, 36,
	36, 36, -105, 36, -81, -80, -107, -107, -107, -107,
	-42, -95, -95, -78, -78, 39, 39, 334, 334, 334,
	-76, -74, -77, 36, 334, 334, -78, -78, 39, 39,
	334, 7, 75, -79, -88, 236, 307, 308, 28, -87,
	-85, -87, -85, -106, -106, -106, -106, -106, -106, 334,
	334, 334, -106, 334, -95, -95, -95, -95, -96, -96,
	334, 334, -78, -78, -89, 304, 334, 334, 334, -78,
	-78, -89, -79, -90, -89, 309, 310, 28, -88, -87,
	-88, -87, -105, -105, -105, -105, -96, -96, -96, -96,
	-85, 334, 334, -34, -62, 334, 334, -79, -90, -88,
	-90, -88, -106, -106, -106, -106, 39, -90, -90, -78,
	334, -91, 311, -92, 57, 46, 312, 313, 8, 7,
	-93, -93, 57, 57, 7, 8, -93, -93,
}
var yyDef = [...]int{

	101, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 99, 99, 99, 99, 99, 99, 99, 99,
	0, 99, 99, 99, 99, 48, 0, 50, 51, 0,
	0, 0, 103, 105, 106, 107, 102, 108, 101, 398,
	398, 94, 0, 96, 97, 0, 250, 0, 0, 0,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 252, 250, 0, 0, 49, 52, 265, 266,
	53, 0, 0, 23, 104, 0, 109, 100, 0, 0,
	0, 0, 399, 400, 0, 401, 401, 0, 401, 401,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 95, 98, 136, 0, 251, 0,
	0, 0, 248, 0, 253, 254, 0, 0, 246, 0,
	54, 55, 230, 110, 112, 265, 117, 115, 116, 148,
	0, 0, 179, 180, 181, 0, 191, 192, 0, 214,
	215, 216, 217, 212, 175, 201, 202, 203, 0, 0,
	205, 199, 200, 42, 0, 243, 0, 212, 265, 0,
	44, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
	306, 45, 401, 63, 0, 0, 64, 401, 401, 67,
	68, 69, 0, 401, 0, 0, 92, 401, 0, 0,
	401, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 146, 237, 0, 0,
	0, 0, 0, 0, 0, 0, 21, 0, 0, 0,
	0, 114, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 164, 165, 166, 167, 168, 169, 151, 0, 0,
	0, 0, 177, 190, 0, 162, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 43, 0, 62, 402,
	403, 65, 66, 401, 71, 0, 0, 0, 73, 0,
	401, 401, 79, 80, 146, 146, 146, 401, 85, 86,
	87, 88, 89, 90, 137, 237, 146, 222, 0, 0,
	0, 0, 0, 0, 259, 534, 0, 503, 247, 0,
	146, 120, 117, 0, 134, 135, 111, 231, 113, 213,
	119, 149, 150, 153, 154, 0, 0, 0, 156, 0,
	160, 0, 182, 183, 184, 185, 186, 187, 188, 189,
	152, 174, 0, 176, 177, 193, 0, 0, 0, 0,
	0, 210, 207, 0, 244, 0, 245, 46, 70, 401,
	401, 401, 401, 75, 76, 81, 82, 83, 84, 0,
	0, 222, 230, 0, 147, 26, 0, 171, 27, 0,
	239, 519, 249, 0, 260, 0, 58, 535, 536, 538,
	519, 0, 0, 0, 0, 0, 523, 0, 0, 0,
	0, 0, 0, 0, 59, 60, 504, 505, 506, 0,
	0, 61, 218, 0, 0, 125, 126, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 155, 157, 0, 0,
	161, 178, 194, 195, 0, 0, 198, 0, 208, 0,
	0, 47, 0, 0, 397, 72, 77, 78, 74, 241,
	241, 230, 29, 0, 170, 172, 238, 0, 0, 404,
	0, 0, 0, 0, 0, 0, 261, 262, 0, 524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 554, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 507, 508, 220, 0, 121, 0, 127, 0,
	129, 0, 131, 132, 133, 122, 0, 0, 0, 123,
	232, 233, 0, 158, 196, 0, 204, 211, 0, 394,
	395, 396, 24, 0, 25, 28, 223, 224, 227, 0,
	240, 521, 519, 406, 474, 419, 509, 423, 424, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 444, 445,
	447, 449, 451, 513, 513, 0, 0, 458, 0, 461,
	462, 463, 464, 513, 513, 513, 513, 0, 0, 0,
	0, 0, 259, 259, 520, 0, 537, 0, 259, 259,
	0, 0, 0, 0, 0, 549, 550, 551, 552, 0,
	525, 526, 0, 0, 0, 0, 530, 532, 307, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 392, 393, 533, 222, 0, 0, 0,
	128, 130, 0, 0, 0, 159, 197, 209, 0, 0,
	226, 228, 229, 173, 56, 522, 405, 476, 474, 474,
	475, 471, 0, 0, 0, 511, 0, 510, 511, 0,
	511, 0, 511, 0, 511, 0, 511, 0, 511, 0,
	511, 0, 511, 0, 511, 0, 0, 0, 0, 515,
	0, 514, 515, 0, 0, 0, 0, 0, 515, 515,
	515, 515, 0, 0, 259, 259, 0, 0, 0, 0,
	0, 0, 556, 0, 0, 259, 259, 0, 0, 0,
	0, 556, 553, 0, 529, 531, 528, 230, 221, 219,
	124, 0, 0, 0, 0, 225, 481, 477, 479, 0,
	476, 474, 476, 474, 472, 473, 0, 421, 512, 0,
	425, 0, 427, 0, 429, 0, 431, 0, 433, 0,
	435, 0, 437, 0, 439, 0, 441, 0, 0, 0,
	0, 517, 0, 0, 517, 0, 0, 0, 0, 0,
	517, 517, 517, 517, 0, 144, 0, 0, 0, 259,
	259, 0, 0, 0, 0, 255, 227, 539, 557, 0,
	0, 0, 0, 0, 0, 259, 259, 0, 556, 548,
	527, 234, 0, 142, 0, 0, 0, 483, 0, 478,
	480, 481, 476, 481, 476, 420, 509, 509, 509, 509,
	509, 509, 0, 0, 0, 509, 0, 446, 448, 450,
	452, 0, 0, 513, 453, 513, 513, 513, 459, 460,
	465, 466, 467, 468, 0, 515, 515, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 257, 0, 558, 559,
	0, 0, 0, 0, 0, 0, 0, 547, 22, 0,
	0, 139, 0, 140, 141, 242, 487, 0, 482, 483,
	481, 483, 481, 511, 511, 511, 511, 511, 511, 0,
	0, 0, 511, 0, 518, 516, 515, 515, 515, 515,
	145, 517, 517, 0, 0, 0, 0, 0, 408, 409,
	57, 264, 256, 0, 540, 541, 0, 0, 0, 0,
	0, 235, 0, 143, 491, 0, 484, 485, 486, 487,
	483, 487, 483, 422, 426, 428, 430, 432, 434, 509,
	509, 509, 442, 509, 517, 517, 517, 517, 469, 470,
	481, 410, 0, 0, 413, 0, 227, 542, 543, 0,
	0, 546, 0, 414, 492, 488, 489, 490, 491, 487,
	491, 487, 511, 511, 511, 511, 454, 455, 456, 457,
	407, 411, 412, 0, 258, 544, 545, 236, 415, 491,
	416, 491, 436, 438, 440, 443, 0, 417, 418, 0,
	494, 498, 0, 493, 0, 495, 496, 497, 0, 0,
	499, 500, 0, 0, 0, 0, 502, 501,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 82, 77, 3,
	39, 334, 80, 78, 45, 79, 84, 81, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	67, 66, 68, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 83, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 76, 3, 40,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 41, 42, 43,
	44, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 69, 70, 71, 72, 73, 74, 75, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272,
}
var yyTok3 = [...]int{
	57600, 273, 57601, 274, 57602, 275, 57603, 276, 57604, 277,
	57605, 278, 57606, 279, 57607, 280, 57608, 281, 57609, 282,
	57610, 283, 57611, 284, 57612, 285, 57613, 286, 57614, 287,
	57615, 288, 57616, 289, 57617, 290, 57618, 291, 57619, 292,
	57620, 293, 57621, 294, 57622, 295, 57623, 296, 57624, 297,
	57625, 298, 57626, 299, 57627, 300, 57628, 301, 57629, 302,
	57630, 303, 57631, 304, 57632, 305, 57633, 306, 57634, 307,
	57635, 308, 57636, 309, 57637, 310, 57638, 311, 57639, 312,
	57640, 313, 57641, 314, 57642, 315, 57643, 316, 57644, 317,
	57645, 318, 57646, 319, 57647, 320, 57648, 321, 57649, 322,
	57650, 323, 57651, 324, 57652, 325, 57653, 326, 57654, 327,
	57655, 328, 57656, 329, 57657, 330, 57658, 331, 57659, 332,
	57660, 333, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:308
		{
			SetParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:314
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:316
		{
			yyVAL.statement = yyDollar[1].setStmt
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:318
		{
			yyVAL.statement = yyDollar[1].showStmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:320
		{
			yyVAL.statement = yyDollar[1].showStmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:327
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:329
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:331
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:333
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:340
		{
			yyVAL.statement = nil
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:344
		{
			yyVAL.selStmt = &SimpleSelect{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, Limit: yyDollar[5].limit}
		}
	case 22:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line yacc.y:348
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[6].tableExprs, Where: NewWhere(AST_WHERE, yyDollar[7].boolExpr), GroupBy: GroupBy(yyDollar[8].valExprs), Having: NewWhere(AST_HAVING, yyDollar[9].boolExpr), OrderBy: yyDollar[10].orderBy, Limit: yyDollar[11].limit, Lock: yyDollar[12].str}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:352
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:358
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: yyDollar[6].columns, Rows: yyDollar[7].insRows, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:362
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, col := range yyDollar[7].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:374
		{
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:378
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, col := range yyDollar[6].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:390
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(AST_WHERE, yyDollar[6].boolExpr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:396
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(AST_WHERE, yyDollar[5].boolExpr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:402
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:406
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:410
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:414
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:418
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:422
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].setStmt}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:426
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].showStmt}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:430
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].showStmt}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:434
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:438
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:442
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:446
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:452
		{
			yyVAL.setStmt = &SetVariable{
				Comments: Comments(yyDollar[2].bytes2),
				Scope:    string(yyDollar[3].bytes),
				Exprs:    yyDollar[4].updateExprs,
			}
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:460
		{
			yyVAL.setStmt = &SetCharset{
				Comments: Comments(yyDollar[2].bytes2),
				Charset:  string(yyDollar[5].bytes),
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:467
		{
			yyVAL.setStmt = &SetCharset{
				Comments: Comments(yyDollar[2].bytes2),
				Charset:  string(yyDollar[4].bytes),
			}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:474
		{
			yyVAL.setStmt = &SetNames{
				Comments: Comments(yyDollar[2].bytes2),
				Names:    string(yyDollar[4].bytes),
			}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:481
		{
			yyVAL.setStmt = &SetNames{
				Comments: Comments(yyDollar[2].bytes2),
				Names:    string(yyDollar[4].bytes),
				Collate:  string(yyDollar[6].bytes),
			}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:489
		{
			yyVAL.setStmt = &SetTransactionIsolationLevel{
				Comments:       Comments(yyDollar[2].bytes2),
				Scope:          string(yyDollar[3].bytes),
				IsolationLevel: string(yyDollar[7].bytes),
			}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:499
		{
			yyVAL.statement = &Begin{}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:503
		{
			yyVAL.statement = &Begin{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:509
		{
			yyVAL.statement = &Commit{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:515
		{
			yyVAL.statement = &Rollback{}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:521
		{
			yyVAL.statement = &UseDB{DB: string(yyDollar[2].bytes)}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:528
		{
			yyVAL.statement = &KillConnection{ConnectionID: NumVal(yyDollar[2].bytes)}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:532
		{
			yyVAL.statement = &KillConnection{ConnectionID: NumVal(yyDollar[3].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:536
		{
			yyVAL.statement = &KillQuery{ConnectionID: NumVal(yyDollar[3].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:542
		{
			yyVAL.ddlStmt = &CreateTable{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[5].tableName, CreateDefs: yyDollar[7].createDefs, TableOptions: yyDollar[9].optKeyVals}
		}
	case 57:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line yacc.y:546
		{
			yyVAL.ddlStmt = &CreateIndex{Comments: Comments(yyDollar[2].bytes2), IndexCategory: yyDollar[3].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, Table: yyDollar[8].tableName, IndexColumns: yyDollar[10].idxColNames, IndexOption: yyDollar[12].bytes}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:552
		{
			yyVAL.ddlStmt = &AlterTable{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, AlterSpecs: yyDollar[6].alterSpecs}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:558
		{
			yyVAL.ddlStmt = &RenameTable{Comments: Comments(yyDollar[2].bytes2), OldName: yyDollar[4].tableName, NewName: yyDollar[6].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:564
		{
			yyVAL.ddlStmt = &DropTable{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName, RefOption: yyDollar[6].bytes}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:568
		{
			yyVAL.ddlStmt = &DropIndex{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[4].bytes, Table: yyDollar[6].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:574
		{
			yyVAL.showStmt = &ShowCharset{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:578
		{
			yyVAL.showStmt = &ShowCharset{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:582
		{
			yyVAL.showStmt = &ShowCollation{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:586
		{
			yyVAL.showStmt = &ShowVariables{Comments: Comments(yyDollar[2].bytes2), Scope: string(yyDollar[3].bytes), LikeOrWhere: yyDollar[5].expr}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:590
		{
			yyVAL.showStmt = &ShowStatus{Comments: Comments(yyDollar[2].bytes2), Scope: string(yyDollar[3].bytes), LikeOrWhere: yyDollar[5].expr}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:594
		{
			yyVAL.showStmt = &ShowDatabases{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:598
		{
			yyVAL.showStmt = &ShowDatabases{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:602
		{
			yyVAL.showStmt = &ShowTables{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:606
		{
			yyVAL.showStmt = &ShowTables{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:610
		{
			yyVAL.showStmt = &ShowFullTables{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:614
		{
			yyVAL.showStmt = &ShowFullTables{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:618
		{
			yyVAL.showStmt = &ShowTableStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:622
		{
			yyVAL.showStmt = &ShowTableStatus{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:626
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:630
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:634
		{
			yyVAL.showStmt = &ShowFullColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 78:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:638
		{
			yyVAL.showStmt = &ShowFullColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:642
		{
			yyVAL.showStmt = &ShowProcedureStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:646
		{
			yyVAL.showStmt = &ShowFunctionStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:650
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:654
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:658
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:662
		{
			yyVAL.showStmt = &ShowTriggers{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:666
		{
			yyVAL.showStmt = &ShowCreateDatabase{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:670
		{
			yyVAL.showStmt = &ShowCreateTable{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:674
		{
			yyVAL.showStmt = &ShowCreateView{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:678
		{
			yyVAL.showStmt = &ShowCreateProcedure{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:682
		{
			yyVAL.showStmt = &ShowCreateFunction{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:686
		{
			yyVAL.showStmt = &ShowCreateTrigger{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:690
		{
			yyVAL.showStmt = &ShowProcessList{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:694
		{
			yyVAL.showStmt = &ShowFullProcessList{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:698
		{
			yyVAL.showStmt = &ShowSlaveStatus{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:702
		{
			yyVAL.showStmt = &ShowEngines{}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:706
		{
			yyVAL.showStmt = &ShowEngines{}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:710
		{
			yyVAL.showStmt = &ShowPlugins{}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:714
		{
			yyVAL.showStmt = &ShowProfiles{}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:720
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[3].tableName}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:725
		{
			SetAllowComments(yylex, true)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:729
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			SetAllowComments(yylex, false)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:735
		{
			yyVAL.bytes2 = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:739
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:745
		{
			yyVAL.str = AST_UNION
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:749
		{
			yyVAL.str = AST_UNION_ALL
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:753
		{
			yyVAL.str = AST_SET_MINUS
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:757
		{
			yyVAL.str = AST_EXCEPT
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:761
		{
			yyVAL.str = AST_INTERSECT
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:766
		{
			yyVAL.str = ""
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:770
		{
			yyVAL.str = AST_DISTINCT
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:776
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:780
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:786
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:790
		{
			yyVAL.selectExpr = &StarExpr{TableName: bytes.ToLower(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:794
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].bytes}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:800
		{
			yyVAL.expr = yyDollar[1].boolExpr
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:804
		{
			yyVAL.expr = yyDollar[1].valExpr
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:809
		{
			yyVAL.bytes = nil
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:813
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:817
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:823
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:827
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:833
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].smTableExpr, As: yyDollar[2].bytes, Hints: yyDollar[3].indexHints}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:837
		{
			yyVAL.tableExpr = &ParenTableExpr{Expr: yyDollar[2].tableExpr}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:841
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].boolExpr}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:847
		{
			yyVAL.str = AST_JOIN
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:851
		{
			yyVAL.str = AST_STRAIGHT_JOIN
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:855
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:859
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:863
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:867
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:871
		{
			yyVAL.str = AST_JOIN
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:875
		{
			yyVAL.str = AST_CROSS_JOIN
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:879
		{
			yyVAL.str = AST_NATURAL_JOIN
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:885
		{
			yyVAL.smTableExpr = yyDollar[1].tableName
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:889
		{
			yyVAL.smTableExpr = yyDollar[1].subquery
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:895
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].bytes}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:899
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:904
		{
			yyVAL.indexHints = nil
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:908
		{
			yyVAL.indexHints = &IndexHints{Type: AST_USE, Indexes: yyDollar[4].bytes2}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:912
		{
			yyVAL.indexHints = &IndexHints{Type: AST_IGNORE, Indexes: yyDollar[4].bytes2}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:916
		{
			yyVAL.indexHints = &IndexHints{Type: AST_FORCE, Indexes: yyDollar[4].bytes2}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:922
		{
			yyVAL.bytes2 = [][]byte{yyDollar[1].bytes}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:926
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:932
		{
			yyVAL.valExprs = ValExprs{yyDollar[1].valExpr}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:936
		{
			yyVAL.valExprs = append(yyDollar[1].valExprs, yyDollar[3].valExpr)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:941
		{
			yyVAL.boolExpr = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:945
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:952
		{
			yyVAL.boolExpr = &AndExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:956
		{
			yyVAL.boolExpr = &OrExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:960
		{
			yyVAL.boolExpr = &NotExpr{Expr: yyDollar[2].boolExpr}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:964
		{
			yyVAL.boolExpr = &ParenBoolExpr{Expr: yyDollar[2].boolExpr}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:970
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: yyDollar[2].str, Right: yyDollar[3].valExpr}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:974
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_IN, Right: yyDollar[3].tuple}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:978
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_IN, Right: yyDollar[4].tuple}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:982
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_LIKE, Right: yyDollar[3].valExpr}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:986
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_LIKE, Right: yyDollar[4].valExpr}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:990
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_BETWEEN, From: yyDollar[3].valExpr, To: yyDollar[5].valExpr}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:994
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_NOT_BETWEEN, From: yyDollar[4].valExpr, To: yyDollar[6].valExpr}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:998
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NULL, Expr: yyDollar[1].valExpr}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1002
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NOT_NULL, Expr: yyDollar[1].valExpr}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1006
		{
			yyVAL.boolExpr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1012
		{
			yyVAL.str = AST_EQ
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1016
		{
			yyVAL.str = AST_LT
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1020
		{
			yyVAL.str = AST_GT
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1024
		{
			yyVAL.str = AST_LE
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1028
		{
			yyVAL.str = AST_GE
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1032
		{
			yyVAL.str = AST_NE
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1036
		{
			yyVAL.str = AST_NSE
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1042
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1046
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1052
		{
			yyVAL.values = Values{yyDollar[1].tuple}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1056
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].tuple)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1062
		{
			yyVAL.tuple = ValTuple(yyDollar[2].valExprs)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1066
		{
			yyVAL.tuple = yyDollar[1].subquery
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1072
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1078
		{
			yyVAL.valExprs = ValExprs{yyDollar[1].valExpr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1082
		{
			yyVAL.valExprs = append(yyDollar[1].valExprs, yyDollar[3].valExpr)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1088
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1092
		{
			yyVAL.valExpr = yyDollar[1].colName
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1096
		{
			yyVAL.valExpr = yyDollar[1].tuple
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1100
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITAND, Right: yyDollar[3].valExpr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1104
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITOR, Right: yyDollar[3].valExpr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1108
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITXOR, Right: yyDollar[3].valExpr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1112
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_PLUS, Right: yyDollar[3].valExpr}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1116
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MINUS, Right: yyDollar[3].valExpr}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1120
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MULT, Right: yyDollar[3].valExpr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1124
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_DIV, Right: yyDollar[3].valExpr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1128
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MOD, Right: yyDollar[3].valExpr}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1132
		{
			if num, ok := yyDollar[2].valExpr.(NumVal); ok {
				switch yyDollar[1].byt {
				case '-':
					yyVAL.valExpr = append(NumVal("-"), num...)
				case '+':
					yyVAL.valExpr = num
				default:
					yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
				}
			} else {
				yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
			}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1147
		{
			yyVAL.valExpr = yyDollar[1].funcExpr
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1151
		{
			yyVAL.valExpr = yyDollar[1].caseExpr
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1157
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1161
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: ValExprs{&ColName{Name: []byte("*")}}}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1165
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].valExprs}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1169
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Distinct: true, Exprs: yyDollar[4].valExprs}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1173
		{
			yyVAL.funcExpr = &FuncExpr{Name: []byte("locate"), Exprs: ValExprs{yyDollar[3].valExpr, yyDollar[5].valExpr}}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1177
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].valExprs}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1183
		{
			yyVAL.bytes = IF_BYTES
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1187
		{
			yyVAL.bytes = VALUES_BYTES
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1193
		{
			yyVAL.byt = AST_UPLUS
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1197
		{
			yyVAL.byt = AST_UMINUS
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1201
		{
			yyVAL.byt = AST_TILDA
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1207
		{
			yyVAL.caseExpr = &CaseExpr{Expr: yyDollar[2].valExpr, Whens: yyDollar[3].whens, Else: yyDollar[4].valExpr}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1212
		{
			yyVAL.valExpr = nil
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1216
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1222
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1226
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1232
		{
			yyVAL.when = &When{Cond: yyDollar[2].boolExpr, Val: yyDollar[4].valExpr}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1237
		{
			yyVAL.valExpr = nil
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1241
		{
			yyVAL.valExpr = yyDollar[2].valExpr
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1247
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].bytes}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1251
		{
			yyVAL.colName = &ColName{Qualifier: bytes.ToLower(yyDollar[1].bytes), Name: yyDollar[3].bytes}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1257
		{
			yyVAL.valExpr = StrVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1261
		{
			yyVAL.valExpr = NumVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1265
		{
			yyVAL.valExpr = ValArg(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1269
		{
			yyVAL.valExpr = &NullVal{}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1274
		{
			yyVAL.valExprs = nil
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1278
		{
			yyVAL.valExprs = yyDollar[3].valExprs
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1283
		{
			yyVAL.boolExpr = nil
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1287
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1292
		{
			yyVAL.orderBy = nil
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1296
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1302
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1306
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1312
		{
			yyVAL.order = &Order{Expr: yyDollar[1].valExpr, Direction: yyDollar[2].str}
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1317
		{
			yyVAL.str = ""
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1321
		{
			yyVAL.str = AST_ASC
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1325
		{
			yyVAL.str = AST_DESC
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1330
		{
			yyVAL.limit = nil
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1334
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].valExpr}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1338
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].valExpr, Rowcount: yyDollar[4].valExpr}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1342
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].valExpr, Rowcount: yyDollar[2].valExpr}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1347
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1351
		{
			yyVAL.str = AST_FOR_UPDATE
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1355
		{
			if !bytes.Equal(yyDollar[3].bytes, SHARE) {
				yylex.Error("expecting share")
				return 1
			}
			if !bytes.Equal(yyDollar[4].bytes, MODE) {
				yylex.Error("expecting mode")
				return 1
			}
			yyVAL.str = AST_SHARE_MODE
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1368
		{
			yyVAL.columns = nil
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1372
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1378
		{
			yyVAL.columns = Columns{&NonStarExpr{Expr: yyDollar[1].colName}}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1382
		{
			yyVAL.columns = append(yyVAL.columns, &NonStarExpr{Expr: yyDollar[3].colName})
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1387
		{
			yyVAL.updateExprs = nil
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1391
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1397
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1401
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1407
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].valExpr}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1412
		{
			yyVAL.empty = struct{}{}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1414
		{
			yyVAL.empty = struct{}{}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1417
		{
			yyVAL.empty = struct{}{}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1419
		{
			yyVAL.empty = struct{}{}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1422
		{
			yyVAL.str = ""
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1424
		{
			yyVAL.str = AST_IGNORE
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1427
		{
			yyVAL.bytes = nil
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1429
		{
			yyVAL.bytes = []byte("unique")
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1431
		{
			yyVAL.bytes = []byte("fulltext")
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1435
		{
			yyVAL.idxColNames = IndexColNames{yyDollar[1].idxColName}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1439
		{
			yyVAL.idxColNames = append(yyDollar[1].idxColNames, yyDollar[3].idxColName)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1445
		{
			yyVAL.idxColName = &IndexColName{ColumnName: yyDollar[1].colName, AscOrDesc: yyDollar[2].str}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1449
		{
			yyVAL.idxColName = &IndexColName{ColumnName: yyDollar[1].colName, Length: NumVal(yyDollar[3].bytes), AscOrDesc: yyDollar[5].str}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1454
		{
			yyVAL.bytes = nil
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1456
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1460
		{
			yyVAL.bytes = []byte("using btree")
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1462
		{
			yyVAL.bytes = []byte("using hash")
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1465
		{
			yyVAL.bytes = nil
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1467
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1471
		{
			yyVAL.bytes = bytes.ToLower(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1475
		{
			yyVAL.bytes = []byte("database")
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1486
		{
			yyVAL.bytes = []byte("armscii8")
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1488
		{
			yyVAL.bytes = []byte("ascii")
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1490
		{
			yyVAL.bytes = []byte("big5")
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1492
		{
			yyVAL.bytes = []byte("binary")
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1494
		{
			yyVAL.bytes = []byte("cp1250")
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1496
		{
			yyVAL.bytes = []byte("cp1251")
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1498
		{
			yyVAL.bytes = []byte("cp1256")
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1500
		{
			yyVAL.bytes = []byte("cp1257")
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1502
		{
			yyVAL.bytes = []byte("cp850")
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1504
		{
			yyVAL.bytes = []byte("cp852")
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1506
		{
			yyVAL.bytes = []byte("cp866")
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1508
		{
			yyVAL.bytes = []byte("cp932")
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1510
		{
			yyVAL.bytes = []byte("dec8")
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1512
		{
			yyVAL.bytes = []byte("eucjpms")
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1514
		{
			yyVAL.bytes = []byte("euckr")
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1516
		{
			yyVAL.bytes = []byte("gb2312")
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1518
		{
			yyVAL.bytes = []byte("gbk")
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1520
		{
			yyVAL.bytes = []byte("geostd8")
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1522
		{
			yyVAL.bytes = []byte("greek")
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1524
		{
			yyVAL.bytes = []byte("hebrew")
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1526
		{
			yyVAL.bytes = []byte("hp8")
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1528
		{
			yyVAL.bytes = []byte("keybcs2")
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1530
		{
			yyVAL.bytes = []byte("koi8r")
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1532
		{
			yyVAL.bytes = []byte("koi8u")
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1534
		{
			yyVAL.bytes = []byte("latin1")
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1536
		{
			yyVAL.bytes = []byte("latin2")
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1538
		{
			yyVAL.bytes = []byte("latin5")
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1540
		{
			yyVAL.bytes = []byte("latin7")
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1542
		{
			yyVAL.bytes = []byte("macce")
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1544
		{
			yyVAL.bytes = []byte("macroman")
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1546
		{
			yyVAL.bytes = []byte("sjis")
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1548
		{
			yyVAL.bytes = []byte("swe7")
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1550
		{
			yyVAL.bytes = []byte("tis620")
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1552
		{
			yyVAL.bytes = []byte("ucs2")
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1554
		{
			yyVAL.bytes = []byte("ujis")
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1556
		{
			yyVAL.bytes = []byte("utf16")
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1558
		{
			yyVAL.bytes = []byte("utf16le")
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1560
		{
			yyVAL.bytes = []byte("utf32")
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1562
		{
			yyVAL.bytes = []byte("utf8")
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1564
		{
			yyVAL.bytes = []byte("utf8mb4")
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1568
		{
			yyVAL.bytes = []byte("armscii8_general_ci")
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1570
		{
			yyVAL.bytes = []byte("armscii8_bin")
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1572
		{
			yyVAL.bytes = []byte("ascii_general_ci")
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1574
		{
			yyVAL.bytes = []byte("ascii_bin")
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1576
		{
			yyVAL.bytes = []byte("big5_chinese_ci")
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1578
		{
			yyVAL.bytes = []byte("big5_bin")
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1580
		{
			yyVAL.bytes = []byte("binary")
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1582
		{
			yyVAL.bytes = []byte("cp1250_general_ci")
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1584
		{
			yyVAL.bytes = []byte("cp1250_bin")
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1586
		{
			yyVAL.bytes = []byte("cp1251_chinese_ci")
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1588
		{
			yyVAL.bytes = []byte("cp1251_chinese_cs")
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1590
		{
			yyVAL.bytes = []byte("cp1251_bin")
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1592
		{
			yyVAL.bytes = []byte("cp1256_chinese_ci")
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1594
		{
			yyVAL.bytes = []byte("cp1256_bin")
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1596
		{
			yyVAL.bytes = []byte("cp1257_chinese_ci")
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1598
		{
			yyVAL.bytes = []byte("cp1257_bin")
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1600
		{
			yyVAL.bytes = []byte("cp850_chinese_ci")
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1602
		{
			yyVAL.bytes = []byte("cp850_bin")
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1604
		{
			yyVAL.bytes = []byte("cp852_chinese_ci")
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1606
		{
			yyVAL.bytes = []byte("cp852_bin")
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1608
		{
			yyVAL.bytes = []byte("cp866_chinese_ci")
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1610
		{
			yyVAL.bytes = []byte("cp866_bin")
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1612
		{
			yyVAL.bytes = []byte("cp932_japanese_ci")
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1614
		{
			yyVAL.bytes = []byte("cp932_bin")
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1616
		{
			yyVAL.bytes = []byte("dec8_swedish_ci")
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1618
		{
			yyVAL.bytes = []byte("dec8_bin")
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1620
		{
			yyVAL.bytes = []byte("eucjpms_japanese_ci")
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1622
		{
			yyVAL.bytes = []byte("eucjpms_bin")
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1624
		{
			yyVAL.bytes = []byte("euckr_korean_ci")
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1626
		{
			yyVAL.bytes = []byte("euckr_bin")
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1628
		{
			yyVAL.bytes = []byte("gb2312_chinese_ci")
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1630
		{
			yyVAL.bytes = []byte("gb2312_bin")
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1632
		{
			yyVAL.bytes = []byte("gbk_chinese_ci")
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1634
		{
			yyVAL.bytes = []byte("gbk_bin")
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1636
		{
			yyVAL.bytes = []byte("geostd8_general_ci")
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1638
		{
			yyVAL.bytes = []byte("geostd8_bin")
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1640
		{
			yyVAL.bytes = []byte("greek_general_ci")
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1642
		{
			yyVAL.bytes = []byte("greek_bin")
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1644
		{
			yyVAL.bytes = []byte("hebrew_general_ci")
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1646
		{
			yyVAL.bytes = []byte("hebrew_bin")
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1648
		{
			yyVAL.bytes = []byte("hp8_english_ci")
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1650
		{
			yyVAL.bytes = []byte("hp8_bin")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1652
		{
			yyVAL.bytes = []byte("keybcs2_general_ci")
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1654
		{
			yyVAL.bytes = []byte("keybcs2_bin")
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1656
		{
			yyVAL.bytes = []byte("koi8r_general_ci")
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1658
		{
			yyVAL.bytes = []byte("koi8r_bin")
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1660
		{
			yyVAL.bytes = []byte("koi8u_general_ci")
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1662
		{
			yyVAL.bytes = []byte("koi8u_bin")
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1664
		{
			yyVAL.bytes = []byte("latin1_general_ci")
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1666
		{
			yyVAL.bytes = []byte("latin1_general_cs")
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1668
		{
			yyVAL.bytes = []byte("latin1_bin")
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1670
		{
			yyVAL.bytes = []byte("latin2_general_ci")
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1672
		{
			yyVAL.bytes = []byte("latin2_bin")
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1674
		{
			yyVAL.bytes = []byte("latin5_turkish_ci")
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1676
		{
			yyVAL.bytes = []byte("latin5_bin")
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1678
		{
			yyVAL.bytes = []byte("latin7_general_ci")
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1680
		{
			yyVAL.bytes = []byte("latin7_general_cs")
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1682
		{
			yyVAL.bytes = []byte("latin7_bin")
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1684
		{
			yyVAL.bytes = []byte("macce_general_ci")
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1686
		{
			yyVAL.bytes = []byte("macce_bin")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1688
		{
			yyVAL.bytes = []byte("macroman_general_ci")
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1690
		{
			yyVAL.bytes = []byte("macroman_bin")
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1692
		{
			yyVAL.bytes = []byte("sjis_japanese_ci")
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1694
		{
			yyVAL.bytes = []byte("sjis_bin")
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1696
		{
			yyVAL.bytes = []byte("swe7_swedish_ci")
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1698
		{
			yyVAL.bytes = []byte("swe7_bin")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1700
		{
			yyVAL.bytes = []byte("tis620_thai_ci")
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1702
		{
			yyVAL.bytes = []byte("tis620_bin")
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1704
		{
			yyVAL.bytes = []byte("ucs2_general_ci")
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1706
		{
			yyVAL.bytes = []byte("ucs2_unicode_ci")
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1708
		{
			yyVAL.bytes = []byte("ucs2_bin")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1710
		{
			yyVAL.bytes = []byte("ujis_japanese_ci")
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1712
		{
			yyVAL.bytes = []byte("ujis_bin")
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1714
		{
			yyVAL.bytes = []byte("utf16_general_ci")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1716
		{
			yyVAL.bytes = []byte("utf16_unicode_ci")
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1718
		{
			yyVAL.bytes = []byte("utf16_bin")
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1720
		{
			yyVAL.bytes = []byte("utf16le_general_ci")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1722
		{
			yyVAL.bytes = []byte("utf16le_bin")
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1724
		{
			yyVAL.bytes = []byte("utf32_general_ci")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1726
		{
			yyVAL.bytes = []byte("utf32_unicode_ci")
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1728
		{
			yyVAL.bytes = []byte("utf32_bin")
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1730
		{
			yyVAL.bytes = []byte("utf8_general_ci")
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1732
		{
			yyVAL.bytes = []byte("utf8_unicode_ci")
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1734
		{
			yyVAL.bytes = []byte("utf8_bin")
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1736
		{
			yyVAL.bytes = []byte("utf8mb4_general_ci")
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1738
		{
			yyVAL.bytes = []byte("utf8mb4_unicode_ci")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1740
		{
			yyVAL.bytes = []byte("utf8mb4_bin")
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1745
		{
			yyVAL.bytes = []byte("read committed")
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1747
		{
			yyVAL.bytes = []byte("read uncommitted")
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1749
		{
			yyVAL.bytes = []byte("repeatable read")
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1751
		{
			yyVAL.bytes = []byte("serializable")
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1754
		{
			yyVAL.bytes = nil
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1756
		{
			yyVAL.bytes = []byte("session")
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1758
		{
			yyVAL.bytes = []byte("global")
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1761
		{
			yyVAL.expr = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1763
		{
			yyVAL.expr = &LikeExpr{Expr: yyDollar[2].valExpr}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1767
		{
			yyVAL.expr = &WhereExpr{Expr: yyDollar[2].boolExpr}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1773
		{
			yyVAL.createDefs = CreateDefinitions{yyDollar[1].createDef}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1777
		{
			yyVAL.createDefs = append(yyDollar[1].createDefs, yyDollar[3].createDef)
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1783
		{
			yyVAL.createDef = &CreateColumnDefinition{ColumnName: yyDollar[1].colName, ColumnDef: yyDollar[2].columnDef}
		}
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1787
		{
			yyVAL.createDef = &CreatePrimaryKeyDefinition{Symbol: yyDollar[1].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1791
		{
			yyVAL.createDef = &CreateIndexDefinition{Name: yyDollar[2].bytes, IndexType: yyDollar[3].bytes, IndexColumns: yyDollar[5].idxColNames}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1795
		{
			yyVAL.createDef = &CreateIndexDefinition{Name: yyDollar[2].bytes, IndexType: yyDollar[3].bytes, IndexColumns: yyDollar[5].idxColNames}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1799
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 411:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1803
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 412:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1807
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1811
		{
			yyVAL.createDef = &CreateForeignKeyDefinition{Symbol: yyDollar[1].bytes, IndexColumns: yyDollar[5].idxColNames, ReferenceDef: yyDollar[7].bytes}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1817
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsAutoIncrement: yyDollar[2].boolean,
				UniqueOrKey:     yyDollar[3].bytes,
				ColumnComment:   yyDollar[4].valExpr,
				ColumnFormat:    yyDollar[5].bytes,
				ColumnStorage:   yyDollar[6].bytes,
				ReferenceDef:    yyDollar[7].bytes}
		}
	case 415:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1827
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[2].boolean,
				IsAutoIncrement: yyDollar[3].boolean,
				UniqueOrKey:     yyDollar[4].bytes,
				ColumnComment:   yyDollar[5].valExpr,
				ColumnFormat:    yyDollar[6].bytes,
				ColumnStorage:   yyDollar[7].bytes,
				ReferenceDef:    yyDollar[8].bytes}
		}
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1838
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				DefaultValue:    yyDollar[2].valExpr,
				IsAutoIncrement: yyDollar[3].boolean,
				UniqueOrKey:     yyDollar[4].bytes,
				ColumnComment:   yyDollar[5].valExpr,
				ColumnFormat:    yyDollar[6].bytes,
				ColumnStorage:   yyDollar[7].bytes,
				ReferenceDef:    yyDollar[8].bytes}
		}
	case 417:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:1849
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[2].boolean,
				DefaultValue:    yyDollar[3].valExpr,
				IsAutoIncrement: yyDollar[4].boolean,
				UniqueOrKey:     yyDollar[5].bytes,
				ColumnComment:   yyDollar[6].valExpr,
				ColumnFormat:    yyDollar[7].bytes,
				ColumnStorage:   yyDollar[8].bytes,
				ReferenceDef:    yyDollar[9].bytes}
		}
	case 418:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:1861
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[3].boolean,
				DefaultValue:    yyDollar[2].valExpr,
				IsAutoIncrement: yyDollar[4].boolean,
				UniqueOrKey:     yyDollar[5].bytes,
				ColumnComment:   yyDollar[6].valExpr,
				ColumnFormat:    yyDollar[7].bytes,
				ColumnStorage:   yyDollar[8].bytes,
				ReferenceDef:    yyDollar[9].bytes}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1875
		{
			yyVAL.dataType = &DataType{TypeName: "bit"}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1879
		{
			yyVAL.dataType = &DataType{TypeName: "bit(" + string(yyDollar[3].bytes) + ")"}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1883
		{
			yyVAL.dataType = &DataType{TypeName: "tinyint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1887
		{
			yyVAL.dataType = &DataType{TypeName: "tinyint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1891
		{
			yyVAL.dataType = &DataType{TypeName: "bool"}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1895
		{
			yyVAL.dataType = &DataType{TypeName: "bool"}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1899
		{
			yyVAL.dataType = &DataType{TypeName: "smallint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1903
		{
			yyVAL.dataType = &DataType{TypeName: "smallint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1907
		{
			yyVAL.dataType = &DataType{TypeName: "mediumint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1911
		{
			yyVAL.dataType = &DataType{TypeName: "mediumint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1915
		{
			yyVAL.dataType = &DataType{TypeName: "int", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 430:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1919
		{
			yyVAL.dataType = &DataType{TypeName: "int(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1923
		{
			yyVAL.dataType = &DataType{TypeName: "integer", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1927
		{
			yyVAL.dataType = &DataType{TypeName: "integer(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1931
		{
			yyVAL.dataType = &DataType{TypeName: "bigint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1935
		{
			yyVAL.dataType = &DataType{TypeName: "bigint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1939
		{
			yyVAL.dataType = &DataType{TypeName: "real", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 436:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1943
		{
			yyVAL.dataType = &DataType{TypeName: "real(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1947
		{
			yyVAL.dataType = &DataType{TypeName: "double", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 438:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1951
		{
			yyVAL.dataType = &DataType{TypeName: "double(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1955
		{
			yyVAL.dataType = &DataType{TypeName: "float", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 440:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1959
		{
			yyVAL.dataType = &DataType{TypeName: "float(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1963
		{
			yyVAL.dataType = &DataType{TypeName: "decimal", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1967
		{
			yyVAL.dataType = &DataType{TypeName: "decimal(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 443:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1971
		{
			yyVAL.dataType = &DataType{TypeName: "decimal(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1975
		{
			yyVAL.dataType = &DataType{TypeName: "date"}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1979
		{
			yyVAL.dataType = &DataType{TypeName: "time"}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1983
		{
			yyVAL.dataType = &DataType{TypeName: "time(" + string(yyDollar[3].bytes) + ")"}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1987
		{
			yyVAL.dataType = &DataType{TypeName: "timestamp"}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1991
		{
			yyVAL.dataType = &DataType{TypeName: "timestamp(" + string(yyDollar[3].bytes) + ")"}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1995
		{
			yyVAL.dataType = &DataType{TypeName: "datetime"}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1999
		{
			yyVAL.dataType = &DataType{TypeName: "datetime(" + string(yyDollar[3].bytes) + ")"}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2003
		{
			yyVAL.dataType = &DataType{TypeName: "year"}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2007
		{
			yyVAL.dataType = &DataType{TypeName: "char", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2011
		{
			yyVAL.dataType = &DataType{TypeName: "nchar", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2015
		{
			yyVAL.dataType = &DataType{TypeName: "char(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 455:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2019
		{
			yyVAL.dataType = &DataType{TypeName: "nchar(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 456:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2023
		{
			yyVAL.dataType = &DataType{TypeName: "varchar(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 457:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2027
		{
			yyVAL.dataType = &DataType{TypeName: "nvarchar(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2031
		{
			yyVAL.dataType = &DataType{TypeName: "binary"}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2035
		{
			yyVAL.dataType = &DataType{TypeName: "binary(" + string(yyDollar[3].bytes) + ")"}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2039
		{
			yyVAL.dataType = &DataType{TypeName: "varbinary(" + string(yyDollar[3].bytes) + ")"}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2043
		{
			yyVAL.dataType = &DataType{TypeName: "tinyblob"}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2047
		{
			yyVAL.dataType = &DataType{TypeName: "blob"}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2051
		{
			yyVAL.dataType = &DataType{TypeName: "mediumblob"}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2055
		{
			yyVAL.dataType = &DataType{TypeName: "longblob"}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2059
		{
			yyVAL.dataType = &DataType{TypeName: "tinytext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2063
		{
			yyVAL.dataType = &DataType{TypeName: "text", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2067
		{
			yyVAL.dataType = &DataType{TypeName: "mediumtext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2071
		{
			yyVAL.dataType = &DataType{TypeName: "longtext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2075
		{
			yyVAL.dataType = &DataType{TypeName: "enum(" + String(yyDollar[3].valExprs) + ")", Charset: yyDollar[5].bytes, Collate: yyDollar[6].bytes}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2079
		{
			yyVAL.dataType = &DataType{TypeName: "set(" + String(yyDollar[3].valExprs) + ")", Charset: yyDollar[5].bytes, Collate: yyDollar[6].bytes}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2085
		{
			yyVAL.boolean = false
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2087
		{
			yyVAL.boolean = true
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2091
		{
			yyVAL.valExpr = yyDollar[2].valExpr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2094
		{
			yyVAL.boolean = false
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2096
		{
			yyVAL.boolean = true
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2099
		{
			yyVAL.bytes = nil
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2101
		{
			yyVAL.bytes = []byte("unique key")
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2103
		{
			yyVAL.bytes = []byte("unique key")
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2105
		{
			yyVAL.bytes = []byte("primary key")
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2107
		{
			yyVAL.bytes = []byte("primary key")
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2110
		{
			yyVAL.valExpr = nil
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2112
		{
			yyVAL.valExpr = StrVal(yyDollar[2].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2117
		{
			yyVAL.bytes = nil
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2119
		{
			yyVAL.bytes = []byte("fixed")
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2121
		{
			yyVAL.bytes = []byte("dynamic")
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2123
		{
			yyVAL.bytes = []byte("default")
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2126
		{
			yyVAL.bytes = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2128
		{
			yyVAL.bytes = []byte("disk")
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2130
		{
			yyVAL.bytes = []byte("memory")
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2132
		{
			yyVAL.bytes = []byte("default")
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2135
		{
			yyVAL.bytes = nil
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2137
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 493:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2141
		{
			yyVAL.bytes = []byte("references " + String(yyDollar[2].tableName) + "(" + String(yyDollar[4].idxColNames) + ")" + string(yyDollar[6].bytes) + string(yyDollar[7].bytes))
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2144
		{
			yyVAL.bytes = nil
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2146
		{
			yyVAL.bytes = []byte("match full")
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2148
		{
			yyVAL.bytes = []byte("match partial")
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2150
		{
			yyVAL.bytes = []byte("match simple")
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2153
		{
			yyVAL.bytes = nil
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2155
		{
			yyVAL.bytes = []byte("on delete " + string(yyDollar[3].bytes))
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2157
		{
			yyVAL.bytes = []byte("on update " + string(yyDollar[3].bytes))
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2159
		{
			yyVAL.bytes = []byte("on update " + string(yyDollar[3].bytes) + " on delete " + string(yyDollar[6].bytes))
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2161
		{
			yyVAL.bytes = []byte("on update " + string(yyDollar[6].bytes) + " on delete " + string(yyDollar[3].bytes))
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2164
		{
			yyVAL.bytes = nil
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2166
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2170
		{
			yyVAL.bytes = []byte("restrict")
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2172
		{
			yyVAL.bytes = []byte("cascade")
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2174
		{
			yyVAL.bytes = []byte("set null")
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2176
		{
			yyVAL.bytes = []byte("no action")
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2179
		{
			yyVAL.boolean = false
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2181
		{
			yyVAL.boolean = true
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2184
		{
			yyVAL.boolean = false
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2186
		{
			yyVAL.boolean = true
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2189
		{
			yyVAL.boolean = false
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2191
		{
			yyVAL.boolean = true
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2194
		{
			yyVAL.bytes = nil
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2196
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2199
		{
			yyVAL.bytes = nil
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2201
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2204
		{
			yyVAL.bytes = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2206
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2209
		{
			yyVAL.optKeyVals = nil
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2211
		{
			yyVAL.optKeyVals = yyDollar[1].optKeyVals
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2215
		{
			yyVAL.optKeyVals = OptionKeyValues{yyDollar[1].optKeyVal}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2217
		{
			yyVAL.optKeyVals = append(yyDollar[1].optKeyVals, yyDollar[2].optKeyVal)
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2221
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "engine", Value: string(yyDollar[3].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2225
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "auto_increment", Value: string(yyDollar[3].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2229
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[5].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2233
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[4].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2237
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[4].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2241
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[3].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2245
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "collate", Value: string(yyDollar[4].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2249
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "collate", Value: string(yyDollar[3].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2253
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "comment", Value: String(StrVal(yyDollar[3].bytes))}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2258
		{
			yyVAL.alterSpecs = nil
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2260
		{
			yyVAL.alterSpecs = yyDollar[1].alterSpecs
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2264
		{
			yyVAL.alterSpecs = AlterSpecifications{yyDollar[1].alterSpec}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2266
		{
			yyVAL.alterSpecs = append(yyDollar[1].alterSpecs, yyDollar[3].alterSpec)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2270
		{
			yyVAL.alterSpec = yyDollar[1].optKeyVals
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2274
		{
			yyVAL.alterSpec = &AddOrModifyColumnSpec{Action: "add", ColumnName: yyDollar[3].colName, ColumnDef: yyDollar[4].columnDef, FirstOrAfterColumn: yyDollar[5].fiOAfCol}
		}
	case 540:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2278
		{
			yyVAL.alterSpec = &AddIndexSpec{Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 541:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2282
		{
			yyVAL.alterSpec = &AddIndexSpec{Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 542:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2286
		{
			yyVAL.alterSpec = &AddPrimaryKeySpec{Symbol: yyDollar[2].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2290
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 544:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:2294
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, IndexColumns: yyDollar[8].idxColNames}
		}
	case 545:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:2298
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, IndexColumns: yyDollar[8].idxColNames}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2302
		{
			yyVAL.alterSpec = &AddForeignKeySpec{Symbol: yyDollar[2].bytes, IndexColumns: yyDollar[6].idxColNames, ReferenceDef: yyDollar[8].bytes}
		}
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2306
		{
			yyVAL.alterSpec = &ChangeColumnSpec{OldColumnName: yyDollar[3].colName, ColumnName: yyDollar[4].colName, ColumnDef: yyDollar[5].columnDef, FirstOrAfterColumn: yyDollar[6].fiOAfCol}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2310
		{
			yyVAL.alterSpec = &AddOrModifyColumnSpec{Action: "modify", ColumnName: yyDollar[3].colName, ColumnDef: yyDollar[4].columnDef, FirstOrAfterColumn: yyDollar[5].fiOAfCol}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2314
		{
			yyVAL.alterSpec = &DropColumnSpec{ColumnName: yyDollar[3].colName}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2318
		{
			yyVAL.alterSpec = &DropPrimaryKeySpec{}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2322
		{
			yyVAL.alterSpec = &DropIndexSpec{Name: yyDollar[3].bytes}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2326
		{
			yyVAL.alterSpec = &DropIndexSpec{Name: yyDollar[3].bytes}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2330
		{
			yyVAL.alterSpec = &DropForeignKeySpec{Name: yyDollar[4].bytes}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2334
		{
			yyVAL.alterSpec = &DisableKeysSpec{}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2338
		{
			yyVAL.alterSpec = &EnableKeysSpec{}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2343
		{
			yyVAL.fiOAfCol = nil
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2345
		{
			yyVAL.fiOAfCol = yyDollar[1].fiOAfCol
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2349
		{
			yyVAL.fiOAfCol = &FirstOrAfterColumn{FirstOrAfter: "first", ColumnName: yyDollar[2].colName}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2353
		{
			yyVAL.fiOAfCol = &FirstOrAfterColumn{FirstOrAfter: "after", ColumnName: yyDollar[2].colName}
		}
	}
	goto yystack /* stack new state and value */
}
