//line yacc.y:2

// Copyright 2012, Google Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Copyright 2016 The kingshard Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"): you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// The MIT License (MIT)

// Copyright (c) 2016 Jerry Bai

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package sqlparser

import __yyfmt__ "fmt"

//line yacc.y:42
import "bytes"

// SetParseTree to build ast.
func SetParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

// SetAllowComments set allow comments.
func SetAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

// ForceEOF force EOF.
func ForceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

var (
	SHARE        = []byte("share")
	MODE         = []byte("mode")
	IF_BYTES     = []byte("if")
	VALUES_BYTES = []byte("values")
)

//line yacc.y:70
type yySymType struct {
	yys         int
	empty       struct{}
	statement   Statement
	selStmt     SelectStatement
	setStmt     SetStatement
	showStmt    ShowStatement
	ddlStmt     DDLStatement
	byt         byte
	bytes       []byte
	bytes2      [][]byte
	str         string
	boolean     bool
	selectExprs SelectExprs
	selectExpr  SelectExpr
	columns     Columns
	colName     *ColName
	tableExprs  TableExprs
	tableExpr   TableExpr
	smTableExpr SimpleTableExpr
	tableName   *TableName
	indexHints  *IndexHints
	expr        Expr
	boolExpr    BoolExpr
	valExpr     ValExpr
	tuple       Tuple
	valExprs    ValExprs
	values      Values
	subquery    *Subquery
	caseExpr    *CaseExpr
	funcExpr    *FuncExpr
	whens       []*When
	when        *When
	orderBy     OrderBy
	order       *Order
	limit       *Limit
	insRows     InsertRows
	updateExprs UpdateExprs
	updateExpr  *UpdateExpr
	createDef   CreateDefinition
	createDefs  CreateDefinitions
	columnDef   *ColumnDefinition
	dataType    *DataType
	idxColName  *IndexColName
	idxColNames IndexColNames
	optKeyVal   *OptionKeyValue
	optKeyVals  OptionKeyValues
	fiOAfCol    *FirstOrAfterColumn
	alterSpecs  AlterSpecifications
	alterSpec   AlterSpecification
}

const LEX_ERROR = 57346
const SELECT = 57347
const INSERT = 57348
const UPDATE = 57349
const DELETE = 57350
const FROM = 57351
const WHERE = 57352
const GROUP = 57353
const HAVING = 57354
const ORDER = 57355
const BY = 57356
const LIMIT = 57357
const FOR = 57358
const ALL = 57359
const DISTINCT = 57360
const AS = 57361
const EXISTS = 57362
const NULL = 57363
const ASC = 57364
const DESC = 57365
const VALUES = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const SHOW = 57373
const EXPLAIN = 57374
const DESCRIBE = 57375
const ID = 57376
const STRING = 57377
const NUMBER = 57378
const VALUE_ARG = 57379
const COMMENTS = 57380
const UNION = 57381
const MINUS = 57382
const EXCEPT = 57383
const INTERSECT = 57384
const FULL = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const OR = 57397
const AND = 57398
const NOT = 57399
const BETWEEN = 57400
const CASE = 57401
const WHEN = 57402
const THEN = 57403
const ELSE = 57404
const LE = 57405
const GE = 57406
const NE = 57407
const NULL_SAFE_EQUAL = 57408
const IS = 57409
const LIKE = 57410
const IN = 57411
const UNARY = 57412
const END = 57413
const BEGIN = 57414
const START = 57415
const TRANSACTION = 57416
const COMMIT = 57417
const ROLLBACK = 57418
const ISOLATION = 57419
const LEVEL = 57420
const READ = 57421
const COMMITTED = 57422
const UNCOMMITTED = 57423
const REPEATABLE = 57424
const SERIALIZABLE = 57425
const NAMES = 57426
const CHARSET = 57427
const CHARACTER = 57428
const COLLATION = 57429
const ARMSCII8 = 57430
const ASCII = 57431
const BIG5 = 57432
const BINARY = 57433
const CP1250 = 57434
const CP1251 = 57435
const CP1256 = 57436
const CP1257 = 57437
const CP850 = 57438
const CP852 = 57439
const CP866 = 57440
const CP932 = 57441
const DEC8 = 57442
const EUCJPMS = 57443
const EUCKR = 57444
const GB2312 = 57445
const GBK = 57446
const GEOSTD8 = 57447
const GREEK = 57448
const HEBREW = 57449
const HP8 = 57450
const KEYBCS2 = 57451
const KOI8R = 57452
const KOI8U = 57453
const LATIN1 = 57454
const LATIN2 = 57455
const LATIN5 = 57456
const LATIN7 = 57457
const MACCE = 57458
const MACROMAN = 57459
const SJIS = 57460
const SWE7 = 57461
const TIS620 = 57462
const UCS2 = 57463
const UJIS = 57464
const UTF16 = 57465
const UTF16LE = 57466
const UTF32 = 57467
const UTF8 = 57468
const UTF8MB4 = 57469
const ARMSCII8_GENERAL_CI = 57470
const ARMSCII8_BIN = 57471
const ASCII_GENERAL_CI = 57472
const ASCII_BIN = 57473
const BIG5_CHINESE_CI = 57474
const BIG5_BIN = 57475
const CP1250_GENERAL_CI = 57476
const CP1250_BIN = 57477
const CP1251_GENERAL_CI = 57478
const CP1251_GENERAL_CS = 57479
const CP1251_BIN = 57480
const CP1256_GENERAL_CI = 57481
const CP1256_BIN = 57482
const CP1257_GENERAL_CI = 57483
const CP1257_BIN = 57484
const CP850_GENERAL_CI = 57485
const CP850_BIN = 57486
const CP852_GENERAL_CI = 57487
const CP852_BIN = 57488
const CP866_GENERAL_CI = 57489
const CP866_BIN = 57490
const CP932_JAPANESE_CI = 57491
const CP932_BIN = 57492
const DEC8_SWEDISH_CI = 57493
const DEC8_BIN = 57494
const EUCJPMS_JAPANESE_CI = 57495
const EUCJPMS_BIN = 57496
const EUCKR_KOREAN_CI = 57497
const EUCKR_BIN = 57498
const GB2312_CHINESE_CI = 57499
const GB2312_BIN = 57500
const GBK_CHINESE_CI = 57501
const GBK_BIN = 57502
const GEOSTD8_GENERAL_CI = 57503
const GEOSTD8_BIN = 57504
const GREEK_GENERAL_CI = 57505
const GREEK_BIN = 57506
const HEBREW_GENERAL_CI = 57507
const HEBREW_BIN = 57508
const HP8_ENGLISH_CI = 57509
const HP8_BIN = 57510
const KEYBCS2_GENERAL_CI = 57511
const KEYBCS2_BIN = 57512
const KOI8R_GENERAL_CI = 57513
const KOI8R_BIN = 57514
const KOI8U_GENERAL_CI = 57515
const KOI8U_BIN = 57516
const LATIN1_GENERAL_CI = 57517
const LATIN1_GENERAL_CS = 57518
const LATIN1_BIN = 57519
const LATIN2_GENERAL_CI = 57520
const LATIN2_BIN = 57521
const LATIN5_TURKISH_CI = 57522
const LATIN5_BIN = 57523
const LATIN7_GENERAL_CI = 57524
const LATIN7_GENERAL_CS = 57525
const LATIN7_BIN = 57526
const MACCE_GENERAL_CI = 57527
const MACCE_BIN = 57528
const MACROMAN_GENERAL_CI = 57529
const MACROMAN_BIN = 57530
const SJIS_JAPANESE_CI = 57531
const SJIS_BIN = 57532
const SWE7_SWEDISH_CI = 57533
const SWE7_BIN = 57534
const TIS620_THAI_CI = 57535
const TIS620_BIN = 57536
const UCS2_GENERAL_CI = 57537
const UCS2_UNICODE_CI = 57538
const UCS2_BIN = 57539
const UJIS_JAPANESE_CI = 57540
const UJIS_BIN = 57541
const UTF16_GENERAL_CI = 57542
const UTF16_UNICODE_CI = 57543
const UTF16_BIN = 57544
const UTF16LE_GENERAL_CI = 57545
const UTF16LE_BIN = 57546
const UTF32_GENERAL_CI = 57547
const UTF32_UNICODE_CI = 57548
const UTF32_BIN = 57549
const UTF8_GENERAL_CI = 57550
const UTF8_UNICODE_CI = 57551
const UTF8_BIN = 57552
const UTF8MB4_GENERAL_CI = 57553
const UTF8MB4_UNICODE_CI = 57554
const UTF8MB4_BIN = 57555
const SESSION = 57556
const GLOBAL = 57557
const VARIABLES = 57558
const STATUS = 57559
const DATABASES = 57560
const SCHEMAS = 57561
const DATABASE = 57562
const STORAGE = 57563
const ENGINES = 57564
const TABLES = 57565
const COLUMNS = 57566
const FIELDS = 57567
const PROCEDURE = 57568
const FUNCTION = 57569
const INDEXES = 57570
const KEYS = 57571
const TRIGGER = 57572
const TRIGGERS = 57573
const PLUGINS = 57574
const PROCESSLIST = 57575
const SLAVE = 57576
const PROFILES = 57577
const REPLACE = 57578
const ADMIN = 57579
const HELP = 57580
const OFFSET = 57581
const COLLATE = 57582
const CREATE = 57583
const ALTER = 57584
const DROP = 57585
const RENAME = 57586
const TABLE = 57587
const INDEX = 57588
const VIEW = 57589
const TO = 57590
const IGNORE = 57591
const IF = 57592
const UNIQUE = 57593
const FULLTEXT = 57594
const USING = 57595
const BTREE = 57596
const HASH = 57597
const BIT = 57598
const TINYINT = 57599
const SMALLINT = 57600
const MEDIUMINT = 57601
const INT = 57602
const INTEGER = 57603
const BIGINT = 57604
const REAL = 57605
const DOUBLE = 57606
const FLOAT = 57607
const DECIMAL = 57608
const DATE = 57609
const TIME = 57610
const TIMESTAMP = 57611
const DATETIME = 57612
const YEAR = 57613
const CHAR = 57614
const VARCHAR = 57615
const TINYTEXT = 57616
const TEXT = 57617
const MEDIUMTEXT = 57618
const LONGTEXT = 57619
const VARBINARY = 57620
const TINYBLOB = 57621
const BLOB = 57622
const MEDIUMBLOB = 57623
const LONGBLOB = 57624
const ENUM = 57625
const AUTO_INCREMENT = 57626
const ENGINE = 57627
const PRIMARY = 57628
const REFERENCES = 57629
const COMMENT = 57630
const COLUMN_FORMAT = 57631
const FIXED = 57632
const DYNAMIC = 57633
const DISK = 57634
const MEMORY = 57635
const MATCH = 57636
const PARTIAL = 57637
const SIMPLE = 57638
const RESTRICT = 57639
const CASCADE = 57640
const NO = 57641
const ACTION = 57642
const UNSIGNED = 57643
const ZEROFILL = 57644
const CONSTRAINT = 57645
const FOREIGN = 57646
const FIRST = 57647
const AFTER = 57648
const ADD = 57649
const COLUMN = 57650
const CHANGE = 57651
const MODIFY = 57652
const ENABLE = 57653
const DISABLE = 57654
const KILL = 57655
const QUERY = 57656
const CONNECTION = 57657
const POSITION = 57658

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"NULL",
	"ASC",
	"DESC",
	"VALUES",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"SHOW",
	"EXPLAIN",
	"DESCRIBE",
	"ID",
	"STRING",
	"NUMBER",
	"VALUE_ARG",
	"COMMENTS",
	"'('",
	"'~'",
	"UNION",
	"MINUS",
	"EXCEPT",
	"INTERSECT",
	"','",
	"FULL",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"OR",
	"AND",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"IN",
	"'|'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'.'",
	"UNARY",
	"END",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"ISOLATION",
	"LEVEL",
	"READ",
	"COMMITTED",
	"UNCOMMITTED",
	"REPEATABLE",
	"SERIALIZABLE",
	"NAMES",
	"CHARSET",
	"CHARACTER",
	"COLLATION",
	"ARMSCII8",
	"ASCII",
	"BIG5",
	"BINARY",
	"CP1250",
	"CP1251",
	"CP1256",
	"CP1257",
	"CP850",
	"CP852",
	"CP866",
	"CP932",
	"DEC8",
	"EUCJPMS",
	"EUCKR",
	"GB2312",
	"GBK",
	"GEOSTD8",
	"GREEK",
	"HEBREW",
	"HP8",
	"KEYBCS2",
	"KOI8R",
	"KOI8U",
	"LATIN1",
	"LATIN2",
	"LATIN5",
	"LATIN7",
	"MACCE",
	"MACROMAN",
	"SJIS",
	"SWE7",
	"TIS620",
	"UCS2",
	"UJIS",
	"UTF16",
	"UTF16LE",
	"UTF32",
	"UTF8",
	"UTF8MB4",
	"ARMSCII8_GENERAL_CI",
	"ARMSCII8_BIN",
	"ASCII_GENERAL_CI",
	"ASCII_BIN",
	"BIG5_CHINESE_CI",
	"BIG5_BIN",
	"CP1250_GENERAL_CI",
	"CP1250_BIN",
	"CP1251_GENERAL_CI",
	"CP1251_GENERAL_CS",
	"CP1251_BIN",
	"CP1256_GENERAL_CI",
	"CP1256_BIN",
	"CP1257_GENERAL_CI",
	"CP1257_BIN",
	"CP850_GENERAL_CI",
	"CP850_BIN",
	"CP852_GENERAL_CI",
	"CP852_BIN",
	"CP866_GENERAL_CI",
	"CP866_BIN",
	"CP932_JAPANESE_CI",
	"CP932_BIN",
	"DEC8_SWEDISH_CI",
	"DEC8_BIN",
	"EUCJPMS_JAPANESE_CI",
	"EUCJPMS_BIN",
	"EUCKR_KOREAN_CI",
	"EUCKR_BIN",
	"GB2312_CHINESE_CI",
	"GB2312_BIN",
	"GBK_CHINESE_CI",
	"GBK_BIN",
	"GEOSTD8_GENERAL_CI",
	"GEOSTD8_BIN",
	"GREEK_GENERAL_CI",
	"GREEK_BIN",
	"HEBREW_GENERAL_CI",
	"HEBREW_BIN",
	"HP8_ENGLISH_CI",
	"HP8_BIN",
	"KEYBCS2_GENERAL_CI",
	"KEYBCS2_BIN",
	"KOI8R_GENERAL_CI",
	"KOI8R_BIN",
	"KOI8U_GENERAL_CI",
	"KOI8U_BIN",
	"LATIN1_GENERAL_CI",
	"LATIN1_GENERAL_CS",
	"LATIN1_BIN",
	"LATIN2_GENERAL_CI",
	"LATIN2_BIN",
	"LATIN5_TURKISH_CI",
	"LATIN5_BIN",
	"LATIN7_GENERAL_CI",
	"LATIN7_GENERAL_CS",
	"LATIN7_BIN",
	"MACCE_GENERAL_CI",
	"MACCE_BIN",
	"MACROMAN_GENERAL_CI",
	"MACROMAN_BIN",
	"SJIS_JAPANESE_CI",
	"SJIS_BIN",
	"SWE7_SWEDISH_CI",
	"SWE7_BIN",
	"TIS620_THAI_CI",
	"TIS620_BIN",
	"UCS2_GENERAL_CI",
	"UCS2_UNICODE_CI",
	"UCS2_BIN",
	"UJIS_JAPANESE_CI",
	"UJIS_BIN",
	"UTF16_GENERAL_CI",
	"UTF16_UNICODE_CI",
	"UTF16_BIN",
	"UTF16LE_GENERAL_CI",
	"UTF16LE_BIN",
	"UTF32_GENERAL_CI",
	"UTF32_UNICODE_CI",
	"UTF32_BIN",
	"UTF8_GENERAL_CI",
	"UTF8_UNICODE_CI",
	"UTF8_BIN",
	"UTF8MB4_GENERAL_CI",
	"UTF8MB4_UNICODE_CI",
	"UTF8MB4_BIN",
	"SESSION",
	"GLOBAL",
	"VARIABLES",
	"STATUS",
	"DATABASES",
	"SCHEMAS",
	"DATABASE",
	"STORAGE",
	"ENGINES",
	"TABLES",
	"COLUMNS",
	"FIELDS",
	"PROCEDURE",
	"FUNCTION",
	"INDEXES",
	"KEYS",
	"TRIGGER",
	"TRIGGERS",
	"PLUGINS",
	"PROCESSLIST",
	"SLAVE",
	"PROFILES",
	"REPLACE",
	"ADMIN",
	"HELP",
	"OFFSET",
	"COLLATE",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"FULLTEXT",
	"USING",
	"BTREE",
	"HASH",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"REAL",
	"DOUBLE",
	"FLOAT",
	"DECIMAL",
	"DATE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"TINYTEXT",
	"TEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"VARBINARY",
	"TINYBLOB",
	"BLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"ENUM",
	"AUTO_INCREMENT",
	"ENGINE",
	"PRIMARY",
	"REFERENCES",
	"COMMENT",
	"COLUMN_FORMAT",
	"FIXED",
	"DYNAMIC",
	"DISK",
	"MEMORY",
	"MATCH",
	"PARTIAL",
	"SIMPLE",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"UNSIGNED",
	"ZEROFILL",
	"CONSTRAINT",
	"FOREIGN",
	"FIRST",
	"AFTER",
	"ADD",
	"COLUMN",
	"CHANGE",
	"MODIFY",
	"ENABLE",
	"DISABLE",
	"KILL",
	"QUERY",
	"CONNECTION",
	"POSITION",
	"')'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 557
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 1636

var yyAct = [...]int{

	155, 447, 1050, 117, 881, 172, 144, 742, 781, 639,
	1013, 825, 898, 836, 165, 749, 1051, 579, 750, 573,
	751, 437, 258, 860, 870, 503, 292, 145, 926, 414,
	880, 883, 429, 430, 146, 568, 505, 156, 417, 353,
	78, 394, 903, 139, 969, 341, 293, 3, 1043, 1032,
	339, 390, 215, 948, 154, 267, 266, 164, 43, 44,
	45, 46, 121, 948, 440, 1030, 948, 170, 151, 152,
	153, 1029, 296, 159, 1028, 932, 931, 61, 275, 274,
	277, 278, 279, 280, 281, 276, 948, 948, 757, 85,
	930, 169, 929, 925, 948, 162, 924, 923, 948, 213,
	150, 154, 917, 948, 164, 948, 916, 948, 915, 948,
	948, 157, 158, 388, 138, 151, 152, 153, 168, 143,
	159, 948, 948, 914, 913, 912, 248, 249, 948, 965,
	911, 965, 257, 254, 965, 948, 442, 441, 263, 937,
	142, 937, 162, 922, 578, 384, 501, 384, 476, 384,
	22, 218, 519, 221, 222, 223, 518, 384, 157, 158,
	136, 885, 886, 837, 777, 150, 154, 623, 612, 164,
	775, 759, 537, 82, 1087, 970, 904, 308, 167, 170,
	151, 152, 153, 1042, 143, 159, 289, 291, 297, 752,
	426, 507, 773, 456, 457, 458, 459, 460, 170, 461,
	462, 256, 622, 611, 771, 142, 450, 162, 251, 769,
	510, 511, 124, 755, 523, 1090, 736, 120, 126, 127,
	624, 613, 348, 157, 158, 130, 131, 735, 315, 550,
	552, 734, 1054, 252, 322, 323, 516, 767, 326, 327,
	328, 329, 330, 331, 332, 333, 334, 335, 169, 425,
	337, 253, 129, 346, 344, 927, 765, 347, 763, 349,
	761, 312, 338, 758, 135, 360, 362, 310, 80, 309,
	53, 52, 313, 314, 1017, 168, 81, 116, 316, 526,
	1014, 54, 320, 525, 55, 324, 325, 827, 219, 220,
	783, 443, 753, 244, 434, 233, 79, 357, 163, 755,
	170, 232, 753, 229, 366, 169, 861, 567, 362, 486,
	363, 364, 487, 488, 305, 80, 397, 225, 226, 227,
	77, 401, 402, 403, 782, 404, 389, 228, 392, 382,
	562, 754, 168, 264, 738, 439, 438, 565, 566, 444,
	1085, 754, 361, 169, 169, 163, 812, 467, 79, 385,
	1071, 307, 445, 1070, 265, 452, 245, 420, 431, 807,
	432, 433, 436, 435, 160, 387, 79, 276, 400, 1011,
	168, 422, 79, 1067, 1066, 405, 406, 407, 408, 409,
	80, 1045, 410, 411, 416, 1044, 530, 529, 419, 413,
	1038, 783, 1037, 357, 1009, 466, 1004, 1003, 266, 80,
	637, 636, 470, 453, 279, 280, 281, 276, 1000, 999,
	163, 160, 635, 169, 535, 998, 967, 478, 966, 534,
	533, 964, 947, 528, 169, 506, 939, 494, 938, 527,
	921, 577, 560, 500, 480, 482, 477, 496, 551, 484,
	168, 759, 306, 495, 383, 150, 154, 759, 522, 164,
	493, 504, 513, 499, 489, 490, 491, 492, 419, 170,
	151, 152, 153, 395, 143, 159, 84, 83, 517, 759,
	515, 440, 22, 26, 27, 28, 160, 345, 554, 1091,
	1092, 759, 508, 396, 752, 142, 759, 162, 521, 448,
	449, 451, 357, 357, 540, 541, 23, 80, 24, 30,
	25, 80, 169, 157, 158, 170, 524, 614, 615, 616,
	520, 1052, 1053, 617, 759, 169, 620, 621, 571, 169,
	169, 169, 39, 629, 630, 358, 826, 508, 632, 576,
	570, 796, 514, 759, 22, 759, 1097, 759, 79, 638,
	759, 531, 619, 442, 441, 618, 625, 626, 627, 80,
	154, 1015, 1016, 164, 35, 36, 217, 37, 38, 119,
	166, 828, 369, 170, 151, 152, 153, 80, 296, 159,
	752, 154, 1089, 80, 164, 368, 367, 267, 266, 169,
	752, 93, 92, 91, 170, 151, 152, 153, 569, 296,
	159, 162, 509, 806, 372, 351, 321, 217, 733, 22,
	26, 27, 28, 395, 748, 483, 504, 157, 158, 304,
	745, 747, 162, 794, 787, 788, 789, 790, 732, 548,
	216, 569, 547, 23, 805, 24, 169, 25, 157, 158,
	317, 217, 811, 373, 128, 546, 304, 801, 920, 267,
	266, 813, 238, 815, 810, 564, 814, 21, 241, 242,
	468, 919, 243, 809, 277, 278, 279, 280, 281, 276,
	80, 216, 90, 544, 918, 384, 1081, 239, 545, 240,
	224, 217, 760, 762, 764, 766, 768, 770, 772, 774,
	776, 275, 274, 277, 278, 279, 280, 281, 276, 1008,
	163, 542, 741, 743, 744, 216, 543, 89, 443, 274,
	277, 278, 279, 280, 281, 276, 80, 575, 512, 259,
	558, 94, 95, 1007, 99, 261, 997, 996, 29, 40,
	340, 743, 744, 31, 32, 34, 33, 275, 274, 277,
	278, 279, 280, 281, 276, 216, 356, 340, 950, 80,
	956, 355, 439, 438, 955, 260, 444, 275, 274, 277,
	278, 279, 280, 281, 276, 454, 160, 818, 816, 941,
	940, 824, 834, 893, 80, 795, 829, 831, 888, 513,
	832, 830, 304, 817, 839, 819, 841, 412, 843, 342,
	845, 887, 847, 879, 849, 80, 851, 343, 853, 343,
	855, 22, 878, 877, 163, 41, 875, 876, 871, 871,
	47, 169, 43, 44, 45, 46, 822, 891, 892, 821,
	820, 866, 867, 868, 869, 163, 154, 872, 896, 800,
	356, 899, 899, 899, 792, 355, 791, 894, 882, 786,
	151, 152, 153, 785, 900, 901, 784, 780, 779, 897,
	778, 907, 895, 909, 756, 29, 908, 296, 910, 423,
	31, 32, 34, 33, 301, 300, 299, 298, 1002, 469,
	160, 986, 984, 983, 798, 799, 982, 865, 864, 863,
	802, 803, 862, 859, 858, 857, 856, 854, 169, 169,
	169, 160, 852, 850, 848, 846, 169, 169, 169, 169,
	949, 844, 842, 290, 169, 933, 934, 935, 936, 840,
	838, 835, 633, 169, 133, 882, 882, 882, 944, 945,
	946, 132, 971, 951, 952, 882, 882, 968, 953, 954,
	973, 882, 975, 727, 959, 465, 960, 399, 118, 555,
	168, 553, 336, 962, 988, 906, 10, 987, 989, 990,
	464, 169, 169, 9, 991, 928, 8, 963, 7, 169,
	972, 15, 974, 1001, 14, 634, 169, 169, 13, 532,
	247, 214, 992, 993, 171, 610, 1012, 64, 882, 882,
	905, 994, 995, 823, 65, 808, 882, 63, 804, 62,
	12, 140, 72, 882, 882, 71, 1005, 1006, 797, 70,
	1022, 1023, 1024, 1025, 1026, 1027, 793, 169, 169, 1031,
	631, 976, 977, 978, 979, 980, 981, 628, 169, 169,
	985, 69, 1049, 1033, 1034, 1041, 1019, 1018, 1021, 1020,
	740, 1035, 1036, 246, 882, 882, 1048, 1039, 1040, 1055,
	6, 1057, 123, 22, 5, 882, 882, 294, 1046, 1047,
	4, 295, 599, 873, 874, 833, 1068, 424, 743, 744,
	1072, 1069, 418, 536, 889, 890, 303, 474, 1073, 350,
	1075, 68, 1063, 1064, 1056, 67, 1058, 1074, 88, 1076,
	86, 66, 261, 1077, 1078, 1079, 1080, 1082, 730, 1083,
	1065, 497, 169, 479, 275, 274, 277, 278, 279, 280,
	281, 276, 415, 103, 729, 1095, 1096, 539, 340, 319,
	1099, 275, 274, 277, 278, 279, 280, 281, 276, 882,
	311, 473, 1084, 1094, 1093, 1098, 318, 1059, 1060, 1061,
	237, 1062, 236, 235, 234, 942, 943, 231, 275, 274,
	277, 278, 279, 280, 281, 276, 230, 122, 1010, 902,
	22, 957, 958, 49, 884, 746, 580, 97, 96, 98,
	427, 428, 502, 446, 140, 359, 1088, 456, 457, 458,
	459, 460, 365, 461, 462, 370, 371, 731, 374, 375,
	376, 377, 378, 379, 380, 381, 456, 457, 458, 459,
	460, 1086, 461, 462, 485, 125, 250, 255, 421, 961,
	386, 572, 728, 386, 391, 386, 538, 481, 302, 148,
	398, 393, 149, 147, 161, 498, 268, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 605, 606, 607, 608, 600,
	601, 602, 603, 604, 609, 270, 272, 141, 549, 354,
	48, 282, 283, 284, 285, 286, 287, 288, 273, 271,
	269, 275, 274, 277, 278, 279, 280, 281, 276, 455,
	352, 137, 471, 472, 50, 51, 56, 57, 58, 59,
	60, 463, 73, 74, 75, 76, 94, 95, 475, 262,
	100, 101, 134, 87, 386, 102, 105, 106, 107, 108,
	110, 111, 42, 112, 20, 114, 115, 11, 19, 18,
	17, 16, 2, 113, 1, 0, 0, 104, 109, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 557, 0, 0, 0, 559, 0, 0,
	0, 0, 0, 561, 0, 0, 0, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 0, 739, 640,
	641, 642, 643, 644, 645, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574,
}
var yyPact = [...]int{

	467, -1000, -1000, 761, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 762, -1000, -1000, 34, -1000, -1000, -1000, -1000, -1000,
	594, -1000, -1000, -1000, -1000, -1000, 231, -1000, -1000, 338,
	23, 137, 1135, 1053, -1000, -1000, -1000, -1000, 1050, -1000,
	482, 1047, -1000, 40, -1000, -1000, 894, -47, 894, 1128,
	1007, 761, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -48, -47, -8, -35, -1000, -1000, -1000,
	-1000, -1000, -1000, 875, 868, -1000, -1000, 80, -1000, 762,
	471, 935, 1206, 1206, -1000, -1000, 932, 546, 546, 57,
	546, 546, 661, 79, 71, 1127, 1118, 69, 63, 1115,
	1114, 1113, 1111, 407, -1000, 61, -1000, -1000, 272, 998,
	-1000, 931, 894, 894, -57, -28, -1000, -1000, -9, 894,
	-64, 338, -1000, -1000, 700, -1000, -1000, 314, 270, 519,
	1175, -1000, 425, 145, -1000, -1000, -1000, 550, -1000, -1000,
	818, -1000, -1000, -1000, -1000, 817, -1000, -1000, -1000, -1000,
	816, 815, 550, -1000, -1000, 591, 222, -1000, 376, -1000,
	267, 1206, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14, 546, -1000, 550, 425, -1000, 546,
	546, -1000, -1000, -1000, 894, 621, 1107, 1090, -1000, 587,
	894, 894, 546, 546, 894, 894, 894, 894, 894, 894,
	894, 894, 894, 894, -1000, 898, 894, 266, 1088, 750,
	894, 417, 338, 894, -41, 894, 1039, 538, -1000, 702,
	80, 550, -1000, -1000, 338, 262, 425, 425, 550, 808,
	501, 550, 550, 573, 550, 550, 550, 550, 550, 550,
	550, 550, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1175, -3, 112, 17, 1175, -1000, 529, -1000, 1135, 33,
	550, 550, 400, 1025, 266, 223, 550, 338, -1000, 892,
	-1000, 1025, 519, -1000, -1000, 546, -1000, 894, 894, 894,
	-1000, 894, 546, 546, -1000, -1000, 1088, 1088, 1088, 546,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 748, 727, 1079,
	425, 1028, 266, 266, 810, 1027, -78, 36, 894, 177,
	-1000, 894, 710, 1129, 906, 786, 263, -1000, -1000, 605,
	-1000, -1000, -1000, -1000, 339, 1025, -1000, 808, 550, 550,
	1025, 1052, -1000, 1036, 576, 622, -1000, 324, 324, 284,
	284, 284, -1000, -1000, 550, -1000, 1025, -1000, -184, 104,
	550, 1008, 102, 540, -1000, 425, -1000, 215, 1025, -1000,
	-1000, 546, 546, 546, 546, -1000, -1000, -1000, -1000, -1000,
	-1000, 1028, 266, 1079, 1057, 1067, 519, -1000, 808, 761,
	591, 101, -1000, 164, -1000, 535, -59, -1000, 663, -1000,
	443, 209, -167, -171, 187, 39, 35, -1000, 363, 357,
	286, 930, 354, 353, 348, -1000, -1000, -1000, -1000, -1000,
	1032, -143, -1000, 1086, 702, 702, -1000, -1000, 644, 616,
	588, 575, 572, 174, -1000, 897, 146, 895, 550, 550,
	-1000, 1025, 651, 550, -1000, 1025, -1000, -1000, 100, 550,
	-1000, 244, -1000, 550, 581, -1000, 242, 213, -1000, -1000,
	-1000, -1000, -1000, 531, 564, 1057, -1000, 550, 662, -1000,
	-1000, 266, 99, -1000, 936, -98, 338, 338, 338, 894,
	-1000, -1000, 36, -1000, 266, 338, 338, -99, 266, 266,
	266, 980, 338, 338, 973, -1000, -1000, 338, 866, 926,
	346, 335, 334, 1206, 1316, 888, -1000, -1000, 1082, 1064,
	1129, 1110, -1000, 571, -1000, 551, -1000, -1000, -1000, -1000,
	-30, -34, -45, -1000, -1000, -1000, 1025, 1025, 550, 1025,
	-1000, 2, -1000, 1025, 550, -1000, -1000, -1000, -1000, 994,
	-1000, -1000, 647, -1000, 671, 808, -1000, 443, 164, -1000,
	271, 805, 224, 221, 219, 217, 198, 170, 165, 153,
	131, 125, -1000, 801, 799, 798, -1000, 285, 797, 794,
	790, -1000, -1000, -1000, -1000, 184, 184, 184, 184, 787,
	785, 969, 504, 961, -78, -78, -1000, 780, -1000, 936,
	-78, -78, 951, 332, 948, 266, 936, -1000, -1000, -1000,
	-1000, 338, -1000, -1000, 280, 1206, 1316, 1206, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1079, 425,
	550, 425, -1000, -1000, 771, 770, 767, 1025, -1000, 1025,
	946, 550, -1000, -1000, -1000, -1000, -1000, 443, -1000, 260,
	185, 281, -1000, -1000, 1024, 795, 865, -154, 864, -1000,
	-154, 863, -154, 856, -154, 855, -154, 849, -154, 848,
	-154, 847, -154, 846, -154, 841, -154, 840, 839, 838,
	837, 205, 836, -1000, 833, 832, 831, 205, 205, 205,
	205, 795, 795, -78, -78, 338, 338, 754, 753, 744,
	266, -159, 742, 729, -78, -78, 338, 338, 724, 936,
	-159, -1000, 1206, -1000, -1000, -1000, 1057, 519, 620, 519,
	338, 338, 338, 1132, -1000, -127, 943, -1000, 908, 260,
	-110, 260, -110, -1000, -1000, -202, -1000, -1000, -207, -1000,
	-208, -1000, -209, -1000, -224, -1000, -226, -1000, -230, -1000,
	619, -1000, 606, -1000, 593, -1000, 98, -235, -236, -239,
	0, 916, -240, -242, -256, -257, 0, 0, 0, 0,
	96, -1000, 94, 721, 720, -78, -78, 266, 266, 266,
	90, -1000, 699, -1000, -1000, 266, 266, 266, 266, 705,
	701, -78, -78, 266, -159, -1000, -1000, 917, 89, -1000,
	86, 84, 266, -129, 877, -1000, -1000, -127, 260, -127,
	260, -1000, -145, -145, -145, -145, -145, -145, 830, 827,
	826, -145, 825, -1000, -1000, -1000, -1000, 1316, 1206, 184,
	184, -1000, -1000, -1000, -1000, -1000, -1000, 795, 205, 205,
	266, 266, 678, 677, 83, 77, 76, -1000, 266, -1000,
	822, -1000, -1000, 65, 64, 266, 266, 674, 650, 62,
	-1000, -1000, 1131, 294, -1000, 338, -1000, -1000, 591, 44,
	246, -1000, -129, -127, -129, -127, -154, -154, -154, -154,
	-154, -154, -258, -261, -267, -154, -283, -1000, -1000, 205,
	205, -1000, 0, 0, 60, 58, 266, 266, -119, -1000,
	-1000, -1000, -284, -1000, -1000, 53, 49, 266, 266, -119,
	-1000, 338, -1000, -119, 204, -1000, -1000, -1000, 44, -129,
	44, -129, -1000, -1000, -1000, -1000, -1000, -1000, -145, -145,
	-145, -1000, -145, 0, 0, -1000, -1000, -127, -1000, 42,
	41, -1000, 894, 1026, -1000, -1000, 21, 18, -1000, 338,
	-1000, -1000, -1000, -1000, -1000, -119, 44, -119, 44, -154,
	-154, -154, -154, -1000, -1000, -1000, -1000, -1000, 627, -1000,
	-1000, -1000, -1000, -1000, -119, -1000, -119, -1000, -1000, -1000,
	-1000, 266, -1000, -1000, 8, -135, 515, 169, -1000, 1106,
	-1000, -1000, -1000, 177, 177, 479, -1000, 1108, 177, -1000,
}
var yyPgo = [...]int{

	0, 1304, 1302, 46, 1040, 1034, 1030, 980, 958, 954,
	951, 948, 946, 943, 936, 1301, 1300, 1299, 1298, 1297,
	1294, 1240, 647, 1292, 1283, 559, 1282, 264, 1279, 1271,
	1261, 1260, 39, 1259, 1239, 3, 1238, 12, 50, 43,
	1237, 1206, 38, 6, 893, 34, 26, 1205, 1204, 37,
	1203, 27, 1202, 1201, 41, 1199, 1198, 1197, 1196, 1192,
	29, 1191, 19, 7, 22, 1189, 45, 1188, 35, 14,
	178, 52, 1187, 1186, 1185, 249, 4, 30, 0, 5,
	9, 1184, 662, 20, 42, 11, 44, 10, 16, 2,
	1181, 1156, 1, 1153, 23, 28, 25, 1152, 32, 1151,
	1150, 24, 18, 15, 88, 13, 8, 17, 1146, 36,
	21, 33, 1145, 1144, 31, 1143,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 3, 3, 11, 11, 14, 14, 12, 13,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 4, 4, 4, 4, 4, 4, 15, 15,
	16, 17, 18, 20, 20, 20, 20, 20, 7, 7,
	8, 9, 10, 10, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 115, 21, 22, 22, 23, 23, 23, 23, 23,
	24, 24, 26, 26, 27, 27, 27, 30, 30, 28,
	28, 28, 31, 31, 32, 32, 32, 29, 29, 29,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 34,
	34, 34, 35, 35, 36, 36, 36, 36, 37, 37,
	101, 101, 38, 38, 39, 39, 39, 39, 39, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 41,
	41, 41, 41, 41, 41, 41, 42, 42, 47, 47,
	45, 45, 49, 46, 46, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 55,
	55, 55, 55, 55, 55, 48, 48, 50, 50, 50,
	52, 56, 56, 53, 53, 54, 57, 57, 51, 51,
	43, 43, 43, 43, 58, 58, 59, 59, 60, 60,
	61, 61, 62, 63, 63, 63, 64, 64, 64, 64,
	65, 65, 65, 66, 66, 67, 67, 68, 68, 69,
	69, 70, 72, 72, 73, 73, 25, 25, 74, 74,
	74, 77, 77, 76, 76, 75, 75, 75, 78, 78,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 81, 81, 81,
	81, 82, 82, 82, 71, 71, 71, 97, 97, 96,
	96, 96, 96, 96, 96, 96, 96, 107, 107, 107,
	107, 107, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 102,
	102, 83, 103, 103, 85, 85, 85, 85, 85, 84,
	84, 86, 86, 86, 86, 87, 87, 87, 87, 89,
	89, 88, 90, 90, 90, 90, 91, 91, 91, 91,
	93, 93, 92, 92, 92, 92, 104, 104, 105, 105,
	106, 106, 94, 94, 95, 95, 109, 109, 112, 112,
	111, 111, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 100, 100, 99, 99, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 114, 114, 113, 113,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 5, 12, 3, 8, 8, 6, 6, 8, 7,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 4, 5, 4, 4, 6, 7, 1, 2,
	1, 1, 2, 1, 2, 2, 3, 3, 9, 11,
	6, 6, 6, 6, 5, 4, 4, 5, 5, 4,
	4, 4, 6, 5, 7, 5, 7, 6, 6, 7,
	7, 5, 5, 6, 6, 6, 6, 5, 5, 5,
	5, 5, 5, 3, 4, 4, 2, 3, 2, 2,
	3, 0, 2, 0, 2, 1, 2, 1, 1, 1,
	0, 1, 1, 3, 1, 2, 3, 1, 1, 0,
	1, 2, 1, 3, 3, 3, 5, 0, 1, 2,
	1, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	3, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 3,
	3, 4, 3, 4, 5, 6, 3, 4, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	3, 1, 3, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 1, 1, 3,
	4, 4, 5, 6, 4, 1, 1, 1, 1, 1,
	5, 0, 1, 1, 2, 4, 0, 2, 1, 3,
	1, 1, 1, 1, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 0, 3, 1, 3, 0, 5, 1,
	3, 3, 0, 2, 0, 3, 0, 1, 0, 1,
	1, 1, 3, 2, 5, 0, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	1, 0, 1, 1, 0, 2, 2, 1, 3, 2,
	8, 6, 6, 7, 8, 8, 7, 7, 8, 8,
	9, 9, 1, 4, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 8, 3, 8,
	3, 8, 3, 6, 8, 1, 1, 4, 1, 4,
	1, 4, 1, 4, 7, 7, 1, 4, 4, 1,
	1, 1, 1, 4, 4, 4, 4, 6, 6, 1,
	2, 2, 0, 1, 0, 1, 2, 1, 2, 0,
	2, 0, 2, 2, 2, 0, 2, 2, 2, 0,
	1, 7, 0, 2, 2, 2, 0, 3, 3, 6,
	0, 1, 1, 1, 2, 2, 0, 1, 0, 1,
	0, 1, 0, 3, 0, 2, 0, 2, 0, 1,
	1, 2, 3, 3, 5, 4, 4, 3, 4, 3,
	3, 0, 1, 1, 3, 1, 5, 7, 7, 8,
	8, 9, 9, 8, 6, 5, 3, 3, 3, 3,
	4, 2, 2, 0, 1, 2, 2,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-14, -19, -7, -8, -9, -10, -15, -16, -17, -18,
	-20, -22, 5, 29, 31, 33, 6, 7, 8, 251,
	32, 256, 257, 259, 258, 87, 88, 90, 91, 55,
	252, 328, -23, 41, 42, 43, 44, 38, -21, -115,
	-21, -21, 237, 236, 247, 250, -21, -21, -21, -21,
	-21, -3, -11, -12, -14, -13, -4, -5, -6, -7,
	-8, -9, -10, -21, -21, -21, -21, 89, -78, 34,
	235, 253, 36, 330, 329, -3, 17, -24, 18, -22,
	-82, 101, 100, 99, 229, 230, 101, 100, 102, -82,
	233, 234, 238, 46, 260, 239, 240, 241, 242, 261,
	243, 244, 246, 256, 248, 249, 237, -35, 34, -25,
	264, -35, 9, 25, 260, -74, 266, 267, -25, 260,
	260, 261, 36, 36, -26, -27, 80, -30, 34, -39,
	-44, -40, 60, 39, -43, -51, -45, -50, -55, -52,
	20, 35, 36, 37, 21, -78, -49, 78, 79, 40,
	331, -48, 62, 265, 24, -69, 89, -70, -51, -78,
	34, 29, -79, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, -79, 29, -71, 74, 10, -71, 231,
	232, -71, -71, -71, 9, 238, 239, 240, 248, 232,
	9, 9, 232, 232, 9, 9, 9, 9, 235, 260,
	262, 241, 242, 245, 232, 84, 25, 29, -35, -35,
	-73, 265, 261, 260, -35, -72, 265, -78, -64, 9,
	45, 15, -28, -78, 19, 84, 59, 58, -41, 75,
	60, 74, 61, 73, 77, 76, 83, 78, 79, 80,
	81, 82, 66, 67, 68, 69, 70, 71, 72, -39,
	-44, -39, -46, -3, -44, -44, 39, -49, 39, 39,
	39, 39, -56, -44, 45, 92, 66, 84, -79, 255,
	-71, -44, -39, -71, -71, -35, -71, 9, 9, 9,
	-71, 9, -35, -35, -71, -71, -35, -35, -35, -35,
	-35, -35, -35, -35, -35, -35, 34, -35, -69, -38,
	10, -66, 29, 39, -35, 60, -78, -35, 263, -35,
	20, 57, -31, -32, -34, 39, 34, -49, -27, -44,
	-78, 80, -78, -39, -39, -44, -45, 75, 74, 61,
	-44, -44, 21, 60, -44, -44, -44, -44, -44, -44,
	-44, -44, 332, 332, 45, 332, -44, 332, 80, -46,
	18, -44, -46, -53, -54, 63, -70, 93, -44, 35,
	-71, -35, -35, -35, -35, -71, -71, -38, -38, -38,
	-71, -66, 29, -38, -60, 13, -39, -42, 24, -3,
	-69, -67, -51, 39, 20, -75, 268, -100, -99, -98,
	-111, 322, 324, 325, 258, 327, 326, -110, 300, 299,
	28, 101, 100, 255, 303, -35, -93, -92, 312, 313,
	29, 314, -35, -38, 45, -33, 47, 48, 49, 50,
	51, 53, 54, -29, 34, 19, -32, 84, 45, 254,
	-45, -44, -44, 59, 21, -44, 332, 332, -46, 75,
	332, -57, -54, 65, -39, -81, 94, 97, 98, -71,
	-71, -71, -71, -42, -69, -60, -64, 14, -47, -45,
	332, 45, -97, -96, -51, -109, 261, 27, 318, 57,
	269, 270, 45, -110, 323, 261, 27, -109, 323, 323,
	323, 301, 261, 27, 319, 244, 244, 66, 66, 101,
	100, 255, 29, 66, 66, 66, 21, 315, -58, 11,
	-32, -32, 47, 52, 47, 52, 47, 47, 47, -36,
	55, 264, 56, 34, 332, 34, -44, -44, 59, -44,
	332, -44, 86, -44, 64, 95, 96, 94, -68, 57,
	-68, -64, -61, -62, -44, 45, -51, 332, 45, -107,
	-108, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 106,
	293, 294, 295, 296, 297, 289, 290, 291, 292, 298,
	29, 301, 266, 319, -78, -78, -78, -35, -98, -51,
	-78, -78, 301, 266, 319, -51, -51, -51, 27, -78,
	-78, 27, -78, 36, 29, 66, 66, 66, -79, -80,
	143, 144, 145, 146, 147, 148, 106, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 35, -59, 12,
	14, 57, 47, 47, 261, 261, 261, -44, 332, -44,
	26, 45, -63, 22, 23, -45, -112, -111, -96, -103,
	-102, -83, 299, 21, 60, 28, 39, -104, 39, 316,
	-104, 39, -104, 39, -104, 39, -104, 39, -104, 39,
	-104, 39, -104, 39, -104, 39, -104, 39, 39, 39,
	39, -106, 39, 106, 39, 39, 39, -106, -106, -106,
	-106, 39, 39, 27, -78, 261, 27, 27, -75, -75,
	39, -107, -75, -75, 27, -78, 261, 27, 27, -51,
	-107, -78, 66, -79, -80, -79, -60, -39, -46, -39,
	39, 39, 39, 27, -62, -85, 266, 27, 301, -103,
	-83, -103, -102, 21, -43, 36, -105, 317, 36, -105,
	36, -105, 36, -105, 36, -105, 36, -105, 36, -105,
	36, -105, 36, -105, 36, -105, 36, 36, 36, 36,
	-94, 101, 36, 36, 36, 36, -94, -94, -94, -94,
	-101, -43, -101, -75, -75, -78, -78, 39, 39, 39,
	-77, -76, -51, -114, -113, 320, 321, 39, 39, -75,
	-75, -78, -78, 39, -107, -114, -79, -64, -37, -78,
	-37, -37, 7, -84, 303, 27, 27, -85, -103, -85,
	-103, 332, 332, 332, 332, 332, 332, 332, 45, 45,
	45, 332, 45, 332, 332, 332, -95, 255, 29, 332,
	332, 332, 332, -95, -95, -95, -95, 45, 332, 332,
	39, 39, -75, -75, -77, -77, -77, 332, 45, -63,
	39, -51, -51, -77, -77, 39, 39, -75, -75, -77,
	-114, -65, 16, 30, 332, 45, 332, 332, -69, -86,
	304, 35, -84, -85, -84, -85, -104, -104, -104, -104,
	-104, -104, 36, 36, 36, -104, 36, -80, -79, -106,
	-106, -43, -94, -94, -77, -77, 39, 39, 332, 332,
	332, -76, 36, 332, 332, -77, -77, 39, 39, 332,
	7, 75, -78, -87, 236, 305, 306, 28, -86, -84,
	-86, -84, -105, -105, -105, -105, -105, -105, 332, 332,
	332, -105, 332, -94, -94, -95, -95, 332, 332, -77,
	-77, -88, 302, 332, 332, 332, -77, -77, -88, -78,
	-89, -88, 307, 308, 28, -87, -86, -87, -86, -104,
	-104, -104, -104, -95, -95, -84, 332, 332, -35, -63,
	332, 332, -78, -89, -87, -89, -87, -105, -105, -105,
	-105, 39, -89, -89, -77, 332, -90, 309, -91, 57,
	46, 310, 311, 8, 7, -92, -92, 57, 7, -92,
}
var yyDef = [...]int{

	103, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 101, 101, 101, 101, 101, 101, 101, 101,
	0, 101, 101, 101, 101, 48, 0, 50, 51, 0,
	53, 0, 0, 105, 107, 108, 109, 104, 110, 103,
	401, 401, 96, 0, 98, 99, 0, 256, 0, 0,
	0, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 258, 256, 0, 0, 49, 52, 268,
	269, 54, 55, 0, 0, 23, 106, 0, 111, 102,
	0, 0, 0, 0, 402, 403, 0, 404, 404, 0,
	404, 404, 404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 97, 100, 142, 0,
	257, 0, 0, 0, 254, 0, 259, 260, 0, 0,
	252, 0, 56, 57, 236, 112, 114, 119, 268, 117,
	118, 154, 0, 0, 185, 186, 187, 0, 197, 198,
	0, 220, 221, 222, 223, 218, 181, 207, 208, 209,
	0, 0, 211, 205, 206, 42, 0, 249, 0, 218,
	268, 0, 44, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 45, 404, 65, 0, 0, 66, 404,
	404, 69, 70, 71, 0, 404, 0, 0, 94, 404,
	0, 0, 404, 404, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 152, 243,
	0, 0, 0, 0, 0, 0, 0, 0, 21, 0,
	0, 0, 115, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 170, 171, 172, 173, 174, 175, 157,
	0, 0, 0, 0, 183, 196, 0, 168, 0, 0,
	0, 0, 0, 212, 0, 0, 0, 0, 43, 0,
	64, 405, 406, 67, 68, 404, 73, 0, 0, 0,
	75, 0, 404, 404, 81, 82, 152, 152, 152, 404,
	87, 88, 89, 90, 91, 92, 143, 243, 152, 228,
	0, 0, 0, 0, 0, 0, 265, 531, 0, 500,
	253, 0, 152, 122, 127, 0, 139, 141, 113, 237,
	121, 116, 219, 155, 156, 159, 160, 0, 0, 0,
	162, 0, 166, 0, 188, 189, 190, 191, 192, 193,
	194, 195, 158, 180, 0, 182, 183, 199, 0, 0,
	0, 0, 0, 216, 213, 0, 250, 0, 251, 46,
	72, 404, 404, 404, 404, 77, 78, 83, 84, 85,
	86, 0, 0, 228, 236, 0, 153, 26, 0, 177,
	27, 0, 245, 516, 255, 0, 0, 60, 532, 533,
	535, 516, 0, 0, 0, 0, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 61, 62, 501, 502, 503,
	0, 0, 63, 224, 0, 0, 130, 131, 0, 0,
	0, 0, 0, 144, 128, 0, 0, 0, 0, 0,
	161, 163, 0, 0, 167, 184, 200, 201, 0, 0,
	204, 0, 214, 0, 0, 47, 0, 0, 400, 74,
	79, 80, 76, 247, 247, 236, 29, 0, 176, 178,
	244, 0, 0, 407, 0, 0, 0, 0, 0, 0,
	266, 267, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 551, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 504, 505, 226, 0,
	123, 0, 132, 0, 134, 0, 136, 137, 138, 124,
	0, 0, 0, 129, 125, 140, 238, 239, 0, 164,
	202, 0, 210, 217, 0, 397, 398, 399, 24, 0,
	25, 28, 229, 230, 233, 0, 246, 518, 516, 409,
	472, 422, 506, 506, 506, 506, 506, 506, 506, 506,
	506, 506, 445, 446, 448, 450, 452, 510, 0, 456,
	0, 459, 460, 461, 462, 510, 510, 510, 510, 0,
	0, 0, 0, 0, 265, 265, 517, 0, 534, 0,
	265, 265, 0, 0, 0, 0, 0, 546, 547, 548,
	549, 0, 522, 523, 0, 0, 0, 0, 527, 529,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 394, 395, 396, 530, 228, 0,
	0, 0, 133, 135, 0, 0, 0, 165, 203, 215,
	0, 0, 232, 234, 235, 179, 58, 519, 408, 474,
	472, 472, 473, 469, 0, 0, 0, 508, 0, 507,
	508, 0, 508, 0, 508, 0, 508, 0, 508, 0,
	508, 0, 508, 0, 508, 0, 508, 0, 0, 0,
	0, 512, 0, 511, 0, 0, 0, 512, 512, 512,
	512, 0, 0, 265, 265, 0, 0, 0, 0, 0,
	0, 553, 0, 0, 265, 265, 0, 0, 0, 0,
	553, 550, 0, 526, 528, 525, 236, 227, 225, 126,
	0, 0, 0, 0, 231, 479, 475, 477, 0, 474,
	472, 474, 472, 470, 471, 0, 424, 509, 0, 426,
	0, 428, 0, 430, 0, 432, 0, 434, 0, 436,
	0, 438, 0, 440, 0, 442, 0, 0, 0, 0,
	514, 0, 0, 0, 0, 0, 514, 514, 514, 514,
	0, 150, 0, 0, 0, 265, 265, 0, 0, 0,
	0, 261, 233, 536, 554, 0, 0, 0, 0, 0,
	0, 265, 265, 0, 553, 545, 524, 240, 0, 148,
	0, 0, 0, 481, 0, 476, 478, 479, 474, 479,
	474, 423, 506, 506, 506, 506, 506, 506, 0, 0,
	0, 506, 0, 447, 449, 451, 453, 0, 0, 510,
	510, 457, 458, 463, 464, 465, 466, 0, 512, 512,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 263,
	0, 555, 556, 0, 0, 0, 0, 0, 0, 0,
	544, 22, 0, 0, 145, 0, 146, 147, 248, 485,
	0, 480, 481, 479, 481, 479, 508, 508, 508, 508,
	508, 508, 0, 0, 0, 508, 0, 515, 513, 512,
	512, 151, 514, 514, 0, 0, 0, 0, 0, 411,
	412, 262, 0, 537, 538, 0, 0, 0, 0, 0,
	241, 0, 149, 489, 0, 482, 483, 484, 485, 481,
	485, 481, 425, 427, 429, 431, 433, 435, 506, 506,
	506, 443, 506, 514, 514, 467, 468, 479, 413, 0,
	0, 416, 0, 233, 539, 540, 0, 0, 543, 0,
	417, 490, 486, 487, 488, 489, 485, 489, 485, 508,
	508, 508, 508, 454, 455, 410, 414, 415, 0, 264,
	541, 542, 242, 418, 489, 419, 489, 437, 439, 441,
	444, 0, 420, 421, 0, 492, 496, 0, 491, 0,
	493, 494, 495, 0, 0, 497, 498, 0, 0, 499,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 82, 77, 3,
	39, 332, 80, 78, 45, 79, 84, 81, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	67, 66, 68, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 83, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 76, 3, 40,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 41, 42, 43,
	44, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 69, 70, 71, 72, 73, 74, 75, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272,
}
var yyTok3 = [...]int{
	57600, 273, 57601, 274, 57602, 275, 57603, 276, 57604, 277,
	57605, 278, 57606, 279, 57607, 280, 57608, 281, 57609, 282,
	57610, 283, 57611, 284, 57612, 285, 57613, 286, 57614, 287,
	57615, 288, 57616, 289, 57617, 290, 57618, 291, 57619, 292,
	57620, 293, 57621, 294, 57622, 295, 57623, 296, 57624, 297,
	57625, 298, 57626, 299, 57627, 300, 57628, 301, 57629, 302,
	57630, 303, 57631, 304, 57632, 305, 57633, 306, 57634, 307,
	57635, 308, 57636, 309, 57637, 310, 57638, 311, 57639, 312,
	57640, 313, 57641, 314, 57642, 315, 57643, 316, 57644, 317,
	57645, 318, 57646, 319, 57647, 320, 57648, 321, 57649, 322,
	57650, 323, 57651, 324, 57652, 325, 57653, 326, 57654, 327,
	57655, 328, 57656, 329, 57657, 330, 57658, 331, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:310
		{
			SetParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:316
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:318
		{
			yyVAL.statement = yyDollar[1].setStmt
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:320
		{
			yyVAL.statement = yyDollar[1].showStmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:322
		{
			yyVAL.statement = yyDollar[1].showStmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:329
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:331
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:333
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:335
		{
			yyVAL.statement = yyDollar[1].ddlStmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:342
		{
			yyVAL.statement = nil
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:346
		{
			yyVAL.selStmt = &SimpleSelect{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, Limit: yyDollar[5].limit}
		}
	case 22:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line yacc.y:350
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[6].tableExprs, Where: NewWhere(AST_WHERE, yyDollar[7].boolExpr), GroupBy: GroupBy(yyDollar[8].valExprs), Having: NewWhere(AST_HAVING, yyDollar[9].boolExpr), OrderBy: yyDollar[10].orderBy, Limit: yyDollar[11].limit, Lock: yyDollar[12].str}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:354
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:360
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: yyDollar[6].columns, Rows: yyDollar[7].insRows, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:364
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, col := range yyDollar[7].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:376
		{
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:380
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, col := range yyDollar[6].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:392
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(AST_WHERE, yyDollar[6].boolExpr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:398
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(AST_WHERE, yyDollar[5].boolExpr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:404
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:408
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:412
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:416
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:420
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].statement}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:424
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].setStmt}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:428
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].showStmt}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:432
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].showStmt}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:436
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:440
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:444
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:448
		{
			yyVAL.statement = &Explain{Statement: yyDollar[2].ddlStmt}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:454
		{
			yyVAL.setStmt = &SetVariable{
				Comments: Comments(yyDollar[2].bytes2),
				Scope:    string(yyDollar[3].bytes),
				Exprs:    yyDollar[4].updateExprs,
			}
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:462
		{
			yyVAL.setStmt = &SetCharset{
				Comments: Comments(yyDollar[2].bytes2),
				Charset:  string(yyDollar[5].bytes),
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:469
		{
			yyVAL.setStmt = &SetCharset{
				Comments: Comments(yyDollar[2].bytes2),
				Charset:  string(yyDollar[4].bytes),
			}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:476
		{
			yyVAL.setStmt = &SetNames{
				Comments: Comments(yyDollar[2].bytes2),
				Names:    string(yyDollar[4].bytes),
			}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:483
		{
			yyVAL.setStmt = &SetNames{
				Comments: Comments(yyDollar[2].bytes2),
				Names:    string(yyDollar[4].bytes),
				Collate:  string(yyDollar[6].bytes),
			}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:491
		{
			yyVAL.setStmt = &SetTransactionIsolationLevel{
				Comments:       Comments(yyDollar[2].bytes2),
				Scope:          string(yyDollar[3].bytes),
				IsolationLevel: string(yyDollar[7].bytes),
			}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:501
		{
			yyVAL.statement = &Begin{}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:505
		{
			yyVAL.statement = &Begin{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:511
		{
			yyVAL.statement = &Commit{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:517
		{
			yyVAL.statement = &Rollback{}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:523
		{
			yyVAL.statement = &UseDB{DB: string(yyDollar[2].bytes)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:530
		{
			yyVAL.statement = nil
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:532
		{
			yyVAL.statement = nil
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:534
		{
			yyVAL.statement = &KillConnection{ConnectionID: NumVal(yyDollar[2].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:538
		{
			yyVAL.statement = &KillConnection{ConnectionID: NumVal(yyDollar[3].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:542
		{
			yyVAL.statement = &KillQuery{ConnectionID: NumVal(yyDollar[3].bytes)}
		}
	case 58:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:548
		{
			yyVAL.ddlStmt = &CreateTable{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[5].tableName, CreateDefs: yyDollar[7].createDefs, TableOptions: yyDollar[9].optKeyVals}
		}
	case 59:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line yacc.y:552
		{
			yyVAL.ddlStmt = &CreateIndex{Comments: Comments(yyDollar[2].bytes2), IndexCategory: yyDollar[3].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, Table: yyDollar[8].tableName, IndexColumns: yyDollar[10].idxColNames}
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:558
		{
			yyVAL.ddlStmt = &AlterTable{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, AlterSpecs: yyDollar[6].alterSpecs}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:564
		{
			yyVAL.ddlStmt = &RenameTable{Comments: Comments(yyDollar[2].bytes2), OldName: yyDollar[4].tableName, NewName: yyDollar[6].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:570
		{
			yyVAL.ddlStmt = &DropTable{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName, RefOption: yyDollar[6].bytes}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:574
		{
			yyVAL.ddlStmt = &DropIndex{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[4].bytes, Table: yyDollar[6].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:580
		{
			yyVAL.showStmt = &ShowCharset{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:584
		{
			yyVAL.showStmt = &ShowCharset{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:588
		{
			yyVAL.showStmt = &ShowCollation{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:592
		{
			yyVAL.showStmt = &ShowVariables{Comments: Comments(yyDollar[2].bytes2), Scope: string(yyDollar[3].bytes), LikeOrWhere: yyDollar[5].expr}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:596
		{
			yyVAL.showStmt = &ShowStatus{Comments: Comments(yyDollar[2].bytes2), Scope: string(yyDollar[3].bytes), LikeOrWhere: yyDollar[5].expr}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:600
		{
			yyVAL.showStmt = &ShowDatabases{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:604
		{
			yyVAL.showStmt = &ShowDatabases{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:608
		{
			yyVAL.showStmt = &ShowTables{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[4].expr}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:612
		{
			yyVAL.showStmt = &ShowTables{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:616
		{
			yyVAL.showStmt = &ShowFullTables{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:620
		{
			yyVAL.showStmt = &ShowFullTables{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:624
		{
			yyVAL.showStmt = &ShowTableStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 76:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:628
		{
			yyVAL.showStmt = &ShowTableStatus{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:632
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:636
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:640
		{
			yyVAL.showStmt = &ShowFullColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:644
		{
			yyVAL.showStmt = &ShowFullColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[6].tableName, LikeOrWhere: yyDollar[7].expr}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:648
		{
			yyVAL.showStmt = &ShowProcedureStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:652
		{
			yyVAL.showStmt = &ShowFunctionStatus{Comments: Comments(yyDollar[2].bytes2), LikeOrWhere: yyDollar[5].expr}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:656
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:660
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:664
		{
			yyVAL.showStmt = &ShowIndex{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, Where: yyDollar[6].boolExpr}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:668
		{
			yyVAL.showStmt = &ShowTriggers{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[5].tableName, LikeOrWhere: yyDollar[6].expr}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:672
		{
			yyVAL.showStmt = &ShowCreateDatabase{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:676
		{
			yyVAL.showStmt = &ShowCreateTable{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:680
		{
			yyVAL.showStmt = &ShowCreateView{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:684
		{
			yyVAL.showStmt = &ShowCreateProcedure{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:688
		{
			yyVAL.showStmt = &ShowCreateFunction{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:692
		{
			yyVAL.showStmt = &ShowCreateTrigger{Comments: Comments(yyDollar[2].bytes2), Name: yyDollar[5].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:696
		{
			yyVAL.showStmt = &ShowProcessList{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:700
		{
			yyVAL.showStmt = &ShowFullProcessList{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:704
		{
			yyVAL.showStmt = &ShowSlaveStatus{Comments: Comments(yyDollar[2].bytes2)}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:708
		{
			yyVAL.showStmt = &ShowEngines{}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:712
		{
			yyVAL.showStmt = &ShowEngines{}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:716
		{
			yyVAL.showStmt = &ShowPlugins{}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:720
		{
			yyVAL.showStmt = &ShowProfiles{}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:726
		{
			yyVAL.showStmt = &ShowColumns{Comments: Comments(yyDollar[2].bytes2), From: yyDollar[3].tableName}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:731
		{
			SetAllowComments(yylex, true)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:735
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			SetAllowComments(yylex, false)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:741
		{
			yyVAL.bytes2 = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:745
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:751
		{
			yyVAL.str = AST_UNION
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:755
		{
			yyVAL.str = AST_UNION_ALL
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:759
		{
			yyVAL.str = AST_SET_MINUS
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:763
		{
			yyVAL.str = AST_EXCEPT
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:767
		{
			yyVAL.str = AST_INTERSECT
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:772
		{
			yyVAL.str = ""
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:776
		{
			yyVAL.str = AST_DISTINCT
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:782
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:786
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:792
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:796
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].bytes}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:800
		{
			yyVAL.selectExpr = &StarExpr{TableName: yyDollar[1].bytes}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:806
		{
			yyVAL.expr = yyDollar[1].boolExpr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:810
		{
			yyVAL.expr = yyDollar[1].valExpr
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:815
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:819
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:823
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:829
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:833
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:839
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].smTableExpr, As: yyDollar[2].bytes, Hints: yyDollar[3].indexHints}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:843
		{
			yyVAL.tableExpr = &ParenTableExpr{Expr: yyDollar[2].tableExpr}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:847
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].boolExpr}
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:852
		{
			yyVAL.bytes = nil
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:856
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:860
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:866
		{
			yyVAL.str = AST_JOIN
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:870
		{
			yyVAL.str = AST_STRAIGHT_JOIN
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:874
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:878
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:882
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:886
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:890
		{
			yyVAL.str = AST_JOIN
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:894
		{
			yyVAL.str = AST_CROSS_JOIN
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:898
		{
			yyVAL.str = AST_NATURAL_JOIN
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:904
		{
			yyVAL.smTableExpr = &TableName{Name: yyDollar[1].bytes}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:908
		{
			yyVAL.smTableExpr = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:912
		{
			yyVAL.smTableExpr = yyDollar[1].subquery
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:918
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].bytes}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:922
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:927
		{
			yyVAL.indexHints = nil
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:931
		{
			yyVAL.indexHints = &IndexHints{Type: AST_USE, Indexes: yyDollar[4].bytes2}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:935
		{
			yyVAL.indexHints = &IndexHints{Type: AST_IGNORE, Indexes: yyDollar[4].bytes2}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:939
		{
			yyVAL.indexHints = &IndexHints{Type: AST_FORCE, Indexes: yyDollar[4].bytes2}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:945
		{
			yyVAL.bytes2 = [][]byte{yyDollar[1].bytes}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:949
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:955
		{
			yyVAL.valExprs = ValExprs{yyDollar[1].valExpr}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:959
		{
			yyVAL.valExprs = append(yyDollar[1].valExprs, yyDollar[3].valExpr)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:964
		{
			yyVAL.boolExpr = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:968
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:975
		{
			yyVAL.boolExpr = &AndExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:979
		{
			yyVAL.boolExpr = &OrExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:983
		{
			yyVAL.boolExpr = &NotExpr{Expr: yyDollar[2].boolExpr}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:987
		{
			yyVAL.boolExpr = &ParenBoolExpr{Expr: yyDollar[2].boolExpr}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:993
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: yyDollar[2].str, Right: yyDollar[3].valExpr}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:997
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_IN, Right: yyDollar[3].tuple}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1001
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_IN, Right: yyDollar[4].tuple}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1005
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_LIKE, Right: yyDollar[3].valExpr}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1009
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_LIKE, Right: yyDollar[4].valExpr}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1013
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_BETWEEN, From: yyDollar[3].valExpr, To: yyDollar[5].valExpr}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1017
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_NOT_BETWEEN, From: yyDollar[4].valExpr, To: yyDollar[6].valExpr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1021
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NULL, Expr: yyDollar[1].valExpr}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1025
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NOT_NULL, Expr: yyDollar[1].valExpr}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1029
		{
			yyVAL.boolExpr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1035
		{
			yyVAL.str = AST_EQ
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1039
		{
			yyVAL.str = AST_LT
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1043
		{
			yyVAL.str = AST_GT
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1047
		{
			yyVAL.str = AST_LE
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1051
		{
			yyVAL.str = AST_GE
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1055
		{
			yyVAL.str = AST_NE
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1059
		{
			yyVAL.str = AST_NSE
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1065
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1069
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1075
		{
			yyVAL.values = Values{yyDollar[1].tuple}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1079
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].tuple)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1085
		{
			yyVAL.tuple = ValTuple(yyDollar[2].valExprs)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1089
		{
			yyVAL.tuple = yyDollar[1].subquery
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1095
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1101
		{
			yyVAL.valExprs = ValExprs{yyDollar[1].valExpr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1105
		{
			yyVAL.valExprs = append(yyDollar[1].valExprs, yyDollar[3].valExpr)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1111
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1115
		{
			yyVAL.valExpr = yyDollar[1].colName
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1119
		{
			yyVAL.valExpr = yyDollar[1].tuple
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1123
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITAND, Right: yyDollar[3].valExpr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1127
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITOR, Right: yyDollar[3].valExpr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1131
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITXOR, Right: yyDollar[3].valExpr}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1135
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_PLUS, Right: yyDollar[3].valExpr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1139
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MINUS, Right: yyDollar[3].valExpr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1143
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MULT, Right: yyDollar[3].valExpr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1147
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_DIV, Right: yyDollar[3].valExpr}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1151
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MOD, Right: yyDollar[3].valExpr}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1155
		{
			if num, ok := yyDollar[2].valExpr.(NumVal); ok {
				switch yyDollar[1].byt {
				case '-':
					yyVAL.valExpr = append(NumVal("-"), num...)
				case '+':
					yyVAL.valExpr = num
				default:
					yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
				}
			} else {
				yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
			}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1170
		{
			yyVAL.valExpr = yyDollar[1].funcExpr
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1174
		{
			yyVAL.valExpr = yyDollar[1].caseExpr
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1180
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1184
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: ValExprs{&ColName{Name: []byte("*")}}}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1188
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].valExprs}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1192
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Distinct: true, Exprs: yyDollar[4].valExprs}
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1196
		{
			yyVAL.funcExpr = &FuncExpr{Name: []byte("locate"), Exprs: ValExprs{yyDollar[3].valExpr, yyDollar[5].valExpr}}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1200
		{
			yyVAL.funcExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].valExprs}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1206
		{
			yyVAL.bytes = IF_BYTES
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1210
		{
			yyVAL.bytes = VALUES_BYTES
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1216
		{
			yyVAL.byt = AST_UPLUS
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1220
		{
			yyVAL.byt = AST_UMINUS
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1224
		{
			yyVAL.byt = AST_TILDA
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1230
		{
			yyVAL.caseExpr = &CaseExpr{Expr: yyDollar[2].valExpr, Whens: yyDollar[3].whens, Else: yyDollar[4].valExpr}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1235
		{
			yyVAL.valExpr = nil
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1239
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1245
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1249
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1255
		{
			yyVAL.when = &When{Cond: yyDollar[2].boolExpr, Val: yyDollar[4].valExpr}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1260
		{
			yyVAL.valExpr = nil
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1264
		{
			yyVAL.valExpr = yyDollar[2].valExpr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1270
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].bytes}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1274
		{
			yyVAL.colName = &ColName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1280
		{
			yyVAL.valExpr = StrVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1284
		{
			yyVAL.valExpr = NumVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1288
		{
			yyVAL.valExpr = ValArg(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1292
		{
			yyVAL.valExpr = &NullVal{}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1297
		{
			yyVAL.valExprs = nil
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1301
		{
			yyVAL.valExprs = yyDollar[3].valExprs
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1306
		{
			yyVAL.boolExpr = nil
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1310
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1315
		{
			yyVAL.orderBy = nil
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1319
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1325
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1329
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1335
		{
			yyVAL.order = &Order{Expr: yyDollar[1].valExpr, Direction: yyDollar[2].str}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1340
		{
			yyVAL.str = AST_ASC
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1344
		{
			yyVAL.str = AST_ASC
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1348
		{
			yyVAL.str = AST_DESC
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1353
		{
			yyVAL.limit = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1357
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].valExpr}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1361
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].valExpr, Rowcount: yyDollar[4].valExpr}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1365
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].valExpr, Rowcount: yyDollar[2].valExpr}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1370
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1374
		{
			yyVAL.str = AST_FOR_UPDATE
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1378
		{
			if !bytes.Equal(yyDollar[3].bytes, SHARE) {
				yylex.Error("expecting share")
				return 1
			}
			if !bytes.Equal(yyDollar[4].bytes, MODE) {
				yylex.Error("expecting mode")
				return 1
			}
			yyVAL.str = AST_SHARE_MODE
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1391
		{
			yyVAL.columns = nil
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1395
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1401
		{
			yyVAL.columns = Columns{&NonStarExpr{Expr: yyDollar[1].colName}}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1405
		{
			yyVAL.columns = append(yyVAL.columns, &NonStarExpr{Expr: yyDollar[3].colName})
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1410
		{
			yyVAL.updateExprs = nil
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1414
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1420
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1424
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1430
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].valExpr}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1435
		{
			yyVAL.empty = struct{}{}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1437
		{
			yyVAL.empty = struct{}{}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1440
		{
			yyVAL.empty = struct{}{}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1442
		{
			yyVAL.empty = struct{}{}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1445
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1447
		{
			yyVAL.str = AST_IGNORE
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1450
		{
			yyVAL.bytes = nil
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1452
		{
			yyVAL.bytes = []byte("unique")
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1454
		{
			yyVAL.bytes = []byte("fulltext")
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1458
		{
			yyVAL.idxColNames = IndexColNames{yyDollar[1].idxColName}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1462
		{
			yyVAL.idxColNames = append(yyDollar[1].idxColNames, yyDollar[3].idxColName)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1468
		{
			yyVAL.idxColName = &IndexColName{ColumnName: yyDollar[1].colName, AscOrDesc: yyDollar[2].str}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:1472
		{
			yyVAL.idxColName = &IndexColName{ColumnName: yyDollar[1].colName, Length: NumVal(yyDollar[3].bytes), AscOrDesc: yyDollar[5].str}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1477
		{
			yyVAL.bytes = nil
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1479
		{
			yyVAL.bytes = []byte("btree")
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1481
		{
			yyVAL.bytes = []byte("hash")
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1485
		{
			yyVAL.bytes = bytes.ToLower(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1489
		{
			yyVAL.bytes = []byte("database")
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1500
		{
			yyVAL.bytes = []byte("armscii8")
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1502
		{
			yyVAL.bytes = []byte("ascii")
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1504
		{
			yyVAL.bytes = []byte("big5")
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1506
		{
			yyVAL.bytes = []byte("binary")
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1508
		{
			yyVAL.bytes = []byte("cp1250")
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1510
		{
			yyVAL.bytes = []byte("cp1251")
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1512
		{
			yyVAL.bytes = []byte("cp1256")
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1514
		{
			yyVAL.bytes = []byte("cp1257")
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1516
		{
			yyVAL.bytes = []byte("cp850")
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1518
		{
			yyVAL.bytes = []byte("cp852")
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1520
		{
			yyVAL.bytes = []byte("cp866")
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1522
		{
			yyVAL.bytes = []byte("cp932")
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1524
		{
			yyVAL.bytes = []byte("dec8")
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1526
		{
			yyVAL.bytes = []byte("eucjpms")
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1528
		{
			yyVAL.bytes = []byte("euckr")
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1530
		{
			yyVAL.bytes = []byte("gb2312")
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1532
		{
			yyVAL.bytes = []byte("gbk")
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1534
		{
			yyVAL.bytes = []byte("geostd8")
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1536
		{
			yyVAL.bytes = []byte("greek")
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1538
		{
			yyVAL.bytes = []byte("hebrew")
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1540
		{
			yyVAL.bytes = []byte("hp8")
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1542
		{
			yyVAL.bytes = []byte("keybcs2")
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1544
		{
			yyVAL.bytes = []byte("koi8r")
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1546
		{
			yyVAL.bytes = []byte("koi8u")
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1548
		{
			yyVAL.bytes = []byte("latin1")
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1550
		{
			yyVAL.bytes = []byte("latin2")
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1552
		{
			yyVAL.bytes = []byte("latin5")
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1554
		{
			yyVAL.bytes = []byte("latin7")
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1556
		{
			yyVAL.bytes = []byte("macce")
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1558
		{
			yyVAL.bytes = []byte("macroman")
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1560
		{
			yyVAL.bytes = []byte("sjis")
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1562
		{
			yyVAL.bytes = []byte("swe7")
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1564
		{
			yyVAL.bytes = []byte("tis620")
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1566
		{
			yyVAL.bytes = []byte("ucs2")
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1568
		{
			yyVAL.bytes = []byte("ujis")
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1570
		{
			yyVAL.bytes = []byte("utf16")
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1572
		{
			yyVAL.bytes = []byte("utf16le")
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1574
		{
			yyVAL.bytes = []byte("utf32")
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1576
		{
			yyVAL.bytes = []byte("utf8")
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1578
		{
			yyVAL.bytes = []byte("utf8mb4")
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1582
		{
			yyVAL.bytes = []byte("armscii8_general_ci")
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1584
		{
			yyVAL.bytes = []byte("armscii8_bin")
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1586
		{
			yyVAL.bytes = []byte("ascii_general_ci")
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1588
		{
			yyVAL.bytes = []byte("ascii_bin")
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1590
		{
			yyVAL.bytes = []byte("big5_chinese_ci")
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1592
		{
			yyVAL.bytes = []byte("big5_bin")
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1594
		{
			yyVAL.bytes = []byte("binary")
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1596
		{
			yyVAL.bytes = []byte("cp1250_general_ci")
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1598
		{
			yyVAL.bytes = []byte("cp1250_bin")
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1600
		{
			yyVAL.bytes = []byte("cp1251_chinese_ci")
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1602
		{
			yyVAL.bytes = []byte("cp1251_chinese_cs")
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1604
		{
			yyVAL.bytes = []byte("cp1251_bin")
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1606
		{
			yyVAL.bytes = []byte("cp1256_chinese_ci")
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1608
		{
			yyVAL.bytes = []byte("cp1256_bin")
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1610
		{
			yyVAL.bytes = []byte("cp1257_chinese_ci")
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1612
		{
			yyVAL.bytes = []byte("cp1257_bin")
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1614
		{
			yyVAL.bytes = []byte("cp850_chinese_ci")
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1616
		{
			yyVAL.bytes = []byte("cp850_bin")
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1618
		{
			yyVAL.bytes = []byte("cp852_chinese_ci")
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1620
		{
			yyVAL.bytes = []byte("cp852_bin")
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1622
		{
			yyVAL.bytes = []byte("cp866_chinese_ci")
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1624
		{
			yyVAL.bytes = []byte("cp866_bin")
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1626
		{
			yyVAL.bytes = []byte("cp932_japanese_ci")
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1628
		{
			yyVAL.bytes = []byte("cp932_bin")
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1630
		{
			yyVAL.bytes = []byte("dec8_swedish_ci")
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1632
		{
			yyVAL.bytes = []byte("dec8_bin")
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1634
		{
			yyVAL.bytes = []byte("eucjpms_japanese_ci")
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1636
		{
			yyVAL.bytes = []byte("eucjpms_bin")
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1638
		{
			yyVAL.bytes = []byte("euckr_korean_ci")
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1640
		{
			yyVAL.bytes = []byte("euckr_bin")
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1642
		{
			yyVAL.bytes = []byte("gb2312_chinese_ci")
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1644
		{
			yyVAL.bytes = []byte("gb2312_bin")
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1646
		{
			yyVAL.bytes = []byte("gbk_chinese_ci")
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1648
		{
			yyVAL.bytes = []byte("gbk_bin")
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1650
		{
			yyVAL.bytes = []byte("geostd8_general_ci")
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1652
		{
			yyVAL.bytes = []byte("geostd8_bin")
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1654
		{
			yyVAL.bytes = []byte("greek_general_ci")
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1656
		{
			yyVAL.bytes = []byte("greek_bin")
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1658
		{
			yyVAL.bytes = []byte("hebrew_general_ci")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1660
		{
			yyVAL.bytes = []byte("hebrew_bin")
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1662
		{
			yyVAL.bytes = []byte("hp8_english_ci")
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1664
		{
			yyVAL.bytes = []byte("hp8_bin")
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1666
		{
			yyVAL.bytes = []byte("keybcs2_general_ci")
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1668
		{
			yyVAL.bytes = []byte("keybcs2_bin")
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1670
		{
			yyVAL.bytes = []byte("koi8r_general_ci")
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1672
		{
			yyVAL.bytes = []byte("koi8r_bin")
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1674
		{
			yyVAL.bytes = []byte("koi8u_general_ci")
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1676
		{
			yyVAL.bytes = []byte("koi8u_bin")
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1678
		{
			yyVAL.bytes = []byte("latin1_general_ci")
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1680
		{
			yyVAL.bytes = []byte("latin1_general_cs")
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1682
		{
			yyVAL.bytes = []byte("latin1_bin")
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1684
		{
			yyVAL.bytes = []byte("latin2_general_ci")
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1686
		{
			yyVAL.bytes = []byte("latin2_bin")
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1688
		{
			yyVAL.bytes = []byte("latin5_turkish_ci")
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1690
		{
			yyVAL.bytes = []byte("latin5_bin")
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1692
		{
			yyVAL.bytes = []byte("latin7_general_ci")
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1694
		{
			yyVAL.bytes = []byte("latin7_general_cs")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1696
		{
			yyVAL.bytes = []byte("latin7_bin")
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1698
		{
			yyVAL.bytes = []byte("macce_general_ci")
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1700
		{
			yyVAL.bytes = []byte("macce_bin")
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1702
		{
			yyVAL.bytes = []byte("macroman_general_ci")
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1704
		{
			yyVAL.bytes = []byte("macroman_bin")
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1706
		{
			yyVAL.bytes = []byte("sjis_japanese_ci")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1708
		{
			yyVAL.bytes = []byte("sjis_bin")
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1710
		{
			yyVAL.bytes = []byte("swe7_swedish_ci")
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1712
		{
			yyVAL.bytes = []byte("swe7_bin")
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1714
		{
			yyVAL.bytes = []byte("tis620_thai_ci")
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1716
		{
			yyVAL.bytes = []byte("tis620_bin")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1718
		{
			yyVAL.bytes = []byte("ucs2_general_ci")
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1720
		{
			yyVAL.bytes = []byte("ucs2_unicode_ci")
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1722
		{
			yyVAL.bytes = []byte("ucs2_bin")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1724
		{
			yyVAL.bytes = []byte("ujis_japanese_ci")
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1726
		{
			yyVAL.bytes = []byte("ujis_bin")
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1728
		{
			yyVAL.bytes = []byte("utf16_general_ci")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1730
		{
			yyVAL.bytes = []byte("utf16_unicode_ci")
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1732
		{
			yyVAL.bytes = []byte("utf16_bin")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1734
		{
			yyVAL.bytes = []byte("utf16le_general_ci")
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1736
		{
			yyVAL.bytes = []byte("utf16le_bin")
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1738
		{
			yyVAL.bytes = []byte("utf32_general_ci")
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1740
		{
			yyVAL.bytes = []byte("utf32_unicode_ci")
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1742
		{
			yyVAL.bytes = []byte("utf32_bin")
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1744
		{
			yyVAL.bytes = []byte("utf8_general_ci")
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1746
		{
			yyVAL.bytes = []byte("utf8_unicode_ci")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1748
		{
			yyVAL.bytes = []byte("utf8_bin")
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1750
		{
			yyVAL.bytes = []byte("utf8mb4_general_ci")
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1752
		{
			yyVAL.bytes = []byte("utf8mb4_unicode_ci")
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1754
		{
			yyVAL.bytes = []byte("utf8mb4_bin")
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1759
		{
			yyVAL.bytes = []byte("read committed")
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1761
		{
			yyVAL.bytes = []byte("read uncommitted")
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1763
		{
			yyVAL.bytes = []byte("repeatable read")
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1765
		{
			yyVAL.bytes = []byte("serializable")
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1768
		{
			yyVAL.bytes = nil
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1770
		{
			yyVAL.bytes = []byte("session")
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1772
		{
			yyVAL.bytes = []byte("global")
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:1775
		{
			yyVAL.expr = nil
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1777
		{
			yyVAL.expr = &LikeExpr{Expr: yyDollar[2].valExpr}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1781
		{
			yyVAL.expr = &WhereExpr{Expr: yyDollar[2].boolExpr}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1787
		{
			yyVAL.createDefs = CreateDefinitions{yyDollar[1].createDef}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1791
		{
			yyVAL.createDefs = append(yyDollar[1].createDefs, yyDollar[3].createDef)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:1797
		{
			yyVAL.createDef = &CreateColumnDefinition{ColumnName: yyDollar[1].colName, ColumnDef: yyDollar[2].columnDef}
		}
	case 410:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1801
		{
			yyVAL.createDef = &CreatePrimaryKeyDefinition{Symbol: yyDollar[1].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1805
		{
			yyVAL.createDef = &CreateIndexDefinition{Name: yyDollar[2].bytes, IndexType: yyDollar[3].bytes, IndexColumns: yyDollar[5].idxColNames}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1809
		{
			yyVAL.createDef = &CreateIndexDefinition{Name: yyDollar[2].bytes, IndexType: yyDollar[3].bytes, IndexColumns: yyDollar[5].idxColNames}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1813
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 414:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1817
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 415:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1821
		{
			yyVAL.createDef = &CreateUniqueIndexDefinition{Symbol: yyDollar[1].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 416:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1825
		{
			yyVAL.createDef = &CreateForeignKeyDefinition{Symbol: yyDollar[1].bytes, IndexColumns: yyDollar[5].idxColNames, ReferenceDef: yyDollar[7].bytes}
		}
	case 417:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:1831
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsAutoIncrement: yyDollar[2].boolean,
				UniqueOrKey:     yyDollar[3].bytes,
				ColumnComment:   yyDollar[4].valExpr,
				ColumnFormat:    yyDollar[5].bytes,
				ColumnStorage:   yyDollar[6].bytes,
				ReferenceDef:    yyDollar[7].bytes}
		}
	case 418:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1841
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[2].boolean,
				IsAutoIncrement: yyDollar[3].boolean,
				UniqueOrKey:     yyDollar[4].bytes,
				ColumnComment:   yyDollar[5].valExpr,
				ColumnFormat:    yyDollar[6].bytes,
				ColumnStorage:   yyDollar[7].bytes,
				ReferenceDef:    yyDollar[8].bytes}
		}
	case 419:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1852
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				DefaultValue:    yyDollar[2].valExpr,
				IsAutoIncrement: yyDollar[3].boolean,
				UniqueOrKey:     yyDollar[4].bytes,
				ColumnComment:   yyDollar[5].valExpr,
				ColumnFormat:    yyDollar[6].bytes,
				ColumnStorage:   yyDollar[7].bytes,
				ReferenceDef:    yyDollar[8].bytes}
		}
	case 420:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:1863
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[2].boolean,
				DefaultValue:    yyDollar[3].valExpr,
				IsAutoIncrement: yyDollar[4].boolean,
				UniqueOrKey:     yyDollar[5].bytes,
				ColumnComment:   yyDollar[6].valExpr,
				ColumnFormat:    yyDollar[7].bytes,
				ColumnStorage:   yyDollar[8].bytes,
				ReferenceDef:    yyDollar[9].bytes}
		}
	case 421:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:1875
		{
			yyVAL.columnDef = &ColumnDefinition{Type: yyDollar[1].dataType,
				IsNotNull:       yyDollar[3].boolean,
				DefaultValue:    yyDollar[2].valExpr,
				IsAutoIncrement: yyDollar[4].boolean,
				UniqueOrKey:     yyDollar[5].bytes,
				ColumnComment:   yyDollar[6].valExpr,
				ColumnFormat:    yyDollar[7].bytes,
				ColumnStorage:   yyDollar[8].bytes,
				ReferenceDef:    yyDollar[9].bytes}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1889
		{
			yyVAL.dataType = &DataType{TypeName: "bit"}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1893
		{
			yyVAL.dataType = &DataType{TypeName: "bit(" + string(yyDollar[3].bytes) + ")"}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1897
		{
			yyVAL.dataType = &DataType{TypeName: "tinyint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1901
		{
			yyVAL.dataType = &DataType{TypeName: "tinyint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1905
		{
			yyVAL.dataType = &DataType{TypeName: "smallint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1909
		{
			yyVAL.dataType = &DataType{TypeName: "smallint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1913
		{
			yyVAL.dataType = &DataType{TypeName: "mediumint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1917
		{
			yyVAL.dataType = &DataType{TypeName: "mediumint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1921
		{
			yyVAL.dataType = &DataType{TypeName: "int", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1925
		{
			yyVAL.dataType = &DataType{TypeName: "int(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1929
		{
			yyVAL.dataType = &DataType{TypeName: "integer", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1933
		{
			yyVAL.dataType = &DataType{TypeName: "integer(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1937
		{
			yyVAL.dataType = &DataType{TypeName: "bigint", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1941
		{
			yyVAL.dataType = &DataType{TypeName: "bigint(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1945
		{
			yyVAL.dataType = &DataType{TypeName: "real", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 437:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1949
		{
			yyVAL.dataType = &DataType{TypeName: "real(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1953
		{
			yyVAL.dataType = &DataType{TypeName: "double", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 439:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1957
		{
			yyVAL.dataType = &DataType{TypeName: "double(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1961
		{
			yyVAL.dataType = &DataType{TypeName: "float", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1965
		{
			yyVAL.dataType = &DataType{TypeName: "float(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:1969
		{
			yyVAL.dataType = &DataType{TypeName: "decimal", IsUnsigned: yyDollar[2].boolean, IsZeroFill: yyDollar[3].boolean}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:1973
		{
			yyVAL.dataType = &DataType{TypeName: "decimal(" + string(yyDollar[3].bytes) + ")", IsUnsigned: yyDollar[5].boolean, IsZeroFill: yyDollar[6].boolean}
		}
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:1977
		{
			yyVAL.dataType = &DataType{TypeName: "decimal(" + string(yyDollar[3].bytes) + "," + string(yyDollar[5].bytes) + ")", IsUnsigned: yyDollar[7].boolean, IsZeroFill: yyDollar[8].boolean}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1981
		{
			yyVAL.dataType = &DataType{TypeName: "date"}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1985
		{
			yyVAL.dataType = &DataType{TypeName: "time"}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1989
		{
			yyVAL.dataType = &DataType{TypeName: "time(" + string(yyDollar[3].bytes) + ")"}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:1993
		{
			yyVAL.dataType = &DataType{TypeName: "timestamp"}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:1997
		{
			yyVAL.dataType = &DataType{TypeName: "timestamp(" + string(yyDollar[3].bytes) + ")"}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2001
		{
			yyVAL.dataType = &DataType{TypeName: "datetime"}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2005
		{
			yyVAL.dataType = &DataType{TypeName: "datetime(" + string(yyDollar[3].bytes) + ")"}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2009
		{
			yyVAL.dataType = &DataType{TypeName: "year"}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2013
		{
			yyVAL.dataType = &DataType{TypeName: "char", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2017
		{
			yyVAL.dataType = &DataType{TypeName: "char(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 455:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2021
		{
			yyVAL.dataType = &DataType{TypeName: "varchar(" + string(yyDollar[3].bytes) + ")", IsBinary: yyDollar[5].boolean, Charset: yyDollar[6].bytes, Collate: yyDollar[7].bytes}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2025
		{
			yyVAL.dataType = &DataType{TypeName: "binary"}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2029
		{
			yyVAL.dataType = &DataType{TypeName: "binary(" + string(yyDollar[3].bytes) + ")"}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2033
		{
			yyVAL.dataType = &DataType{TypeName: "varbinary(" + string(yyDollar[3].bytes) + ")"}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2037
		{
			yyVAL.dataType = &DataType{TypeName: "tinyblob"}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2041
		{
			yyVAL.dataType = &DataType{TypeName: "blob"}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2045
		{
			yyVAL.dataType = &DataType{TypeName: "mediumblob"}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2049
		{
			yyVAL.dataType = &DataType{TypeName: "longblob"}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2053
		{
			yyVAL.dataType = &DataType{TypeName: "tinytext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2057
		{
			yyVAL.dataType = &DataType{TypeName: "text", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2061
		{
			yyVAL.dataType = &DataType{TypeName: "mediumtext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2065
		{
			yyVAL.dataType = &DataType{TypeName: "longtext", IsBinary: yyDollar[2].boolean, Charset: yyDollar[3].bytes, Collate: yyDollar[4].bytes}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2069
		{
			yyVAL.dataType = &DataType{TypeName: "enum(" + String(yyDollar[3].valExprs) + ")", Charset: yyDollar[5].bytes, Collate: yyDollar[6].bytes}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2073
		{
			yyVAL.dataType = &DataType{TypeName: "set(" + String(yyDollar[3].valExprs) + ")", Charset: yyDollar[5].bytes, Collate: yyDollar[6].bytes}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2079
		{
			yyVAL.boolean = false
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2081
		{
			yyVAL.boolean = true
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2085
		{
			yyVAL.valExpr = yyDollar[2].valExpr
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2088
		{
			yyVAL.boolean = false
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2090
		{
			yyVAL.boolean = true
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2093
		{
			yyVAL.bytes = nil
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2095
		{
			yyVAL.bytes = []byte("unique key")
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2097
		{
			yyVAL.bytes = []byte("unique key")
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2099
		{
			yyVAL.bytes = []byte("primary key")
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2101
		{
			yyVAL.bytes = []byte("primary key")
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2104
		{
			yyVAL.valExpr = nil
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2106
		{
			yyVAL.valExpr = StrVal(yyDollar[2].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2111
		{
			yyVAL.bytes = nil
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2113
		{
			yyVAL.bytes = []byte("fixed")
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2115
		{
			yyVAL.bytes = []byte("dynamic")
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2117
		{
			yyVAL.bytes = []byte("default")
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2120
		{
			yyVAL.bytes = nil
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2122
		{
			yyVAL.bytes = []byte("disk")
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2124
		{
			yyVAL.bytes = []byte("memory")
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2126
		{
			yyVAL.bytes = []byte("default")
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2129
		{
			yyVAL.bytes = nil
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2131
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 491:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2135
		{
			yyVAL.bytes = []byte("references " + String(yyDollar[2].tableName) + "(" + String(yyDollar[4].idxColNames) + ")" + string(yyDollar[6].bytes) + string(yyDollar[7].bytes))
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2138
		{
			yyVAL.bytes = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2140
		{
			yyVAL.bytes = []byte("match full")
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2142
		{
			yyVAL.bytes = []byte("match partial")
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2144
		{
			yyVAL.bytes = []byte("match simple")
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2147
		{
			yyVAL.bytes = nil
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2149
		{
			yyVAL.bytes = []byte("on delete " + string(yyDollar[3].bytes))
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2151
		{
			yyVAL.bytes = []byte("on update " + string(yyDollar[3].bytes))
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2153
		{
			yyVAL.bytes = []byte("on delete " + string(yyDollar[3].bytes) + " on update " + string(yyDollar[6].bytes))
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2156
		{
			yyVAL.bytes = nil
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2158
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2162
		{
			yyVAL.bytes = []byte("restrict")
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2164
		{
			yyVAL.bytes = []byte("cascade")
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2166
		{
			yyVAL.bytes = []byte("set null")
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2168
		{
			yyVAL.bytes = []byte("no action")
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2171
		{
			yyVAL.boolean = false
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2173
		{
			yyVAL.boolean = true
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2176
		{
			yyVAL.boolean = false
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2178
		{
			yyVAL.boolean = true
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2181
		{
			yyVAL.boolean = false
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2183
		{
			yyVAL.boolean = true
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2186
		{
			yyVAL.bytes = nil
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2188
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2191
		{
			yyVAL.bytes = nil
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2193
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2196
		{
			yyVAL.bytes = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2198
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2201
		{
			yyVAL.optKeyVals = nil
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2203
		{
			yyVAL.optKeyVals = yyDollar[1].optKeyVals
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2207
		{
			yyVAL.optKeyVals = OptionKeyValues{yyDollar[1].optKeyVal}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2209
		{
			yyVAL.optKeyVals = append(yyDollar[1].optKeyVals, yyDollar[2].optKeyVal)
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2213
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "engine", Value: string(yyDollar[3].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2217
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "auto_increment", Value: string(yyDollar[3].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2221
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[5].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2225
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[4].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2229
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[4].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2233
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "charset", Value: string(yyDollar[3].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2237
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "collate", Value: string(yyDollar[4].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2241
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "collate", Value: string(yyDollar[3].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2245
		{
			yyVAL.optKeyVal = &OptionKeyValue{Key: "comment", Value: String(StrVal(yyDollar[3].bytes))}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2250
		{
			yyVAL.alterSpecs = nil
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2252
		{
			yyVAL.alterSpecs = yyDollar[1].alterSpecs
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2256
		{
			yyVAL.alterSpecs = AlterSpecifications{yyDollar[1].alterSpec}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2258
		{
			yyVAL.alterSpecs = append(yyDollar[1].alterSpecs, yyDollar[3].alterSpec)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2262
		{
			yyVAL.alterSpec = yyDollar[1].optKeyVals
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2266
		{
			yyVAL.alterSpec = &AddOrModifyColumnSpec{Action: "add", ColumnName: yyDollar[3].colName, ColumnDef: yyDollar[4].columnDef, FirstOrAfterColumn: yyDollar[5].fiOAfCol}
		}
	case 537:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2270
		{
			yyVAL.alterSpec = &AddIndexSpec{Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 538:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line yacc.y:2274
		{
			yyVAL.alterSpec = &AddIndexSpec{Name: yyDollar[3].bytes, IndexType: yyDollar[4].bytes, IndexColumns: yyDollar[6].idxColNames}
		}
	case 539:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2278
		{
			yyVAL.alterSpec = &AddPrimaryKeySpec{Symbol: yyDollar[2].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2282
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[4].bytes, IndexType: yyDollar[5].bytes, IndexColumns: yyDollar[7].idxColNames}
		}
	case 541:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:2286
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, IndexColumns: yyDollar[8].idxColNames}
		}
	case 542:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line yacc.y:2290
		{
			yyVAL.alterSpec = &AddUniqueIndexSpec{Symbol: yyDollar[2].bytes, Name: yyDollar[5].bytes, IndexType: yyDollar[6].bytes, IndexColumns: yyDollar[8].idxColNames}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line yacc.y:2294
		{
			yyVAL.alterSpec = &AddForeignKeySpec{Symbol: yyDollar[2].bytes, IndexColumns: yyDollar[6].idxColNames, ReferenceDef: yyDollar[8].bytes}
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line yacc.y:2298
		{
			yyVAL.alterSpec = &ChangeColumnSpec{OldColumnName: yyDollar[3].colName, ColumnName: yyDollar[4].colName, ColumnDef: yyDollar[5].columnDef, FirstOrAfterColumn: yyDollar[6].fiOAfCol}
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line yacc.y:2302
		{
			yyVAL.alterSpec = &AddOrModifyColumnSpec{Action: "modify", ColumnName: yyDollar[3].colName, ColumnDef: yyDollar[4].columnDef, FirstOrAfterColumn: yyDollar[5].fiOAfCol}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2306
		{
			yyVAL.alterSpec = &DropColumnSpec{ColumnName: yyDollar[3].colName}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2310
		{
			yyVAL.alterSpec = &DropPrimaryKeySpec{}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2314
		{
			yyVAL.alterSpec = &DropIndexSpec{Name: yyDollar[3].bytes}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line yacc.y:2318
		{
			yyVAL.alterSpec = &DropIndexSpec{Name: yyDollar[3].bytes}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line yacc.y:2322
		{
			yyVAL.alterSpec = &DropForeignKeySpec{Name: yyDollar[4].bytes}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2326
		{
			yyVAL.alterSpec = &DisableKeysSpec{}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2330
		{
			yyVAL.alterSpec = &EnableKeysSpec{}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line yacc.y:2335
		{
			yyVAL.fiOAfCol = nil
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line yacc.y:2337
		{
			yyVAL.fiOAfCol = yyDollar[1].fiOAfCol
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2341
		{
			yyVAL.fiOAfCol = &FirstOrAfterColumn{FirstOrAfter: "first", ColumnName: yyDollar[2].colName}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line yacc.y:2345
		{
			yyVAL.fiOAfCol = &FirstOrAfterColumn{FirstOrAfter: "after", ColumnName: yyDollar[2].colName}
		}
	}
	goto yystack /* stack new state and value */
}
